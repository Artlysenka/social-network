{"version":3,"sources":["components/Common/Preloader/Preloader.module.css","redux/dialogsReducerTypescript.ts","components/Music/Music.module.css","components/Users/Users.module.css","components/Login/LoginForm.module.css","API/apiTS.ts","components/Navbar/Nav.module.css","components/Common/FormControls/Login.module.css","reportWebVitals.js","OldReducers/friendsReducer.js","redux/usersReducerTypescript.ts","redux/authReducerTypescript.ts","redux/appReducerTypescript.ts","redux/reduxStoreTS.ts","components/Navbar/NavTS.tsx","components/Music/Music.jsx","components/Header/HeaderTS.tsx","components/Header/HeaderContainerTS.tsx","components/Users/Paginator/PageButtonTS.tsx","components/Users/Paginator/PaginatorTS.tsx","components/Users/User/UserTS.tsx","components/Users/UsersTS.tsx","components/Users/UsersInnerContainerTS.tsx","components/Common/FormControls/TextError.jsx","components/Common/FormControls/FormikCheckbox.jsx","components/Common/FormControls/FormikDatePicker.jsx","components/Common/FormControls/FormikInput.jsx","components/Common/FormControls/FormikRadioButtons.jsx","components/Common/FormControls/FormikSelect.jsx","components/Common/FormControls/FormikTextArea.jsx","components/Common/FormControls/FormikControl.jsx","components/Login/LoginFormTS.tsx","hoc/WithSuspense.js","components/Settings/SettingsTS.tsx","components/Settings/SettingsContainerTS.tsx","App.js","index.js","components/Users/User/User.module.css","OldReducers/selectors.js","components/Header/Header.module.css","assets/loaderSVG.svg","components/Common/Preloader/Preloader.jsx","redux/profileReducerTypescript.ts","OldReducers/authReducer.js","API/api.js","assets/defaultAvatar.png","hoc/LoggedInRedirect.js","redux/myFirstTypescriptReducer.tsx","components/Users/Paginator/PageButton.module.css"],"names":["module","exports","POST_NEW_TEXT","initialState","dialogsData","messagesData","dialogsReducer","state","action","type","newDialog","id","name","newPostItem","message","postText","postNewTextActionCreator","instance","axios","create","withCredentials","baseURL","headers","getUsers","pageSize","pageCount","get","then","res","data","getUserProfile","userId","sendUserStatus","status","put","getUserStatus","sendUserPhoto","file","formData","FormData","append","sendUserProfileSettings","settings","a","console","log","follow","post","unFollow","delete","logInProfile","loginMe","email","password","rememberMe","captcha","logOutMe","getCaptcha","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friends","friendsReducer","stateCopy","FOLLOW","UNFOLLOW","SET_USERS","PAGE_SIZE","TOGGLE_PRELOADER","TOGGLE_FOLLOWING_PROGRESS","PAGE_COUNT","TOTAL_COUNT","users","totalCount","isFetching","followingProgress","followAC","unfollowAC","setUsersAC","pageCountAC","toggleFollowingProgressAC","SET_USER_DATA","LOGGED_IN_TOGGLE","LOGGED_IN_FETCHING","CAPTCHA","login","isLoggedIn","confirmation","captchaImg","setUserDataAC","LoggedInFetchingAC","getCaptchaThunk","dispatch","url","INITIALIZED_SUCCSESS","initialized","reducers","combineReducers","profileReducer","usersReducer","map","user","followed","filter","authReducer","appReducer","headerReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Nav","className","classes","nav","item","to","activeClassName","active","Music","props","contentColor","Header","userSettings","document","getElementById","hideUserSettingsContainer","style","display","header","onMouseOver","onMouseOut","userInfo","userLogin","userAvatar","src","userProfilePhoto","defaultAvatar","alt","profileSettings","onClick","logOut","HeaderContainer","this","getUserProfilePhotoThunk","React","Component","withRouter","connect","resultCode","PageButton","cn","checkedButton","button","removeUsers","Paginator","useState","initialPage","setInitialPage","numberOfShowedButtons","decrementNumber","setDecrementNumber","incrementNumber","numberOfPageButtons","Math","ceil","buttons","buttonsInitializeArray","i","push","createButtonsArray","PageButtonTS","buttonsContainer","User","photo","unFollowThunkCreator","followThunkCreator","slicedStatus","length","slice","logoBlock","disabled","some","infoBlock","country","city","UsersTS","photos","small","PaginatorTS","UsersInnerContainer","getUsersThunkCreator","removeUsersThunkCreator","Preloader","getUsersSuper","usersSelectors","getPageSize","getPageCount","getTotalCount","getIsFetching","getFollowingProgrress","pageSizeAC","items","LoggedInRedirect","TextError","error","children","FormikCheckbox","options","label","rest","field","option","Fragment","htmlFor","value","key","checked","component","FormikDatePicker","formControl","form","setFieldValue","selected","onChange","val","Input","autocomplete","FormikInput","touchedEmail","touchedPassword","alert","FormikRadioButtons","FormikSelect","as","FormikTextArea","FormikControl","control","validationSchema","Yup","required","initialValues","onSubmit","values","formik","touched","isValid","WithSuspense","Suspense","fallback","Settings","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","shape","sendProfileSettings","validateOnChange","isSubmitting","SettingsContainer","getUserProfileThunkCreator","removeUserProfileThunkCreator","updateUserProfileSettings","DialogContainerTS","lazy","ProfileContainer","App","initializeApp","path","render","exact","AppWithRouter","logInUserPromise","logInUserThunkCreator","Promise","all","MainApp","basename","process","rerenderEntireTree","ReactDOM","getAllUsers","getAllUsersSelector","createSelector","postsSelectors","getPosts","posts","getProfile","getNewPostsText","newPostText","getLogin","preloaderContainer","preloader","SET_USER_PROFILE","APDATE_USER_STATUS","ADD_NEW_POST","DELETE_POST","UPDATE_USER_PHOTO","LOADING_NEW_PROFILE_PHOTO","userStatus","loadingPhoto","newPost","userAva","userName","likesCount","postId","setUserProfile","updateUserStatusAC","UserId","getUserStatusThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","loadingPhotoThunk","LoggedInTogglegAC","RedirectedComponent","SET_USER_PROFILE_PHOTO"],"mappings":"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","file":"static/js/main.eaf3b15a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__2qmHb\",\"preloader\":\"Preloader_preloader__3nzjs\"};","const POST_NEW_TEXT = 'POST_NEW_TEXT'\r\n\r\ntype newDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype newPostItemType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype initialStateType = {\r\n    dialogsData: Array<newDialogType>\r\n    messagesData: Array<newPostItemType>\r\n}\r\n\r\ntype actionType = {\r\n    type : typeof POST_NEW_TEXT\r\n    postText: string\r\n}\r\n\r\nlet initialState : initialStateType  = {\r\n    dialogsData: [],\r\n    messagesData: [],\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action : actionType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POST_NEW_TEXT:\r\n            let newDialog : newDialogType = {\r\n                id: 4,\r\n                name: 'Tema'\r\n            }\r\n            let newPostItem : newPostItemType = {\r\n                id: 4,\r\n                message: action.postText\r\n            }\r\n            return {\r\n                ...state,\r\n                dialogsData: [...state.dialogsData, newDialog],\r\n                messagesData: [...state.messagesData, newPostItem],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const postNewTextActionCreator = (postText : string) => {\r\n    return {\r\n        type: POST_NEW_TEXT,\r\n        postText: postText\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Music_contentColor__3tC_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Users_contentColor__2Kips\",\"addUsersButtonContainer\":\"Users_addUsersButtonContainer__3tC_O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaImg\":\"LoginForm_captchaImg__1M2-6\"};","import { profileType, settingsType, userType } from './../types/types';\r\nimport axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\ntype usersType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const getUsers = (pageSize : number, pageCount : number) => {\r\n    return instance.get<usersType>('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\n\r\nexport const getUserProfile = (userId : number) => {\r\n    return instance.get<profileType>('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status : string) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId : number) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file : any) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings : settingsType) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId : number) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId : number) => {\r\n    return instance.delete('follow/' + userId, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\ntype logInVerificationType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get<logInVerificationType>('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email : string, password : string, rememberMe : boolean = true, captcha : string) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3jRL3\",\"item\":\"Nav_item__3Mn2D\",\"active\":\"Nav_active__10tEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__3P2GR\",\"formControl\":\"Login_formControl__2h8Kz\",\"alert\":\"Login_alert__3TE9q\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\r\n    friends: [\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    return stateCopy\r\n}\r\nexport default friendsReducer","import { userType } from './../types/types';\r\nimport { follow, unFollow, getUsers } from '../API/apiTS'\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType } from './reduxStoreTS';\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst PAGE_SIZE = 'PAGE_SIZE'\r\nconst TOGGLE_PRELOADER = 'TOGGLE_PRELOADER'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\nconst PAGE_COUNT = 'PAGE_COUNT'\r\nconst TOTAL_COUNT = 'TOTAL_COUNT'\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 100,\r\n    pageCount: 1,\r\n    totalCount: 0,\r\n    isFetching: false,\r\n    followingProgress: [] as Array<number>,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const usersReducer = (state : initialStateType = initialState, action : actionTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case PAGE_SIZE:\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case PAGE_COUNT:\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        case TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_PRELOADER:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionTypes = followACType | unfollowACType | setUsersACType | pageSizeACType | \r\npageCountACType | totalCountARType | togglePreloaderACType | toggleFollowingProgressACType \r\n\r\n\r\ntype followACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followAC = (userId : number) : followACType => ({ type: FOLLOW, userId })\r\n\r\ntype unfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowAC = (userId : number) : unfollowACType => ({ type: UNFOLLOW, userId })\r\n\r\ntype setUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<userType>\r\n}\r\nexport const setUsersAC = (users : Array<userType>) : setUsersACType => ({ type: SET_USERS, users })\r\n\r\ntype pageSizeACType = {\r\n    type: typeof PAGE_SIZE\r\n    pageSize: number\r\n}\r\nexport const pageSizeAC = (pageSize : number) : pageSizeACType => ({ type: PAGE_SIZE, pageSize })\r\n\r\ntype pageCountACType = {\r\n    type: typeof PAGE_COUNT\r\n    pageCount: number\r\n}\r\nexport const pageCountAC = (pageCount: number) : pageCountACType => ({ type: PAGE_COUNT, pageCount })\r\n\r\ntype totalCountARType = {\r\n    type: typeof TOTAL_COUNT\r\n    totalCount: number\r\n}\r\nexport const totalCountAR = (totalCount : number) : totalCountARType => ({ type: TOTAL_COUNT, totalCount })\r\n\r\ntype togglePreloaderACType = {\r\n    type: typeof TOGGLE_PRELOADER\r\n    isFetching: boolean\r\n}\r\nexport const togglePreloaderAC = (isFetching : boolean) : togglePreloaderACType => ({ type: TOGGLE_PRELOADER, isFetching })\r\n\r\ntype toggleFollowingProgressACType = {\r\n    type: typeof TOGGLE_FOLLOWING_PROGRESS\r\n    followingProgress: boolean\r\n    userId: number\r\n}\r\nexport const toggleFollowingProgressAC = (followingProgress : boolean, userId: number) : toggleFollowingProgressACType => \r\n({ type: TOGGLE_FOLLOWING_PROGRESS, followingProgress, userId })\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionTypes>\r\n\r\nexport const getUsersThunkCreator = (pageSize: number, pageCount : number) : thunkType =>\r\n    async (dispatch) => {\r\n        dispatch(pageCountAC(pageCount))\r\n        const res = await getUsers(pageSize, pageCount)\r\n        dispatch(setUsersAC(res.items))\r\n        dispatch(totalCountAR(res.totalCount))\r\n    }\r\n\r\n\r\nexport const removeUsersThunkCreator = () : \r\nThunkAction<void, AppStateType, unknown, actionTypes> => {\r\n    return (dispatch) => {\r\n        dispatch(setUsersAC([]))\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId : number) : thunkType =>\r\n\r\n    async (dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(followAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\nexport const unFollowThunkCreator = (userId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await unFollow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(unfollowAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { ThunkAction } from 'redux-thunk'\r\nimport { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/apiTS'\r\nimport { AppStateType } from './reduxStoreTS'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\ntype initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoggedIn: boolean\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n    captchaImg: string\r\n}\r\n\r\n\r\nlet initialState : initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            } as initialStateType\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionsType = setUserDataACType | LoggedInTogglegACType | LoggedInFetchingACType | captchaType\r\n\r\ntype setUserDataACDataType = {\r\n    userId: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isLoggedIn: null | boolean\r\n}\r\ntype setUserDataACType = {\r\n    type : typeof SET_USER_DATA\r\n    data : setUserDataACDataType\r\n}\r\n\r\nexport const setUserDataAC = \r\n(userId : number | null, email : string | null, login : string | null, isLoggedIn : boolean) \r\n: setUserDataACType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\n\r\ntype LoggedInTogglegACType = {\r\n    type : typeof LOGGED_IN_TOGGLE\r\n    isLoggedIn : boolean\r\n}\r\nexport const LoggedInTogglegAC = (isLoggedIn : boolean) : LoggedInTogglegACType => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\ntype LoggedInFetchingACType = {\r\n    type : typeof LOGGED_IN_FETCHING\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching : boolean, confirmation : boolean) : LoggedInFetchingACType => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\ntype captchaType = {\r\n    type: typeof CAPTCHA\r\n    captchaImg: string\r\n}\r\nexport const captcha = (captchaImg : string) : captchaType => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const logInUserThunkCreator = () : thunkType => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email : string, password : string, rememberMe : boolean, captcha : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { logInUserThunkCreator } from \"../OldReducers/authReducer\"\r\nimport { AppStateType } from \"./reduxStoreTS\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\n\r\ntype initialStateType = {\r\n    initialized : boolean\r\n}\r\n\r\ntype actionType = {\r\n    type: typeof INITIALIZED_SUCCSESS\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () : actionType => ({ type: INITIALIZED_SUCCSESS })\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionType>\r\n\r\nexport const initializeApp = () : thunkType => (dispatch) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\r\nimport { profileReducer } from './profileReducerTypescript'\r\nimport { dialogsReducer } from './dialogsReducerTypescript'\r\nimport { friendsReducer } from '../OldReducers/friendsReducer'\r\nimport { usersReducer } from './usersReducerTypescript'\r\nimport { authReducer } from './authReducerTypescript'\r\nimport { appReducer } from './appReducerTypescript'\r\nimport { headerReducer } from './myFirstTypescriptReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport classes from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst Nav = function () {\r\n  return (\r\n    <div className={classes.nav}>\r\n      \r\n      <nav >\r\n        <div className={classes.item}>\r\n          <NavLink to='/Profile/' activeClassName={classes.active}>My Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Users' activeClassName={classes.active}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\nexport default Nav ","import React from 'react'\r\nimport classes from './Music.module.css'\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={classes.contentColor}>\r\n            <h1>\r\n                Music\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport defaultAvatar from '../../assets/defaultAvatar.png'\r\nimport { headerPropsType } from '../../types/types'\r\n\r\n\r\n\r\nconst Header: React.FC<headerPropsType> = (props) => {\r\n\r\n    \r\n    const logout = () => {\r\n        props.logOut()\r\n    }\r\n\r\n    let userSettings = document.getElementById('profileSettings')\r\n\r\n    const showUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'block';\r\n    }\r\n    const hideUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isLoggedIn ?\r\n                    <div\r\n                        onMouseOver={showUserSettingsContainer}\r\n                        onMouseOut={hideUserSettingsContainer}>\r\n\r\n                        <div\r\n                            className={classes.userInfo}>\r\n                            <div className={classes.userLogin}>\r\n                                <div><span>{props.login}</span></div>\r\n                            </div>\r\n                            <NavLink to='/Profile'>\r\n                                <div className={classes.userAvatar}>\r\n                                    <img src={props.userProfilePhoto || defaultAvatar} alt=\"User avatar\" />\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div id='profileSettings' className={classes.profileSettings}>\r\n                            <div>\r\n                                <button onClick={logout}>Log out</button>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/Settings'>\r\n                                    <button onClick={hideUserSettingsContainer} >\r\n                                        Profile settings\r\n                                </button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : <NavLink to='/Login'> <button>Login</button></NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './HeaderTS'\r\nimport { logOut } from '../../redux/authReducerTypescript'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport { getUserProfilePhotoThunk } from '../../redux/myFirstTypescriptReducer';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { headerPropsType } from '../../types/types';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component<headerPropsType> {\r\n\r\n    componentDidMount() { \r\n        this.props.getUserProfilePhotoThunk(this.props.userId)\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state : AppStateType) => ({\r\n    isLoggedIn: state.authReducer.isLoggedIn,\r\n    login: state.authReducer.login,\r\n    isFetching: state.authReducer.isFetching,\r\n    userId: state.authReducer.userId,\r\n    userProfilePhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, { logOut, getUserProfilePhotoThunk })\r\n)(HeaderContainer) ","import React from 'react'\r\nimport classes from './PageButton.module.css'\r\nimport { propsType } from './PaginatorTS'\r\nimport cn from 'classnames'\r\n\r\ninterface PageButtonProps extends propsType {\r\n    button: number\r\n}\r\n\r\nconst PageButton = (props: PageButtonProps) => {\r\n\r\n    const switchPage = () => {\r\n        props.removeUsers()\r\n        props.getUsers(props.pageSize, props.button)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button\r\n                    key={props.button}\r\n                    className={cn({\r\n                        [classes.checkedButton] : props.button === props.pageCount\r\n                    })}\r\n                    onClick={switchPage}>\r\n                    {props.button}\r\n                </button>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PageButton","import React, { useState } from 'react'\r\nimport PageButtonTS from './PageButtonTS'\r\nimport classes from './PageButton.module.css'\r\n\r\nexport type propsType = {\r\n    pageSize: number\r\n    totalCount: number\r\n    pageCount: number\r\n    getUsers: (\r\n        pageSize: number,\r\n        button: number\r\n    ) => any\r\n    removeUsers: () => any\r\n}\r\n\r\nconst Paginator : React.FC<propsType> = (props) => {\r\n\r\n    const buttonsPortion : number = 5\r\n    let touchedDecrementButton : boolean = false\r\n    const [initialPage, setInitialPage] = useState(props.pageCount)\r\n    const [numberOfShowedButtons] = useState(7)\r\n    const [decrementNumber, setDecrementNumber] = useState(buttonsPortion)\r\n    const [incrementNumber, setIncrementNumber] = useState(buttonsPortion)\r\n    const numberOfPageButtons = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n\r\n    const incrementInitialPage = () => {\r\n        setInitialPage(initialPage + incrementNumber)\r\n    }\r\n\r\n    const decrementInitialPage = () => {\r\n        setInitialPage(initialPage - decrementNumber)\r\n        touchedDecrementButton = true\r\n        if (touchedDecrementButton && decrementNumber !== buttonsPortion) setDecrementNumber(buttonsPortion)\r\n\r\n    }\r\n\r\n    const createButtonsArray = () : Array<number> => {\r\n        let buttonsInitializeArray : Array<number> = []\r\n        for (let i = initialPage; i < numberOfPageButtons + 1; i++) {\r\n            buttonsInitializeArray.push(i)\r\n        }\r\n\r\n        if (initialPage === 1) {\r\n            return buttonsInitializeArray\r\n        }\r\n        else if (initialPage - decrementNumber < 0) {\r\n            setDecrementNumber((decrementNumber - 1) + (initialPage - decrementNumber))\r\n        }\r\n\r\n        return buttonsInitializeArray\r\n    }\r\n\r\n    let buttons = createButtonsArray().map(function (button) {\r\n        if (button > initialPage + numberOfShowedButtons - 1) {\r\n            return\r\n        }\r\n        return <PageButtonTS\r\n            button={button}\r\n            pageSize={props.pageSize}\r\n            getUsers={props.getUsers}\r\n            pageCount={props.pageCount}\r\n            totalCount={props.totalCount}\r\n            removeUsers={props.removeUsers}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={classes.buttonsContainer}>\r\n            {initialPage === 1\r\n                ? null\r\n                : <div>\r\n                    <button onClick={decrementInitialPage}>назад</button>\r\n                </div>}\r\n            {buttons}\r\n            {numberOfPageButtons - incrementNumber <= initialPage\r\n                ? null\r\n                : <div>\r\n                    <button onClick={incrementInitialPage}>Вперед</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from 'react'\r\nimport classes from './User.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype userType = {\r\n    key: number\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photo: string | null\r\n    followed: boolean\r\n    followingProgress: Array<number>\r\n    followThunkCreator: (id: number) => void\r\n    unFollowThunkCreator: (id: number) => void\r\n}\r\n\r\nconst User = (props : userType) => {\r\n\r\n    let {\r\n        id,\r\n        photo,\r\n        followed,\r\n        followingProgress,\r\n        unFollowThunkCreator,\r\n        followThunkCreator,\r\n        name,\r\n        status\r\n    } = props\r\n\r\n    let slicedStatus = null\r\n\r\n    if (status && status.length > 50) {\r\n        slicedStatus = status.slice(1,50) + '...'\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.logoBlock}>\r\n                <div>\r\n                    <NavLink to={'/Users/' + id} >\r\n                        <img src={photo == null ? defaultAvatar : photo} alt=\"UserPhoto\" />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            unFollowThunkCreator(id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            followThunkCreator(id)\r\n                        }}>Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div className={classes.infoBlock}>\r\n                <div className={classes.name}>{name}</div>\r\n                <div className={classes.status}>{slicedStatus || status}</div>\r\n                <div className={classes.country}>Belarus<i>(hardcode)</i>,</div>\r\n                <div className={classes.city}>Bralaw<i>(hardcode)</i></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from 'react'\r\nimport PaginatorTS from './Paginator/PaginatorTS'\r\nimport User from './User/UserTS'\r\nimport classes from './Users.module.css'\r\nimport { usersPropsType } from '../../types/types'\r\n\r\n\r\nconst UsersTS : React.FC<usersPropsType> = (props) => {\r\n    let users = props.users.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        name={user.name}\r\n        status={user.status}\r\n        photo={user.photos.small}\r\n        followed={user.followed}\r\n        followingProgress={props.followingProgress}\r\n        followThunkCreator={props.followThunkCreator}\r\n        unFollowThunkCreator={props.unFollowThunkCreator}\r\n    />)\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n            <div>\r\n                {users}\r\n            </div>\r\n            <PaginatorTS\r\n                pageSize={props.pageSize}\r\n                totalCount={props.totalCount}\r\n                getUsers={props.getUsers}\r\n                pageCount={props.pageCount}\r\n                removeUsers={props.removeUsers}\r\n                />\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersTS","import React from 'react'\r\nimport UsersTS from './UsersTS';\r\nimport { usersPropsType } from '../../types/types'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    pageSizeAC,\r\n    getUsersThunkCreator,\r\n    followThunkCreator,\r\n    unFollowThunkCreator,\r\n    removeUsersThunkCreator,\r\n    pageCountAC\r\n} from '../../redux/usersReducerTypescript'\r\nimport { compose } from 'redux';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect'\r\nimport {\r\n    getUsersSuper,\r\n    usersSelectors\r\n} from '../../OldReducers/selectors'\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\ninterface PropsType extends usersPropsType {\r\n    getUsersThunkCreator: (pageSize: number, pageCount: number) => void\r\n    removeUsersThunkCreator: () => void\r\n}\r\n\r\nclass UsersInnerContainer extends React.Component<PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.pageSize, this.props.pageCount)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUsersThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.users.length) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <>\r\n                <UsersTS\r\n                    users={this.props.users}\r\n                    pageSize={this.props.pageSize}\r\n                    totalCount={this.props.totalCount}\r\n                    followingProgress={this.props.followingProgress}\r\n                    followThunkCreator={this.props.followThunkCreator}\r\n                    unFollowThunkCreator={this.props.unFollowThunkCreator}\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                    pageCount={this.props.pageCount}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: usersSelectors.getPageSize(state),\r\n        pageCount: usersSelectors.getPageCount(state),\r\n        totalCount: usersSelectors.getTotalCount(state),\r\n        isFetching: usersSelectors.getIsFetching(state),\r\n        followingProgress: usersSelectors.getFollowingProgrress(state),\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        pageSizeAC,\r\n        getUsersThunkCreator,\r\n        removeUsersThunkCreator,\r\n        followThunkCreator,\r\n        unFollowThunkCreator,\r\n        pageCountAC,\r\n    }),\r\n    LoggedInRedirect\r\n)(UsersInnerContainer)","import React from 'react' \r\nimport classes from './Login.module.css'\r\n\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div className={classes.error}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError","import React from 'react' \r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikCheckbox = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <div>\r\n                                    <label htmlFor={option.value}>{option.key}</label>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value.length === 2} />\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikCheckbox","import React from 'react'\r\nimport DateView from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikDatePicker = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field }) => {\r\n                        const { setFieldValue } = form\r\n                        const { value } = field\r\n                        return <DateView\r\n                            id={name}\r\n                            {...field}\r\n                            {...rest}\r\n                            selected={value}\r\n                            onChange={val => setFieldValue(name, val)} />\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikDatePicker","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Input = (props) => {\r\n    return <div className={classes.formControl}>\r\n        <label htmlFor={props.name}>{props.label}</label>\r\n        <div>\r\n            <Field\r\n                className={props.className}\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                autocomplete={props.autocomplete} />\r\n            <ErrorMessage name={props.name} component={TextError} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst FormikInput = (props) => {\r\n    const {\r\n        label,\r\n        name,\r\n        email,\r\n        password,\r\n        touchedEmail,\r\n        touchedPassword,\r\n        type\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Input className={cn({\r\n                [classes.alert]: touchedEmail && !email || touchedPassword && !password\r\n            })}\r\n                name={name}\r\n                label={label}\r\n                type={type} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikInput","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikRadioButtons = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <label htmlFor={name}>{label}</label>\r\n            <div></div>\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        console.log('field',field)\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value === option.value} />\r\n                                        <label htmlFor={option.value}>{option.key}</label>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikRadioButtons","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikSelect = (props) => {\r\n    const { label, name, options, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='select' id={name} name={name} {...rest}>\r\n                {\r\n                    options.map(option => {\r\n                        return <option key={option.value} value={option.value}>\r\n                            {option.key}\r\n                        </option>\r\n                    })\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikSelect","import React from 'react' \r\nimport { Field, ErrorMessage} from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikTextArea = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='textarea' id={name} name={name} {...rest}/>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikTextArea","import React from 'react'\r\nimport FormikCheckbox from './FormikCheckbox'\r\nimport FormikDatePicker from './FormikDatePicker'\r\nimport FormikInput from './FormikInput'\r\nimport FormikRadioButtons from './FormikRadioButtons'\r\nimport FormikSelect from './FormikSelect'\r\nimport FormikTextArea from './FormikTextArea'\r\n\r\nconst FormikControl = (props) => {\r\n    const { control, ...rest } = props\r\n    switch (control) {\r\n        case 'input': return <FormikInput {...rest} />\r\n        case 'textarea': return <FormikTextArea {...rest} />\r\n        case 'select': return <FormikSelect {...rest} />\r\n        case 'radio': return <FormikRadioButtons {...rest} />\r\n        case 'checkbox': return <FormikCheckbox {...rest} /> \r\n        case 'date': return <FormikDatePicker {...rest} />\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport default FormikControl","import React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { login } from '../../redux/authReducerTypescript'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './LoginForm.module.css'\r\nimport { AppStateType } from '../../redux/reduxStoreTS'\r\n\r\ntype loginPropsType = {\r\n    isLoggedIn: boolean\r\n    captchaImg: string | undefined\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst LoginForm : React.FC<loginPropsType> = (props) => {\r\n\r\n    const { login, isLoggedIn, captchaImg } = props\r\n\r\n    type initialValuesType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha: string\r\n    }\r\n\r\n    const initialValues : initialValuesType = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email format').required('Enter email'),\r\n        password: Yup.string().required('Enter password'),\r\n    })\r\n\r\n    const onSubmit = (values : initialValuesType) => {\r\n        login(values.email, values.password, values.rememberMe, values.captcha)\r\n    }\r\n\r\n    if (isLoggedIn) { return <Redirect to={'/Profile'} /> } // Проверяем, если мы залогинены, то редиректим на профиль\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <h1>Login</h1>\r\n                        <FormikControl\r\n                            email={formik.values.email}\r\n                            touchedEmail={formik.touched.email}\r\n                            control='input'\r\n                            type='email'\r\n                            label='Email'\r\n                            name='email' />\r\n                        <FormikControl\r\n                            password={formik.values.password}\r\n                            touchedPassword={formik.touched.password}\r\n                            control='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            name='password'\r\n                        />\r\n                        <p></p>\r\n                        <input type='submit' disabled={!formik.isValid} value={'Login'} />\r\n                        {!captchaImg ?\r\n                            null\r\n                            : <div className={classes.captchaImg}>\r\n                                <p></p>\r\n                                <img src={captchaImg} alt=\"captcha\" />\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    label='Enter your captcha'\r\n                                    name='captcha'\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </Form>\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\nexport let mapStateToProps = (state : AppStateType) => {\r\n    return {\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        captchaImg: state.authReducer.captchaImg\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm)","import React from 'react'\r\nimport Preloader from '../components/Common/Preloader/Preloader'\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props}/>\r\n        </React.Suspense> \r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { profileType, settingsType } from '../../types/types'\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    sendProfileSettings: (values : any) => void\r\n}\r\n\r\nconst Settings : React.FC<propsType> = (props) => {\r\n    \r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profile\r\n    const { facebook, github, instagram, mainLink, twitter, vk, website, youtube } = props.profile.contacts\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        contacts: Yup.object().shape({\r\n            github: Yup.string().url('Invalid URL!'),\r\n            vk: Yup.string().url('Invalid URL!'),\r\n            facebook: Yup.string().url('Invalid URL!'),\r\n            instagram: Yup.string().url('Invalid URL!'),\r\n            twitter: Yup.string().url('Invalid URL!'),\r\n            website: Yup.string().url('Invalid URL!'),\r\n            youtube: Yup.string().url('Invalid URL!'),\r\n            mainLink: Yup.string().url('Invalid URL!')\r\n        })\r\n    })\r\n\r\n\r\n    const initialValues : settingsType = {\r\n        fullName: fullName,\r\n        aboutMe: aboutMe,\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n    }\r\n\r\n    const onSubmit = (values : settingsType) => {\r\n        console.log('Submitting')\r\n        async function sendProfileSettings() {\r\n            await props.sendProfileSettings(values)\r\n        }\r\n        return sendProfileSettings()\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n                validateOnChange={false}\r\n                >\r\n                {\r\n                    formik => {\r\n                        \r\n                        return <Form>\r\n                            <h1>Profile settings</h1>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Full Name'\r\n                                name='fullName'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='About me'\r\n                                name='aboutMe'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='My skills'\r\n                                name='lookingForAJobDescription'\r\n                            />\r\n                            <div>\r\n                                <p></p>\r\n                                <Field\r\n                                    type='checkbox'\r\n                                    name='lookingForAJob'\r\n                                />\r\n                                <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n                            </div>\r\n                            <h3>\r\n                                Contacts\r\n                            </h3>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Github'\r\n                                name='contacts.github'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='vk'\r\n                                name='contacts.vk'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Facebook'\r\n                                name='contacts.facebook'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Instagram'\r\n                                name='contacts.instagram'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Twitter'\r\n                                name='contacts.twitter'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Website'\r\n                                name='contacts.website'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Youtube'\r\n                                name='contacts.youtube'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Main link'\r\n                                name='contacts.mainLink'\r\n                            />\r\n                            <input type='submit' value='save' disabled={formik.isSubmitting}/>\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { updateUserProfileSettings, getUserProfileThunkCreator, removeUserProfileThunkCreator } from '../../redux/profileReducerTypescript'\r\nimport { connect } from \"react-redux\";\r\nimport Settings from './SettingsTS';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { profileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\n\r\ntype propsType = {\r\n    userId: number\r\n    profile: profileType\r\n    getUserProfileThunkCreator: (userId : number) => void\r\n    removeUserProfileThunkCreator: () => void\r\n    updateUserProfileSettings: () => void\r\n}\r\n\r\nclass SettingsContainer extends React.Component<propsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserProfileThunkCreator(this.props.userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        return <>\r\n            {\r\n                !this.props.profile\r\n                    ? null\r\n                    : <Settings\r\n                        sendProfileSettings={this.props.updateUserProfileSettings}\r\n                        profile={this.props.profile}\r\n                    />\r\n            }\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose (\r\n    withRouter, \r\n    connect(mapStateToProps, { \r\n        updateUserProfileSettings, \r\n        getUserProfileThunkCreator, \r\n        removeUserProfileThunkCreator \r\n    }),\r\n    LoggedInRedirect\r\n) \r\n(SettingsContainer) ","import React from 'react'\nimport './App.css'\nimport { Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux'\nimport { initializeApp } from './redux/appReducerTypescript'\nimport { compose } from 'redux';\nimport store from './redux/reduxStoreTS'\nimport Nav from './components/Navbar/NavTS';\nimport Music from './components/Music/Music';\nimport HeaderContainer from './components/Header/HeaderContainerTS';\nimport UsersInnerContainer from './components/Users/UsersInnerContainerTS';\nimport LoginForm from './components/Login/LoginFormTS';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport SettingsContainer from './components/Settings/SettingsContainerTS';\nconst DialogContainerTS = React.lazy(() => import('./components/Dialogs/DialogContainerTS'))\nconst ProfileContainer = React.lazy(() => import('./components/NewProfile/ProfileContainerTS'))\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <>\n        <div className='app-wrapper'>\n          <HeaderContainer />\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Route path='/Dialogs' render={WithSuspense(DialogContainerTS)}/>\n            <Route path='/Profile/:userId?' render={WithSuspense(ProfileContainer)}/>\n            <Route path='/Users/:userId' render={WithSuspense(ProfileContainer)} />\n            <Route exact path='/Users' render={() => <UsersInnerContainer />} />\n            <Route path='/Music' render={() => <Music />} />\n            <Route path='/Settings' render={() => <SettingsContainer />} />\n            <Route path='/Login' render={() => <LoginForm />} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.appReducer.initialized\n})\n\nlet AppWithRouter = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\nlet MainApp = (props) => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppWithRouter />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStoreTS'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n \n\nexport let rerenderEntireTree = () => {\n  ReactDOM.render( <MainApp />,\n    document.getElementById('root')\n  );\n}\nrerenderEntireTree(store)\nwindow.store = store\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Kdvq\",\"logoBlock\":\"User_logoBlock__xhS7H\",\"infoBlock\":\"User_infoBlock__3O4VD\",\"name\":\"User_name__3sCD6\",\"status\":\"User_status__1ssRJ\",\"city\":\"User_city__1xMuO\",\"country\":\"User_country__1_5tH\"};","import { createSelector } from 'reselect'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__eA5PG\",\"login\":\"Header_login__2clXM\",\"userInfo\":\"Header_userInfo__UZJGJ\",\"userLogin\":\"Header_userLogin__1B_UB\",\"userAvatar\":\"Header_userAvatar__8bsmo\",\"profileSettings\":\"Header_profileSettings__3xpjx\"};","export default __webpack_public_path__ + \"static/media/loaderSVG.2997ce57.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/loaderSVG.svg'\r\nimport classes from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.preloaderContainer}>\r\n            <img className={classes.preloader} src={preloader} alt='preloader'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/apiTS'\r\n\r\nimport {\r\n    photosType,\r\n    postsType,\r\n    profileType\r\n} from '../types/types'\r\nimport { AppStateType } from './reduxStoreTS';\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst APDATE_USER_STATUS = 'APDATE_USER_STATUS'\r\nconst ADD_NEW_POST = 'ADD_NEW_POST'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst UPDATE_USER_PHOTO = 'UPDATE_USER_PHOTO'\r\nconst LOADING_NEW_PROFILE_PHOTO = 'LOADING_NEW_PROFILE_PHOTO'\r\n\r\n\r\nlet initialState = {\r\n    posts: [] as Array<postsType>,\r\n    newPostText: '',\r\n    profile: null as profileType | null,\r\n    userStatus: '',\r\n    loadingPhoto: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case APDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            } \r\n        }\r\n        case UPDATE_USER_PHOTO: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as profileType}\r\n        }\r\n        case ADD_NEW_POST: {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost] as Array<postsType>\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case LOADING_NEW_PROFILE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype actionsType = setUserProfileType | updateUserStatusACType | updateUserPhotoACType |\r\nloadingPhotoACType | addNewPostACType | deletePostACType \r\n\r\ntype setUserProfileType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: profileType | null\r\n}\r\nconst setUserProfile = (profile : profileType | null ) : setUserProfileType => ({ type: SET_USER_PROFILE, profile })\r\n\r\ntype updateUserStatusACType = {\r\n    type: typeof APDATE_USER_STATUS\r\n    userStatus: string\r\n}\r\nconst updateUserStatusAC = (userStatus : string) : updateUserStatusACType => ({ type: APDATE_USER_STATUS, userStatus })\r\n\r\ntype updateUserPhotoACType = {\r\n    type: typeof UPDATE_USER_PHOTO\r\n    photos: photosType\r\n}\r\n\r\nconst updateUserPhotoAC = (photos : photosType) : updateUserPhotoACType => ({ type: UPDATE_USER_PHOTO, photos })\r\n\r\ntype loadingPhotoACType = {\r\n    type: typeof  LOADING_NEW_PROFILE_PHOTO\r\n}\r\nconst loadingPhotoAC = () : loadingPhotoACType => ({type: LOADING_NEW_PROFILE_PHOTO})\r\n\r\ntype addNewPostACType = {\r\n    type: typeof ADD_NEW_POST\r\n    postText: string\r\n    login: string\r\n}\r\nexport const addNewPostAC = (postText:string, login:string) : addNewPostACType  => ({ type: ADD_NEW_POST, postText, login })\r\n\r\ntype deletePostACType = {\r\n    type: typeof  DELETE_POST\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId:number) : deletePostACType => ({ type: DELETE_POST, postId })\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const getUserProfileThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () : ThunkAction<void, AppStateType, unknown, actionsType> => {\r\n    return (dispatch) => {\r\n        dispatch(setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status : string) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText : string, login : string) : \r\nThunkAction<void, AppStateType, unknown, actionsType> => \r\n(dispatch) => {\r\n    dispatch(addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () : \r\nThunkAction<void, AppStateType, unknown, actionsType> => (dispatch : any) => {\r\n    dispatch(loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserDataAC = (userId, email, login, isLoggedIn) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\nexport const LoggedInTogglegAC = (isLoggedIn) => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching, confirmation) => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\nexport const captcha = (captchaImg) => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\nexport const getUsers = (pageSize, pageCount) => {\r\n    return instance.get('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\nexport const getUserProfile = (userId) => {\r\n    return instance.get('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId) => {\r\n    return instance.delete('follow/' + userId, {}, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email, password, rememberMe = true, captcha) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","export default __webpack_public_path__ + \"static/media/defaultAvatar.0334f4b4.png\";","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from 'react-redux'\r\nimport { LoggedInTogglegAC, LoggedInFetchingAC, logOut } from '../OldReducers/authReducer'\r\n\r\nexport const LoggedInRedirect = (Component) => {\r\n    class RedirectedComponent extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.props = props\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <>\r\n                 {!this.props.isLoggedIn && this.props.confirmation ? <Redirect to='/Login' /> : <></>}\r\n                 {this.props.isFetching && !this.props.isLoggedIn ? <></> : <Component {...this.props} />}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsLoggedInRedirect = (state) => ({\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        isFetching: state.authReducer.isFetching,\r\n        confirmation: state.authReducer.confirmation,\r\n    })\r\n    let LogInRedirectComponent = connect(mapStateToPropsLoggedInRedirect, {LoggedInTogglegAC, LoggedInFetchingAC, logOut})(RedirectedComponent)\r\n    return LogInRedirectComponent\r\n}\r\n\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n} from '../API/apiTS'\r\nimport { AppStateType } from './reduxStoreTS';\r\n\r\nconst SET_USER_PROFILE_PHOTO : string = 'SET_USER_PROFILE_PHOTO';\r\n\r\nexport type initialStateType = {\r\n    userProfilePhoto: string\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    userProfilePhoto: string,\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    userProfilePhoto: '',\r\n}\r\n\r\nexport const headerReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto : string) : \r\nactionType => ({type: SET_USER_PROFILE_PHOTO, userProfilePhoto})\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionType>\r\n\r\nexport const getUserProfilePhotoThunk = (UserId : number) : thunkType => \r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"PageButton_buttonsContainer__135jv\",\"checkedButton\":\"PageButton_checkedButton__2t6J4\"};"],"sourceRoot":""}