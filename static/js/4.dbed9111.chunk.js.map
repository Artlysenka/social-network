{"version":3,"sources":["components/NewProfile/Posts/PostItem/PostItem.module.css","components/NewProfile/ProfileInfo/ProfileInfo.module.css","components/NewProfile/Posts/PostItem/PostItem.jsx","components/NewProfile/Posts/AddNewPost/AddNewPost.jsx","components/NewProfile/Posts/AddNewPost/AddNewPostContainer.jsx","components/NewProfile/Posts/Posts.jsx","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","components/NewProfile/ProfileInfo/ProfileInfo.jsx","components/NewProfile/Profile.jsx","components/NewProfile/ProfileContainer.jsx"],"names":["module","exports","PostItem","props","className","classes","postsContainer","avatar","src","defaultAvatar","alt","userName","postText","likesCount","AddNewPost","posts","map","post","id","userAva","initialValues","postMessage","onSubmit","values","onSubmitProps","addNewPostThunkCreator","login","resetForm","formik","htmlFor","as","name","value","type","AddNewPostContainer","connect","state","postsSelectors","getPosts","profile","getProfile","newPostText","getNewPostsText","getLogin","addNewPostAC","Posts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","onBlur","upDateStatus","onChange","elem","currentTarget","onClick","loggedInUserId","randomUserId","ProfileInfo","profileInfo","fullName","aboutMe","profileInfoContainer","photos","large","addPhotoButtonContainer","event","target","files","length","upDatePhoto","contacts","href","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","Profile","userId","updatePhoto","ProfileInnerContainer","this","match","params","getUserProfileThunkCreator","getUserStatusThunkCreator","removeUserProfileThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","Preloader","React","Component","compose","withRouter","profileReducer","userStatus","authReducer","LoggedInRedirect"],"mappings":"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","file":"static/js/4.dbed9111.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"PostItem_postsContainer__1Sqqb\",\"avatar\":\"PostItem_avatar__1voR6\",\"userName\":\"PostItem_userName__2bW8A\",\"postText\":\"PostItem_postText__9Pj6u\",\"likesCount\":\"PostItem_likesCount__2Ngx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__-8ARQ\",\"contacts\":\"ProfileInfo_contacts__4AHRP\",\"profileInfo\":\"ProfileInfo_profileInfo__Vr2b1\",\"addPhotoButtonContainer\":\"ProfileInfo_addPhotoButtonContainer__3jXc8\"};","import React from 'react'\r\nimport classes from './PostItem.module.css'\r\nimport defaultAvatar from '../../../../assets/defaultAvatar.png'\r\n\r\nconst PostItem = (props) => {\r\n    return (\r\n        <>\r\n         <div className={classes.postsContainer}>\r\n            <div className={classes.avatar}>\r\n                <img src={defaultAvatar} alt=\"UserAvatar\" />\r\n            </div>\r\n            <div className={classes.userName}>\r\n                {props.userName}\r\n            </div>\r\n            <div className={classes.postText}>\r\n                {props.postText}\r\n            </div>\r\n            <div className={classes.likesCount}>\r\n                <span>Likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nexport default PostItem","import React from 'react'\r\nimport PostItem from '../PostItem/PostItem'\r\nimport { Formik, Form, Field } from 'formik'\r\n\r\nconst AddNewPost = (props) => {\r\n    \r\n    let posts = props.posts.map(post => <PostItem\r\n        id={post.id}\r\n        postText={post.postText}\r\n        userAva={post.userAva}\r\n        userName={post.userName}\r\n        likesCount={post.likesCount}\r\n        key={post.id}\r\n    />)\r\n\r\n    const initialValues = {\r\n        postMessage: ''\r\n    }\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        if (values.postMessage === '') return null\r\n        else {\r\n            props.addNewPostThunkCreator(values.postMessage, props.login)\r\n            onSubmitProps.resetForm()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n                    {\r\n                        formik => {\r\n                            return <Form>\r\n                                <h3>\r\n                                    <label htmlFor=\"postMessage\">Add post</label>\r\n                                </h3>\r\n                                <div></div>\r\n                                <Field as='textarea' name='postMessage' id='postMessage' value={formik.values.postMessage} />\r\n                                <div></div>\r\n                                <button type='submit'>Send</button>\r\n                            </Form>\r\n                        }\r\n                    }\r\n                </Formik>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewPost","import {connect} from 'react-redux'\r\nimport {  addNewPostAC, addNewPostThunkCreator } from '../../../../redux/profileReducer'\r\nimport AddNewPost from './AddNewPost'\r\nimport { postsSelectors } from '../../../../redux/selectors'\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\nposts: postsSelectors.getPosts(state),\r\nprofile: postsSelectors.getProfile(state),\r\nnewPostText: postsSelectors.getNewPostsText(state),\r\nlogin: postsSelectors.getLogin(state),\r\n})\r\n\r\nconst AddNewPostContainer = connect(mapStateToProps, { addNewPostAC, addNewPostThunkCreator })(AddNewPost)\r\nexport default AddNewPostContainer","import React from 'react'\r\nimport AddNewPostContainer from './AddNewPost/AddNewPostContainer'\r\n\r\nconst Posts = (props) => {\r\n    return (\r\n        <AddNewPostContainer posts={props.posts}/>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useEffect, useState } from 'react'\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\ndebugger;\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            setEditMode(true)\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n     \r\n    const deactivateStatusChange = () => {\r\n        setEditMode(false)\r\n        props.upDateStatus(status)\r\n    }\r\n    const onStatusChange = (elem) => {\r\n        setStatus(elem.currentTarget.value)\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onClick={activateStatusChange}><b>Статус: </b> {props.status}</span>\r\n                    <p></p>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateStatusChange}\r\n                        onChange={onStatusChange}\r\n                        type=\"text\"\r\n                        value={status} />\r\n                    <p></p>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  const changeAvartarPhoto = (event) => {\r\n    if (event.target.files.length) {\r\n      props.upDatePhoto(event.target.files[0])\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.profileInfo}>\r\n      <h1>{props.profile.fullName}</h1>\r\n      <div>\r\n        <ProfileStatusWithHooks\r\n          upDateStatus={props.upDateStatus}\r\n          status={props.status}\r\n          randomUserId={props.randomUserId}\r\n          loggedInUserId={props.loggedInUserId}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span><b>Обо мне:</b> {props.profile.aboutMe}</span>\r\n        <p></p>\r\n      </div>\r\n      <div className={classes.profileInfoContainer}>\r\n        <div>\r\n          <img alt='profilePic' src={props.profile.photos.large || defaultAvatar} />\r\n          {props.randomUserId === props.loggedInUserId\r\n            ? <div className={classes.addPhotoButtonContainer}>\r\n              <input type={'file'} onChange={changeAvartarPhoto} />\r\n            </div>\r\n            : null}\r\n        </div>\r\n        <div className={classes.contacts}>\r\n          <ul>\r\n            <b>Контакты:</b>\r\n            <li>facebook: <span><a href='#'>{props.profile.contacts.facebook}</a></span></li>\r\n            <li>website: <span><a href='#'>{props.profile.contacts.website}</a></span></li>\r\n            <li>vk: <span><a href='#'>{props.profile.contacts.vk}</a></span></li>\r\n            <li>twitter: <span><a href='#'>{props.profile.contacts.twitter}</a></span></li>\r\n            <li>instagram: <span><a href='#'>{props.profile.contacts.instagram}</a></span></li>\r\n            <li>youtube: <span><a href='#'>{props.profile.contacts.youtube}</a></span></li>\r\n            <li>github : <span><a href='#'>{props.profile.contacts.github}</a></span></li>\r\n            <li>mainilnk: <span><a href='#'>{props.profile.contacts.mainLink}</a></span></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <b>Ищу работу:</b> {props.profile.lookingForAJob == true ? <span>Да</span> : <span>Нет</span>}\r\n          </li>\r\n          <li>\r\n            <b>Какую работу ищу:</b> <span>{props.profile.lookingForAJobDescription}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo ","import React from 'react';\r\nimport Posts from './Posts/Posts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n            randomUserId={props.profile.userId}\r\n            loggedInUserId={props.userId}\r\n            status={props.status} \r\n            profile={props.profile}\r\n            upDateStatus={props.upDateStatus}\r\n            upDatePhoto={props.updatePhoto}\r\n            />\r\n            {props.userId === props.profile.userId ?  <Posts posts={props.posts}/> : null}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    removeUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    updateUserStatusThunkCreator,\r\n    uploadUserProfilePhotoThunkCreator\r\n} from \"../../redux/profileReducer\";\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileInnerContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n    }\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <Profile\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                posts={this.props.posts}\r\n                upDateStatus={this.props.updateUserStatusThunkCreator}\r\n                userId={this.props.userId}\r\n                updatePhoto={this.props.uploadUserProfilePhotoThunkCreator}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profileReducer.profile,\r\n    posts: state.profileReducer.posts,\r\n    status: state.profileReducer.userStatus,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        removeUserProfileThunkCreator,\r\n        getUserStatusThunkCreator,\r\n        updateUserStatusThunkCreator,\r\n        uploadUserProfilePhotoThunkCreator\r\n    }),\r\n    LoggedInRedirect,\r\n)(ProfileInnerContainer)"],"sourceRoot":""}