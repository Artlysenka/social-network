{"version":3,"sources":["API/api.js","components/Common/Preloader/Preloader.module.css","OldReducers/headerRecuder.js","components/Music/Music.module.css","components/Users/Users.module.css","components/Login/LoginForm.module.css","OldReducers/authReducer.js","components/Navbar/Nav.module.css","components/Common/FormControls/Login.module.css","reportWebVitals.js","redux/profileReducerTypescript.ts","redux/dialogsReducerTypescript.ts","OldReducers/friendsReducer.js","redux/usersReducerTypescript.ts","redux/authReducerTypescript.ts","redux/appReducerTypescript.ts","redux/myFirstTypescriptReducer.tsx","redux/reduxStoreTS.ts","OldReducers/appReducer.js","OldReducers/reduxStore.js","components/Navbar/Nav.jsx","components/Music/Music.jsx","components/Header/HeaderTS.tsx","components/Header/HeaderContainerTS.tsx","components/Users/Paginator/PageButtonTS.tsx","components/Users/Paginator/PaginatorTS.tsx","components/Users/User/UserTS.tsx","components/Users/UsersTS.tsx","components/Users/UsersInnerContainerTS.tsx","components/Common/FormControls/TextError.jsx","components/Common/FormControls/FormikCheckbox.jsx","components/Common/FormControls/FormikDatePicker.jsx","components/Common/FormControls/FormikInput.jsx","components/Common/FormControls/FormikRadioButtons.jsx","components/Common/FormControls/FormikSelect.jsx","components/Common/FormControls/FormikTextArea.jsx","components/Common/FormControls/FormikControl.jsx","components/Login/LoginForm.jsx","hoc/WithSuspense.js","components/Settings/Settings.jsx","components/Settings/SettingsContainer.jsx","App.js","index.js","components/Users/User/User.module.css","OldReducers/selectors.js","components/Header/Header.module.css","assets/loaderSVG.svg","components/Common/Preloader/Preloader.jsx","assets/defaultAvatar.png","hoc/LoggedInRedirect.js","OldReducers/profileReducer.js","components/Users/Paginator/PageButton.module.css"],"names":["instance","axios","create","withCredentials","baseURL","headers","getUsers","pageSize","pageCount","get","then","res","data","getUserProfile","userId","sendUserStatus","status","put","getUserStatus","sendUserPhoto","file","formData","FormData","append","sendUserProfileSettings","settings","a","console","log","follow","post","unFollow","delete","logInProfile","loginMe","email","password","rememberMe","captcha","logOutMe","getCaptcha","module","exports","SET_USER_PROFILE_PHOTO","getUserProfilePhotoThunk","UserId","dispatch","userProfilePhoto","photos","small","type","SET_USER_DATA","LOGGED_IN_TOGGLE","LOGGED_IN_FETCHING","CAPTCHA","setUserDataAC","login","isLoggedIn","LoggedInTogglegAC","LoggedInFetchingAC","isFetching","confirmation","logInUserThunkCreator","resultCode","id","getCaptchaThunk","logOut","captchaImg","url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SET_USER_PROFILE","APDATE_USER_STATUS","ADD_NEW_POST","UPDATE_POST_TEXT","DELETE_POST","UPDATE_USER_PHOTO","LOADING_NEW_PROFILE_PHOTO","initialState","posts","newPostText","profile","userStatus","loadingPhoto","profileReducer","state","action","postText","newPost","userAva","userName","likesCount","filter","postId","POST_NEW_TEXT","dialogsData","messagesData","dialogsReducer","newDialog","name","newPostItem","message","friends","friendsReducer","stateCopy","FOLLOW","UNFOLLOW","SET_USERS","PAGE_SIZE","TOGGLE_PRELOADER","TOGGLE_FOLLOWING_PROGRESS","PAGE_COUNT","TOTAL_COUNT","users","totalCount","followingProgress","usersReducer","map","user","followed","followAC","unfollowAC","setUsersAC","pageCountAC","toggleFollowingProgressAC","authReducer","INITIALIZED_SUCCSESS","initialized","appReducer","headerReducer","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Nav","props","className","classes","nav","item","to","activeClassName","active","Music","contentColor","Header","userSettings","document","getElementById","hideUserSettingsContainer","style","display","header","onMouseOver","onMouseOut","userInfo","userLogin","userAvatar","src","defaultAvatar","alt","profileSettings","onClick","HeaderContainer","this","React","Component","withRouter","connect","PageButton","cn","checkedButton","button","removeUsers","Paginator","useState","initialPage","setInitialPage","numberOfShowedButtons","decrementNumber","setDecrementNumber","incrementNumber","numberOfPageButtons","Math","ceil","buttons","buttonsInitializeArray","i","push","createButtonsArray","PageButtonTS","buttonsContainer","User","photo","unFollowThunkCreator","followThunkCreator","slicedStatus","length","slice","logoBlock","disabled","some","infoBlock","country","city","UsersTS","PaginatorTS","UsersInnerContainer","getUsersThunkCreator","removeUsersThunkCreator","Preloader","getUsersSuper","usersSelectors","getPageSize","getPageCount","getTotalCount","getIsFetching","getFollowingProgrress","pageSizeAC","items","LoggedInRedirect","TextError","error","children","FormikCheckbox","options","label","rest","field","option","Fragment","htmlFor","value","key","checked","component","FormikDatePicker","formControl","form","setFieldValue","selected","onChange","val","Input","autocomplete","FormikInput","touchedEmail","touchedPassword","alert","FormikRadioButtons","FormikSelect","as","FormikTextArea","FormikControl","control","validationSchema","Yup","required","initialValues","onSubmit","values","formik","touched","isValid","WithSuspense","Suspense","fallback","Settings","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","shape","sendProfileSettings","validateOnChange","isSubmitting","SettingsContainer","getUserProfileThunkCreator","removeUserProfileThunkCreator","updateUserProfileSettings","AddDialogContainer","lazy","ProfileContainer","App","initializeApp","path","render","exact","AppWithRouter","logInUserPromise","Promise","all","MainApp","basename","process","rerenderEntireTree","ReactDOM","getAllUsers","getAllUsersSelector","createSelector","postsSelectors","getPosts","getProfile","getNewPostsText","getLogin","preloaderContainer","preloader","RedirectedComponent","setUserProfile","updateUserStatusAC","addNewPostAC","getUserStatusThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","addNewPostThunkCreator","loadingPhotoThunk"],"mappings":"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","file":"static/js/main.d0757f9c.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\nexport const getUsers = (pageSize, pageCount) => {\r\n    return instance.get('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\nexport const getUserProfile = (userId) => {\r\n    return instance.get('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId) => {\r\n    return instance.delete('follow/' + userId, {}, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email, password, rememberMe = true, captcha) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__2qmHb\",\"preloader\":\"Preloader_preloader__3nzjs\"};","import {\r\n    getUserProfile,\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE_PHOTO = 'SET_USER_PROFILE_PHOTO';\r\n\r\nlet initialState = {\r\n    userProfilePhoto: ''\r\n};\r\n\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto) => ({ type: SET_USER_PROFILE_PHOTO, userProfilePhoto })\r\n\r\n\r\nexport const getUserProfilePhotoThunk = (UserId) => \r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n\r\n    \r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Music_contentColor__3tC_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Users_contentColor__2Kips\",\"addUsersButtonContainer\":\"Users_addUsersButtonContainer__3tC_O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaImg\":\"LoginForm_captchaImg__1M2-6\"};","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserDataAC = (userId, email, login, isLoggedIn) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\nexport const LoggedInTogglegAC = (isLoggedIn) => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching, confirmation) => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\nexport const captcha = (captchaImg) => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3jRL3\",\"item\":\"Nav_item__3Mn2D\",\"active\":\"Nav_active__10tEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__3P2GR\",\"formControl\":\"Login_formControl__2h8Kz\",\"alert\":\"Login_alert__3TE9q\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/api'\r\n\r\nimport {\r\n    postsType,\r\n    contactsType,\r\n    photosType,\r\n    profileType\r\n} from '../types/types'\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst APDATE_USER_STATUS = 'APDATE_USER_STATUS'\r\nconst ADD_NEW_POST = 'ADD_NEW_POST'\r\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst UPDATE_USER_PHOTO = 'UPDATE_USER_PHOTO'\r\nconst LOADING_NEW_PROFILE_PHOTO = 'LOADING_NEW_PROFILE_PHOTO'\r\n\r\n\r\nlet initialState = {\r\n    posts: [] as Array<postsType>,\r\n    newPostText: '',\r\n    profile: null as profileType | null,\r\n    userStatus: '',\r\n    loadingPhoto: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state = initialState, action : any) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case APDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            } \r\n        }\r\n        case UPDATE_USER_PHOTO: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as profileType }\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.postText\r\n            }\r\n        }\r\n        case ADD_NEW_POST: {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost] as Array<postsType>\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case LOADING_NEW_PROFILE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype setUserProfileType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: profileType | null\r\n}\r\nconst setUserProfile = (profile : profileType | null ) : setUserProfileType => ({ type: SET_USER_PROFILE, profile })\r\n\r\ntype updateUserStatusACType = {\r\n    type: typeof APDATE_USER_STATUS\r\n    userStatus: string\r\n}\r\nconst updateUserStatusAC = (userStatus : string) : updateUserStatusACType => ({ type: APDATE_USER_STATUS, userStatus })\r\n\r\ntype updateUserPhotoACType = {\r\n    type: typeof UPDATE_USER_PHOTO\r\n    photos: string\r\n}\r\n\r\nconst updateUserPhotoAC = (photos : string) => ({ type: UPDATE_USER_PHOTO, photos })\r\n\r\ntype loadingPhotoACType = {\r\n    type: typeof  LOADING_NEW_PROFILE_PHOTO\r\n}\r\nconst loadingPhotoAC = () : loadingPhotoACType => ({type: LOADING_NEW_PROFILE_PHOTO})\r\n\r\ntype addNewPostACType = {\r\n    type: typeof ADD_NEW_POST\r\n    postText: string\r\n    login: string\r\n}\r\nexport const addNewPostAC = (postText:string, login:string) : addNewPostACType  => ({ type: ADD_NEW_POST, postText, login })\r\n\r\ntype deletePostACType = {\r\n    type: typeof  DELETE_POST\r\n    postId: number\r\n}\r\nexport const deletePostAC = (postId:number) : deletePostACType => ({ type: DELETE_POST, postId })\r\n\r\nexport const getUserProfileThunkCreator = (UserId : number) =>\r\n    async (dispatch : any) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () => {\r\n    return (dispatch : any) => {\r\n        dispatch(setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId : number) =>\r\n    async (dispatch : any) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status : string) =>\r\n    async (dispatch : any) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings : any) =>\r\n    async (dispatch : any) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file : any) =>\r\n    async (dispatch : any) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText : string, login : string) => (dispatch : any) => {\r\n    dispatch(addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () => (dispatch : any) => {\r\n    dispatch(loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","const POST_NEW_TEXT = 'POST_NEW_TEXT'\r\n\r\ntype newDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype newPostItemType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype initialStateType = {\r\n    dialogsData: Array<newDialogType>\r\n    messagesData: Array<newPostItemType>\r\n}\r\n\r\ntype actionType = {\r\n    type : typeof POST_NEW_TEXT\r\n    postText: string\r\n}\r\n\r\nlet initialState : initialStateType  = {\r\n    dialogsData: [],\r\n    messagesData: [],\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action : actionType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POST_NEW_TEXT:\r\n            let newDialog : newDialogType = {\r\n                id: 4,\r\n                name: 'Tema'\r\n            }\r\n            let newPostItem : newPostItemType = {\r\n                id: 4,\r\n                message: action.postText\r\n            }\r\n            return {\r\n                ...state,\r\n                dialogsData: [...state.dialogsData, newDialog],\r\n                messagesData: [...state.messagesData, newPostItem],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const postNewTextActionCreator = (postText : string) => {\r\n    return {\r\n        type: POST_NEW_TEXT,\r\n        postText: postText\r\n    }\r\n}\r\n","let initialState = {\r\n    friends: [\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    return stateCopy\r\n}\r\nexport default friendsReducer","import { userType } from './../types/types';\r\nimport { follow, unFollow, getUsers } from '../API/api'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst PAGE_SIZE = 'PAGE_SIZE'\r\nconst TOGGLE_PRELOADER = 'TOGGLE_PRELOADER'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\nconst PAGE_COUNT = 'PAGE_COUNT'\r\nconst TOTAL_COUNT = 'TOTAL_COUNT'\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 100,\r\n    pageCount: 1,\r\n    totalCount: 0,\r\n    isFetching: false,\r\n    followingProgress: [] as Array<number>,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const usersReducer = (state : initialStateType = initialState, action : any) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case PAGE_SIZE:\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case PAGE_COUNT:\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        case TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_PRELOADER:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype followACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followAC = (userId : number) : followACType => ({ type: FOLLOW, userId })\r\n\r\ntype unfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowAC = (userId : number) : unfollowACType => ({ type: UNFOLLOW, userId })\r\n\r\ntype setUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<userType>\r\n}\r\nexport const setUsersAC = (users : Array<userType>) : setUsersACType => ({ type: SET_USERS, users })\r\n\r\ntype pageSizeACType = {\r\n    type: typeof PAGE_SIZE\r\n    pageSize: number\r\n}\r\nexport const pageSizeAC = (pageSize : number) : pageSizeACType => ({ type: PAGE_SIZE, pageSize })\r\n\r\ntype pageCountACType = {\r\n    type: typeof PAGE_COUNT\r\n    pageCount: number\r\n}\r\nexport const pageCountAC = (pageCount: number) : pageCountACType => ({ type: PAGE_COUNT, pageCount })\r\n\r\ntype totalCountARType = {\r\n    type: typeof TOTAL_COUNT\r\n    totalCount: number\r\n}\r\nexport const totalCountAR = (totalCount : number) : totalCountARType => ({ type: TOTAL_COUNT, totalCount })\r\n\r\ntype togglePreloaderACType = {\r\n    type: typeof TOGGLE_PRELOADER\r\n    isFetching: boolean\r\n}\r\nexport const togglePreloaderAC = (isFetching : boolean) : togglePreloaderACType => ({ type: TOGGLE_PRELOADER, isFetching })\r\n\r\ntype toggleFollowingProgressACType = {\r\n    type: typeof TOGGLE_FOLLOWING_PROGRESS\r\n    followingProgress: boolean\r\n    userId: number\r\n}\r\nexport const toggleFollowingProgressAC = (followingProgress : boolean, userId: number) : toggleFollowingProgressACType => \r\n({ type: TOGGLE_FOLLOWING_PROGRESS, followingProgress, userId })\r\n\r\nexport const getUsersThunkCreator = (pageSize: number, pageCount : number) =>\r\n    async (dispatch : any) => {\r\n        dispatch(pageCountAC(pageCount))\r\n        const res = await getUsers(pageSize, pageCount)\r\n        dispatch(setUsersAC(res.items))\r\n        dispatch(totalCountAR(res.totalCount))\r\n    }\r\n\r\n\r\nexport const removeUsersThunkCreator = () => {\r\n    return (dispatch : any) => {\r\n        dispatch(setUsersAC([]))\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId : number) =>\r\n\r\n    async (dispatch : any) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(followAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\nexport const unFollowThunkCreator = (userId : number) =>\r\n    async (dispatch : any) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await unFollow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(unfollowAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\ntype initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoggedIn: boolean\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n    captchaImg: string\r\n}\r\n\r\n\r\nlet initialState : initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action : any) : initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype setUserDataACDataType = {\r\n    userId: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isLoggedIn: null | boolean\r\n}\r\ntype setUserDataACType = {\r\n    type : typeof SET_USER_DATA\r\n    data : setUserDataACDataType\r\n}\r\n\r\nexport const setUserDataAC = \r\n(userId : number | null, email : string | null, login : string | null, isLoggedIn : boolean) \r\n: setUserDataACType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\n\r\ntype LoggedInTogglegACType = {\r\n    type : typeof LOGGED_IN_TOGGLE\r\n    isLoggedIn : boolean\r\n}\r\nexport const LoggedInTogglegAC = (isLoggedIn : boolean) : LoggedInTogglegACType => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\ntype LoggedInFetchingACType = {\r\n    type : typeof LOGGED_IN_FETCHING\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching : boolean, confirmation : boolean) : LoggedInFetchingACType => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\ntype captchaType = {\r\n    type: typeof CAPTCHA\r\n    captchaImg: string\r\n}\r\nexport const captcha = (captchaImg : string) : captchaType => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch : any) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email : string, password : string, rememberMe : boolean, captcha : any) =>\r\n    async (dispatch : any) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch : any) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch : any) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import { logInUserThunkCreator } from \"../OldReducers/authReducer\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\n\r\ntype initialStateType = {\r\n    initialized : boolean\r\n}\r\n\r\ntype actionType = {\r\n    type: typeof INITIALIZED_SUCCSESS\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () : actionType => ({ type: INITIALIZED_SUCCSESS })\r\n\r\nexport const initializeApp = () => (dispatch : Function) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import {\r\n    getUserProfile,\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE_PHOTO : string = 'SET_USER_PROFILE_PHOTO';\r\n\r\nexport type initialStateType = {\r\n    userProfilePhoto: string\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    userProfilePhoto: string,\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    userProfilePhoto: '',\r\n}\r\n\r\nexport const headerReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto : string) : actionType => ({type: SET_USER_PROFILE_PHOTO, userProfilePhoto})\r\n\r\nexport const getUserProfilePhotoThunk = (UserId : string) => \r\n    async (dispatch : any) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\r\nimport { profileReducer } from './profileReducerTypescript'\r\nimport { dialogsReducer } from './dialogsReducerTypescript'\r\nimport { friendsReducer } from '../OldReducers/friendsReducer'\r\nimport { usersReducer } from './usersReducerTypescript'\r\nimport { authReducer } from './authReducerTypescript'\r\nimport { appReducer } from './appReducerTypescript'\r\nimport { headerReducer } from './myFirstTypescriptReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import { logInUserThunkCreator } from \"./authReducer\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () => ({ type: INITIALIZED_SUCCSESS })\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\r\nimport { profileReducer } from '../redux/profileReducerTypescript'\r\nimport { dialogsReducer } from '../redux/dialogsReducerTypescript'\r\nimport { friendsReducer } from './friendsReducer'\r\nimport { usersReducer } from '../redux/usersReducerTypescript'\r\nimport { authReducer } from '../redux/authReducerTypescript'\r\nimport { appReducer } from '../redux/appReducerTypescript'\r\nimport { headerReducer } from '../redux/myFirstTypescriptReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport classes from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\n\r\nconst Nav = function (props) {\r\n  return (\r\n    \r\n    <div className={classes.nav}>\r\n      \r\n      <nav >\r\n        <div className={classes.item}>\r\n          <NavLink to='/Profile/' activeClassName={classes.active}>My Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Users' activeClassName={classes.active}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n        \r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Nav ","import React from 'react'\r\nimport classes from './Music.module.css'\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={classes.contentColor}>\r\n            <h1>\r\n                Music\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport defaultAvatar from '../../assets/defaultAvatar.png'\r\nimport { headerPropsType } from '../../types/types'\r\n\r\n\r\n\r\nconst Header: React.FC<headerPropsType> = (props) => {\r\n\r\n    console.log(typeof props.userId)\r\n    const logout = () => {\r\n        props.logOut()\r\n    }\r\n\r\n    let userSettings = document.getElementById('profileSettings')\r\n\r\n    const showUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'block';\r\n    }\r\n    const hideUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isLoggedIn ?\r\n                    <div\r\n                        onMouseOver={showUserSettingsContainer}\r\n                        onMouseOut={hideUserSettingsContainer}>\r\n\r\n                        <div\r\n                            className={classes.userInfo}>\r\n                            <div className={classes.userLogin}>\r\n                                <div><span>{props.login}</span></div>\r\n                            </div>\r\n                            <NavLink to='/Profile'>\r\n                                <div className={classes.userAvatar}>\r\n                                    <img src={props.userProfilePhoto || defaultAvatar} alt=\"User avatar\" />\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div id='profileSettings' className={classes.profileSettings}>\r\n                            <div>\r\n                                <button onClick={logout}>Log out</button>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/Settings'>\r\n                                    <button onClick={hideUserSettingsContainer} >\r\n                                        Profile settings\r\n                                </button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : <NavLink to='/Login'> <button>Login</button></NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './HeaderTS'\r\nimport { logOut } from '../../OldReducers/authReducer'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport { getUserProfilePhotoThunk } from '../../OldReducers/headerRecuder';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { headerPropsType } from '../../types/types';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component<headerPropsType> {\r\n\r\n    componentDidMount() { \r\n        this.props.getUserProfilePhotoThunk(this.props.userId)\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state : AppStateType) => ({\r\n    isLoggedIn: state.authReducer.isLoggedIn,\r\n    login: state.authReducer.login,\r\n    isFetching: state.authReducer.isFetching,\r\n    userId: state.authReducer.userId,\r\n    userProfilePhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, { logOut, getUserProfilePhotoThunk })\r\n)(HeaderContainer) ","import React from 'react'\r\nimport classes from './PageButton.module.css'\r\nimport { propsType } from './PaginatorTS'\r\nimport cn from 'classnames'\r\n\r\ninterface PageButtonProps extends propsType {\r\n    button: number\r\n}\r\n\r\nconst PageButton = (props: PageButtonProps) => {\r\n\r\n    const switchPage = () => {\r\n        props.removeUsers()\r\n        props.getUsers(props.pageSize, props.button)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button\r\n                    key={props.button}\r\n                    className={cn({\r\n                        [classes.checkedButton] : props.button === props.pageCount\r\n                    })}\r\n                    onClick={switchPage}>\r\n                    {props.button}\r\n                </button>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PageButton","import React, { useState } from 'react'\r\nimport PageButtonTS from './PageButtonTS'\r\nimport classes from './PageButton.module.css'\r\n\r\nexport type propsType = {\r\n    pageSize: number\r\n    totalCount: number\r\n    pageCount: number\r\n    getUsers: (\r\n        pageSize: number,\r\n        button: number\r\n    ) => any\r\n    removeUsers: () => any\r\n}\r\n\r\nconst Paginator : React.FC<propsType> = (props) => {\r\n\r\n    const buttonsPortion : number = 5\r\n    let touchedDecrementButton : boolean = false\r\n    const [initialPage, setInitialPage] = useState(props.pageCount)\r\n    const [numberOfShowedButtons] = useState(7)\r\n    const [decrementNumber, setDecrementNumber] = useState(buttonsPortion)\r\n    const [incrementNumber, setIncrementNumber] = useState(buttonsPortion)\r\n    const numberOfPageButtons = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n\r\n    const incrementInitialPage = () => {\r\n        setInitialPage(initialPage + incrementNumber)\r\n    }\r\n\r\n    const decrementInitialPage = () => {\r\n        setInitialPage(initialPage - decrementNumber)\r\n        touchedDecrementButton = true\r\n        if (touchedDecrementButton && decrementNumber !== buttonsPortion) setDecrementNumber(buttonsPortion)\r\n\r\n    }\r\n\r\n    const createButtonsArray = () : Array<number> => {\r\n        let buttonsInitializeArray : Array<number> = []\r\n        for (let i = initialPage; i < numberOfPageButtons + 1; i++) {\r\n            buttonsInitializeArray.push(i)\r\n        }\r\n\r\n        if (initialPage === 1) {\r\n            return buttonsInitializeArray\r\n        }\r\n        else if (initialPage - decrementNumber < 0) {\r\n            setDecrementNumber((decrementNumber - 1) + (initialPage - decrementNumber))\r\n        }\r\n\r\n        return buttonsInitializeArray\r\n    }\r\n\r\n    let buttons = createButtonsArray().map(function (button) {\r\n        if (button > initialPage + numberOfShowedButtons - 1) {\r\n            return\r\n        }\r\n        return <PageButtonTS\r\n            button={button}\r\n            pageSize={props.pageSize}\r\n            getUsers={props.getUsers}\r\n            pageCount={props.pageCount}\r\n            totalCount={props.totalCount}\r\n            removeUsers={props.removeUsers}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={classes.buttonsContainer}>\r\n            {initialPage === 1\r\n                ? null\r\n                : <div>\r\n                    <button onClick={decrementInitialPage}>назад</button>\r\n                </div>}\r\n            {buttons}\r\n            {numberOfPageButtons - incrementNumber <= initialPage\r\n                ? null\r\n                : <div>\r\n                    <button onClick={incrementInitialPage}>Вперед</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from 'react'\r\nimport classes from './User.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype userType = {\r\n    key: number\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photo: string | null\r\n    followed: boolean\r\n    followingProgress: Array<number>\r\n    followThunkCreator: (id: number) => void\r\n    unFollowThunkCreator: (id: number) => void\r\n}\r\n\r\nconst User = (props : userType) => {\r\n\r\n    let {\r\n        id,\r\n        photo,\r\n        followed,\r\n        followingProgress,\r\n        unFollowThunkCreator,\r\n        followThunkCreator,\r\n        name,\r\n        status\r\n    } = props\r\n\r\n    let slicedStatus = null\r\n\r\n    if (status && status.length > 50) {\r\n        slicedStatus = status.slice(1,50) + '...'\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.logoBlock}>\r\n                <div>\r\n                    <NavLink to={'/Users/' + id} >\r\n                        <img src={photo == null ? defaultAvatar : photo} alt=\"UserPhoto\" />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            unFollowThunkCreator(id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            followThunkCreator(id)\r\n                        }}>Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div className={classes.infoBlock}>\r\n                <div className={classes.name}>{name}</div>\r\n                <div className={classes.status}>{slicedStatus || status}</div>\r\n                <div className={classes.country}>Belarus<i>(hardcode)</i>,</div>\r\n                <div className={classes.city}>Bralaw<i>(hardcode)</i></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from 'react'\r\nimport PaginatorTS from './Paginator/PaginatorTS'\r\nimport User from './User/UserTS'\r\nimport classes from './Users.module.css'\r\nimport { usersPropsType } from '../../types/types'\r\n\r\n\r\nconst UsersTS : React.FC<usersPropsType> = (props) => {\r\n    let users = props.users.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        name={user.name}\r\n        status={user.status}\r\n        photo={user.photos.small}\r\n        followed={user.followed}\r\n        followingProgress={props.followingProgress}\r\n        followThunkCreator={props.followThunkCreator}\r\n        unFollowThunkCreator={props.unFollowThunkCreator}\r\n    />)\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n            <div>\r\n                {users}\r\n            </div>\r\n            <PaginatorTS\r\n                pageSize={props.pageSize}\r\n                totalCount={props.totalCount}\r\n                getUsers={props.getUsers}\r\n                pageCount={props.pageCount}\r\n                removeUsers={props.removeUsers}\r\n                />\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersTS","import React from 'react'\r\nimport UsersTS from './UsersTS';\r\nimport { usersPropsType } from '../../types/types'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    pageSizeAC,\r\n    getUsersThunkCreator,\r\n    followThunkCreator,\r\n    unFollowThunkCreator,\r\n    removeUsersThunkCreator,\r\n    pageCountAC\r\n\r\n} from '../../redux/usersReducerTypescript'\r\nimport { compose } from 'redux';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect'\r\nimport {\r\n    getUsersSuper,\r\n    usersSelectors\r\n} from '../../OldReducers/selectors'\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\ninterface PropsType extends usersPropsType {\r\n    getUsersThunkCreator: (pageSize: number, pageCount: number) => void\r\n    removeUsersThunkCreator: () => void\r\n}\r\n\r\nclass UsersInnerContainer extends React.Component<PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.pageSize, this.props.pageCount)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUsersThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.users.length) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <>\r\n                <UsersTS\r\n                    users={this.props.users}\r\n                    pageSize={this.props.pageSize}\r\n                    totalCount={this.props.totalCount}\r\n                    followingProgress={this.props.followingProgress}\r\n                    followThunkCreator={this.props.followThunkCreator}\r\n                    unFollowThunkCreator={this.props.unFollowThunkCreator}\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                    pageCount={this.props.pageCount}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: usersSelectors.getPageSize(state),\r\n        pageCount: usersSelectors.getPageCount(state),\r\n        totalCount: usersSelectors.getTotalCount(state),\r\n        isFetching: usersSelectors.getIsFetching(state),\r\n        followingProgress: usersSelectors.getFollowingProgrress(state),\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        pageSizeAC,\r\n        getUsersThunkCreator,\r\n        removeUsersThunkCreator,\r\n        followThunkCreator,\r\n        unFollowThunkCreator,\r\n        pageCountAC,\r\n    }),\r\n    LoggedInRedirect\r\n)(UsersInnerContainer)","import React from 'react' \r\nimport classes from './Login.module.css'\r\n\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div className={classes.error}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError","import React from 'react' \r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikCheckbox = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <div>\r\n                                    <label htmlFor={option.value}>{option.key}</label>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value.length === 2} />\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikCheckbox","import React from 'react'\r\nimport DateView from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikDatePicker = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field }) => {\r\n                        const { setFieldValue } = form\r\n                        const { value } = field\r\n                        return <DateView\r\n                            id={name}\r\n                            {...field}\r\n                            {...rest}\r\n                            selected={value}\r\n                            onChange={val => setFieldValue(name, val)} />\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikDatePicker","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Input = (props) => {\r\n    return <div className={classes.formControl}>\r\n        <label htmlFor={props.name}>{props.label}</label>\r\n        <div>\r\n            <Field\r\n                className={props.className}\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                autocomplete={props.autocomplete} />\r\n            <ErrorMessage name={props.name} component={TextError} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst FormikInput = (props) => {\r\n    const {\r\n        label,\r\n        name,\r\n        email,\r\n        password,\r\n        touchedEmail,\r\n        touchedPassword,\r\n        type\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Input className={cn({\r\n                [classes.alert]: touchedEmail && !email || touchedPassword && !password\r\n            })}\r\n                name={name}\r\n                label={label}\r\n                type={type} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikInput","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikRadioButtons = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <label htmlFor={name}>{label}</label>\r\n            <div></div>\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        console.log('field',field)\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value === option.value} />\r\n                                        <label htmlFor={option.value}>{option.key}</label>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikRadioButtons","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikSelect = (props) => {\r\n    const { label, name, options, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='select' id={name} name={name} {...rest}>\r\n                {\r\n                    options.map(option => {\r\n                        return <option key={option.value} value={option.value}>\r\n                            {option.key}\r\n                        </option>\r\n                    })\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikSelect","import React from 'react' \r\nimport { Field, ErrorMessage} from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikTextArea = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='textarea' id={name} name={name} {...rest}/>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikTextArea","import React from 'react'\r\nimport FormikCheckbox from './FormikCheckbox'\r\nimport FormikDatePicker from './FormikDatePicker'\r\nimport FormikInput from './FormikInput'\r\nimport FormikRadioButtons from './FormikRadioButtons'\r\nimport FormikSelect from './FormikSelect'\r\nimport FormikTextArea from './FormikTextArea'\r\n\r\nconst FormikControl = (props) => {\r\n    const { control, ...rest } = props\r\n    switch (control) {\r\n        case 'input': return <FormikInput {...rest} />\r\n        case 'textarea': return <FormikTextArea {...rest} />\r\n        case 'select': return <FormikSelect {...rest} />\r\n        case 'radio': return <FormikRadioButtons {...rest} />\r\n        case 'checkbox': return <FormikCheckbox {...rest} /> \r\n        case 'date': return <FormikDatePicker {...rest} />\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport default FormikControl","import React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { login } from '../../OldReducers/authReducer'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './LoginForm.module.css'\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const { login, isLoggedIn, captchaImg } = props\r\n\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email format').required('Enter email'),\r\n        password: Yup.string().required('Enter password'),\r\n    })\r\n\r\n    const onSubmit = values => {\r\n        login(values.email, values.password, values.rememberMe, values.captcha)\r\n    }\r\n\r\n    if (isLoggedIn) { return <Redirect to={'/Profile'} /> } // Проверяем, если мы залогинены, то редиректим на профиль\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <h1>Login</h1>\r\n                        <FormikControl\r\n                            email={formik.values.email}\r\n                            touchedEmail={formik.touched.email}\r\n                            control='input'\r\n                            type='email'\r\n                            label='Email'\r\n                            name='email' />\r\n                        <FormikControl\r\n                            password={formik.values.password}\r\n                            touchedPassword={formik.touched.password}\r\n                            control='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            name='password'\r\n                        />\r\n                        <p></p>\r\n                        <input type='submit' disabled={!formik.isValid} value={'Login'} />\r\n                        {!captchaImg ?\r\n                            null\r\n                            : <div className={classes.captchaImg}>\r\n                                <p></p>\r\n                                <img src={captchaImg} alt=\"captcha\" />\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    label='Enter your captcha'\r\n                                    name='captcha'\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </Form>\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\nexport let mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        captchaImg: state.authReducer.captchaImg\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm)","import React from 'react'\r\nimport Preloader from '../components/Common/Preloader/Preloader'\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props}/>\r\n        </React.Suspense> \r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst Settings = (props) => {\r\n    \r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profile\r\n    const { facebook, github, instagram, mainLink, twitter, vk, website, youtube } = props.profile.contacts\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        contacts: Yup.object().shape({\r\n            github: Yup.string().url('Invalid URL!'),\r\n            vk: Yup.string().url('Invalid URL!'),\r\n            facebook: Yup.string().url('Invalid URL!'),\r\n            instagram: Yup.string().url('Invalid URL!'),\r\n            twitter: Yup.string().url('Invalid URL!'),\r\n            website: Yup.string().url('Invalid URL!'),\r\n            youtube: Yup.string().url('Invalid URL!'),\r\n            mainLink: Yup.string().url('Invalid URL!')\r\n        })\r\n    })\r\n\r\n    const initialValues = {\r\n        fullName: fullName,\r\n        aboutMe: aboutMe,\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n    }\r\n\r\n    const onSubmit = (values) => {\r\n        console.log('Submitting')\r\n        async function sendProfileSettings() {\r\n            await props.sendProfileSettings(values)\r\n        }\r\n        return sendProfileSettings()\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n                validateOnChange={false}\r\n                >\r\n                {\r\n                    formik => {\r\n                        \r\n                        return <Form>\r\n                            <h1>Profile settings</h1>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Full Name'\r\n                                name='fullName'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='About me'\r\n                                name='aboutMe'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='My skills'\r\n                                name='lookingForAJobDescription'\r\n                            />\r\n                            <div>\r\n                                <p></p>\r\n                                <Field\r\n                                    type='checkbox'\r\n                                    name='lookingForAJob'\r\n                                />\r\n                                <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n                            </div>\r\n                            <h3>\r\n                                Contacts\r\n                            </h3>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Github'\r\n                                name='contacts.github'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='vk'\r\n                                name='contacts.vk'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Facebook'\r\n                                name='contacts.facebook'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Instagram'\r\n                                name='contacts.instagram'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Twitter'\r\n                                name='contacts.twitter'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Website'\r\n                                name='contacts.website'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Youtube'\r\n                                name='contacts.youtube'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Main link'\r\n                                name='contacts.mainLink'\r\n                            />\r\n                            <input type='submit' value='save' disabled={formik.isSubmitting}/>\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { updateUserProfileSettings, getUserProfileThunkCreator, removeUserProfileThunkCreator } from '../../OldReducers/profileReducer'\r\nimport { connect } from \"react-redux\";\r\nimport Settings from './Settings';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\n\r\n\r\nclass SettingsContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserProfileThunkCreator(this.props.userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        return <>\r\n            {\r\n                !this.props.profile\r\n                    ? null\r\n                    : <Settings\r\n                        sendProfileSettings={this.props.updateUserProfileSettings}\r\n                        profile={this.props.profile}\r\n                    />\r\n            }\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profileReducer.profile,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose (\r\n    withRouter, \r\n    connect(mapStateToProps, { \r\n        updateUserProfileSettings, \r\n        getUserProfileThunkCreator, \r\n        removeUserProfileThunkCreator \r\n    }),\r\n    LoggedInRedirect\r\n) \r\n(SettingsContainer) ","import React from 'react'\nimport './App.css'\nimport { Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux'\nimport { initializeApp } from './OldReducers/appReducer'\nimport { compose } from 'redux';\nimport store from './OldReducers/reduxStore'\nimport Nav from './components/Navbar/Nav';\nimport Music from './components/Music/Music';\nimport HeaderContainer from './components/Header/HeaderContainerTS';\nimport UsersInnerContainer from './components/Users/UsersInnerContainerTS';\nimport LoginForm from './components/Login/LoginForm';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport SettingsContainer from './components/Settings/SettingsContainer';\nconst AddDialogContainer = React.lazy(() => import('./components/Dialogs/AddDialog/AddDialogContainerTS'))\nconst ProfileContainer = React.lazy(() => import('./components/NewProfile/ProfileContainer'))\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <>\n        <div className='app-wrapper'>\n          <HeaderContainer />\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Route path='/Dialogs' render={WithSuspense(AddDialogContainer)}/>\n            <Route path='/Profile/:userId?' render={WithSuspense(ProfileContainer)}/>\n            <Route path='/Users/:userId' render={WithSuspense(ProfileContainer)} />\n            <Route exact path='/Users' render={() => <UsersInnerContainer />} />\n            <Route path='/Music' render={() => <Music />} />\n            <Route path='/Settings' render={() => <SettingsContainer />} />\n            <Route path='/Login' render={() => <LoginForm />} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.appReducer.initialized\n})\n\nlet AppWithRouter = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\nlet MainApp = (props) => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppWithRouter />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStoreTS'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n \n\nexport let rerenderEntireTree = () => {\n  ReactDOM.render( <MainApp />,\n    document.getElementById('root')\n  );\n}\nrerenderEntireTree(store)\nwindow.store = store\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Kdvq\",\"logoBlock\":\"User_logoBlock__xhS7H\",\"infoBlock\":\"User_infoBlock__3O4VD\",\"name\":\"User_name__3sCD6\",\"status\":\"User_status__1ssRJ\",\"city\":\"User_city__1xMuO\",\"country\":\"User_country__1_5tH\"};","import { createSelector } from 'reselect'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__eA5PG\",\"login\":\"Header_login__2clXM\",\"userInfo\":\"Header_userInfo__UZJGJ\",\"userLogin\":\"Header_userLogin__1B_UB\",\"userAvatar\":\"Header_userAvatar__8bsmo\",\"profileSettings\":\"Header_profileSettings__3xpjx\"};","export default __webpack_public_path__ + \"static/media/loaderSVG.2997ce57.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/loaderSVG.svg'\r\nimport classes from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.preloaderContainer}>\r\n            <img className={classes.preloader} src={preloader} alt='preloader'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","export default __webpack_public_path__ + \"static/media/defaultAvatar.0334f4b4.png\";","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from 'react-redux'\r\nimport { LoggedInTogglegAC, LoggedInFetchingAC, logOut } from '../OldReducers/authReducer'\r\n\r\nexport const LoggedInRedirect = (Component) => {\r\n    class RedirectedComponent extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.props = props\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <>\r\n                 {!this.props.isLoggedIn && this.props.confirmation ? <Redirect to='/Login' /> : <></>}\r\n                 {this.props.isFetching && !this.props.isLoggedIn ? <></> : <Component {...this.props} />}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsLoggedInRedirect = (state) => ({\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        isFetching: state.authReducer.isFetching,\r\n        confirmation: state.authReducer.confirmation,\r\n    })\r\n    let LogInRedirectComponent = connect(mapStateToPropsLoggedInRedirect, {LoggedInTogglegAC, LoggedInFetchingAC, logOut})(RedirectedComponent)\r\n    return LogInRedirectComponent\r\n}\r\n\r\n","import {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst APDATE_USER_STATUS = 'APDATE_USER_STATUS'\r\nconst ADD_NEW_POST = 'ADD_NEW_POST'\r\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst UPDATE_USER_PHOTO = 'UPDATE_USER_PHOTO'\r\nconst LOADING_NEW_PROFILE_PHOTO = 'LOADING_NEW_PROFILE_PHOTO'\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    newPostText: '',\r\n    profile: null,\r\n    userStatus: null,\r\n    loadingPhoto: false\r\n};\r\n\r\n\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case APDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            }\r\n        }\r\n        case UPDATE_USER_PHOTO: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } }\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.postText\r\n            }\r\n        }\r\n        case ADD_NEW_POST: {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case LOADING_NEW_PROFILE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\n\r\nconst updateUserStatusAC = (userStatus) => ({ type: APDATE_USER_STATUS, userStatus: userStatus })\r\n\r\nconst updateUserPhotoAC = (photos) => ({ type: UPDATE_USER_PHOTO, photos })\r\n\r\nconst loadingPhotoAC = () => ({type: LOADING_NEW_PROFILE_PHOTO})\r\n\r\nexport const addNewPostAC = (postText, login) => ({ type: ADD_NEW_POST, postText, login })\r\n\r\nexport const deletePostAC = (postId) => ({ type: DELETE_POST, postId })\r\n\r\nexport const getUserProfileThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () => {\r\n    return (dispatch) => {\r\n        dispatch(setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText, login) => (dispatch) => {\r\n    dispatch(addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () => (dispatch) => {\r\n    dispatch(loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"PageButton_buttonsContainer__135jv\",\"checkedButton\":\"PageButton_checkedButton__2t6J4\"};"],"sourceRoot":""}