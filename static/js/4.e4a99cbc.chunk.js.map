{"version":3,"sources":["components/NewProfile/Posts/PostItem/PostItem.module.css","components/NewProfile/ProfileInfo/ProfileInfo.module.css","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","OldReducers/profileReducer.js","components/NewProfile/Posts/PostItem/PostItemTS.tsx","components/NewProfile/Posts/AddNewPost/AddNewPostTS.tsx","OldReducers/selectors.js","components/NewProfile/Posts/AddNewPost/AddNewPostContainerTS.tsx","components/NewProfile/Posts/PostsTS.tsx","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatusWithHooksTS.tsx","components/NewProfile/ProfileInfo/ProfileInfoTS.tsx","components/NewProfile/ProfileTS.tsx","components/NewProfile/ProfileContainerTS.tsx"],"names":["module","exports","ADD_NEW_POST","addNewPostAC","postText","login","type","PostItem","props","className","classes","postsContainer","avatar","src","userPhoto","defaultAvatar","alt","userName","likesCount","AddNewPost","posts","map","post","id","initialValues","postMessage","onSubmit","values","onSubmitProps","addNewPostThunkCreator","resetForm","formik","htmlFor","as","name","value","postsSelectors","createSelector","state","usersReducer","users","filter","user","profileReducer","profile","newPostText","authReducer","AddNewPostContainer","connect","headerReducer","userProfilePhoto","dispatch","Posts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","activateStatusChange","loggedInUserId","randomUserId","autoFocus","onBlur","upDateStatus","onChange","elem","currentTarget","onMouseLeave","statusChangeSpan","document","getElementById","style","display","onMouseEnter","onClick","changeStatus","ProfileInfo","loadingPhotoThunk","loadingPhoto","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","profileInfo","fullName","aboutMe","profileInfoContainer","onMouseOver","buttonContainer","console","log","onMouseOut","profilePictureContainer","modal","photos","large","addPhotoButtonContainer","event","target","files","length","uploadUserPhoto","a","upDatePhoto","getNewUserPhotoFromServer","cn","loadingPhotoContainer","hideLoading","href","lookingForAJob","lookingForAJobDescription","modalContainer","hideModalButton","Profile","userId","updatePhoto","getUserProfilePhoto","ProfileInnerContainer","window","scrollTo","this","match","params","getUserProfileThunkCreator","getUserStatusThunkCreator","removeUserProfileThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","getUserProfilePhotoThunk","Preloader","React","Component","compose","withRouter","userStatus","LoggedInRedirect"],"mappings":"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","file":"static/js/4.e4a99cbc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"PostItem_postsContainer__1Sqqb\",\"avatar\":\"PostItem_avatar__1voR6\",\"userName\":\"PostItem_userName__2bW8A\",\"postText\":\"PostItem_postText__9Pj6u\",\"likesCount\":\"PostItem_likesCount__2Ngx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__-8ARQ\",\"contacts\":\"ProfileInfo_contacts__4AHRP\",\"profileInfo\":\"ProfileInfo_profileInfo__Vr2b1\",\"addPhotoButtonContainer\":\"ProfileInfo_addPhotoButtonContainer__3jXc8\",\"profilePictureContainer\":\"ProfileInfo_profilePictureContainer__36FKC\",\"loadingPhotoContainer\":\"ProfileInfo_loadingPhotoContainer__1-ztw\",\"hideLoading\":\"ProfileInfo_hideLoading__3NCLh\",\"modal\":\"ProfileInfo_modal__1O-kv\",\"modalContainer\":\"ProfileInfo_modalContainer__3lG6d\",\"hideModalButton\":\"ProfileInfo_hideModalButton__3oxH-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__3nqGG\",\"changeStatus\":\"ProfileStatus_changeStatus__4OetC\"};","import {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst APDATE_USER_STATUS = 'APDATE_USER_STATUS'\r\nconst ADD_NEW_POST = 'ADD_NEW_POST'\r\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst UPDATE_USER_PHOTO = 'UPDATE_USER_PHOTO'\r\nconst LOADING_NEW_PROFILE_PHOTO = 'LOADING_NEW_PROFILE_PHOTO'\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    newPostText: '',\r\n    profile: null,\r\n    userStatus: null,\r\n    loadingPhoto: false\r\n};\r\n\r\n\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case APDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            }\r\n        }\r\n        case UPDATE_USER_PHOTO: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } }\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.postText\r\n            }\r\n        }\r\n        case ADD_NEW_POST: {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case LOADING_NEW_PROFILE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\n\r\nconst updateUserStatusAC = (userStatus) => ({ type: APDATE_USER_STATUS, userStatus: userStatus })\r\n\r\nconst updateUserPhotoAC = (photos) => ({ type: UPDATE_USER_PHOTO, photos })\r\n\r\nconst loadingPhotoAC = () => ({type: LOADING_NEW_PROFILE_PHOTO})\r\n\r\nexport const addNewPostAC = (postText, login) => ({ type: ADD_NEW_POST, postText, login })\r\n\r\nexport const deletePostAC = (postId) => ({ type: DELETE_POST, postId })\r\n\r\nexport const getUserProfileThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () => {\r\n    return (dispatch) => {\r\n        dispatch(setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText, login) => (dispatch) => {\r\n    dispatch(addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () => (dispatch) => {\r\n    dispatch(loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","import React from 'react'\r\nimport classes from './PostItem.module.css'\r\nimport defaultAvatar from '../../../../assets/defaultAvatar.png'\r\n\r\ntype postItemPropsType = {\r\n    id: number\r\n    postText: string\r\n    userName: string\r\n    likesCount: number\r\n    key: number\r\n    userPhoto: string\r\n}\r\n\r\nconst PostItem : React.FC<postItemPropsType> = (props) => {\r\n    return (\r\n        <>\r\n         <div className={classes.postsContainer}>\r\n            <div className={classes.avatar}>\r\n                <img src={props.userPhoto || defaultAvatar} alt=\"UserAvatar\" />\r\n            </div>\r\n            <div className={classes.userName}>\r\n                {props.userName}\r\n            </div>\r\n            <div className={classes.postText}>\r\n                {props.postText}\r\n            </div>\r\n            <div className={classes.likesCount}>\r\n                <span>Likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nexport default PostItem","import React from 'react'\r\nimport PostItem from '../PostItem/PostItemTS'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { postsType, profileType } from '../../../../types/types'\r\n\r\ntype addNewPostPropsType = {\r\n    posts: Array<postsType>\r\n    profile: profileType\r\n    newPostText: string\r\n    login: string\r\n    addNewPostAC: () => void\r\n    addNewPostThunkCreator: (postMessage : string, login : string) => void\r\n    userPhoto : string\r\n}\r\n\r\nconst AddNewPost : React.FC<addNewPostPropsType> = (props) => {\r\n    \r\n    let posts = props.posts.map((post : postsType) => <PostItem\r\n        id={post.id}\r\n        postText={post.postText}\r\n        userName={post.userName}\r\n        likesCount={post.likesCount}\r\n        key={post.id}\r\n        userPhoto={props.userPhoto}\r\n    />)\r\n\r\n    type initialValuesType = {\r\n        postMessage: string\r\n    }\r\n\r\n    const initialValues = {\r\n        postMessage: ''\r\n    }\r\n\r\n    const onSubmit = (values : initialValuesType, onSubmitProps : any) => {\r\n        if (values.postMessage === '') return \r\n        else {\r\n            props.addNewPostThunkCreator(values.postMessage, props.login)\r\n            onSubmitProps.resetForm()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n                    {\r\n                        formik => {\r\n                            return <Form>\r\n                                <h3>\r\n                                    <label htmlFor=\"postMessage\">Add post</label>\r\n                                </h3>\r\n                                <div></div>\r\n                                <Field as='textarea' name='postMessage' id='postMessage' value={formik.values.postMessage} />\r\n                                <div></div>\r\n                                <button type='submit'>Send</button>\r\n                            </Form>\r\n                        }\r\n                    }\r\n                </Formik>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewPost","import { createSelector } from 'reselect'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","import {connect} from 'react-redux'\r\nimport {  addNewPostAC, addNewPostThunkCreator } from '../../../../OldReducers/profileReducer'\r\nimport AddNewPost from './AddNewPostTS'\r\nimport { postsSelectors } from '../../../../OldReducers/selectors'\r\nimport { AppStateType } from '../../../../redux/reduxStoreTS'\r\n\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\nposts: postsSelectors.getPosts(state),\r\nprofile: postsSelectors.getProfile(state),\r\nnewPostText: postsSelectors.getNewPostsText(state),\r\nlogin: postsSelectors.getLogin(state),\r\nuserPhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nconst AddNewPostContainer = connect(mapStateToProps, { addNewPostAC, addNewPostThunkCreator })(AddNewPost)\r\nexport default AddNewPostContainer","import React from 'react'\r\nimport { postsType } from '../../../types/types'\r\nimport AddNewPostContainer from './AddNewPost/AddNewPostContainerTS'\r\n\r\ntype postsPropsType = {\r\n    posts: Array<postsType>\r\n}\r\n\r\nconst Posts : React.FC<postsPropsType> = (props) => {\r\n    return (\r\n        //@ts-ignore\r\n        <AddNewPostContainer posts={props.posts}/>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useEffect, useState } from 'react'\r\nimport classes from './ProfileStatus.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    randomUserId: number\r\n    loggedInUserId: number\r\n    upDateStatus : (status : string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks : React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            setEditMode(true)\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    const deactivateStatusChange = () => {\r\n        setEditMode(false)\r\n        props.upDateStatus(status)\r\n    }\r\n    //@ts-ignore\r\n    const onStatusChange = (elem) => {\r\n        setStatus(elem.currentTarget.value)\r\n    }\r\n\r\n    const showStatusChange = () => {\r\n        let statusChangeSpan = document.getElementById('statusChange')\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            if (statusChangeSpan) statusChangeSpan.style.display = 'block'\r\n        }\r\n    }\r\n    const hideStatusChange = () => {\r\n        let statusChangeSpan = document.getElementById('statusChange')\r\n        if (statusChangeSpan) statusChangeSpan.style.display = 'none'\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div id='status-container' onMouseLeave={hideStatusChange} className={classes.status}>\r\n                    <div onMouseEnter={showStatusChange}>\r\n                    <span onClick={activateStatusChange}><b>Статус: </b> {props.status}</span>\r\n                    </div>\r\n                    <div id='statusChange' className={classes.changeStatus}>\r\n                        <span onClick={activateStatusChange}>change status</span>\r\n                    </div>\r\n                    <p></p>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateStatusChange}\r\n                        onChange={onStatusChange}\r\n                        type=\"text\"\r\n                        value={status} />\r\n                    <p></p>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooksTS'\r\nimport cn from 'classnames'\r\nimport { profileType } from '../../../types/types'\r\n\r\ntype profileInfoPropsType = {\r\n  randomUserId: number\r\n  loggedInUserId: number\r\n  status: string \r\n  profile: profileType\r\n  loadingPhoto: boolean\r\n  upDateStatus: () => void\r\n  upDatePhoto: (arg: any) => void\r\n  getNewUserPhotoFromServer: (loggedInUserId: number) => void\r\n  loadingPhotoThunk: () => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<profileInfoPropsType> = (props) => {\r\n\r\n  const {\r\n    randomUserId,\r\n    loggedInUserId,\r\n    loadingPhotoThunk,\r\n    loadingPhoto,\r\n    profile,\r\n    status,\r\n    upDateStatus,\r\n  } = props\r\n\r\n  const {\r\n    facebook,\r\n    website,\r\n    vk,\r\n    twitter,\r\n    instagram,\r\n    youtube,\r\n    github,\r\n    mainLink\r\n  } = profile.contacts\r\n\r\n  const changeAvartarPhoto = (event: HTMLElement) => {\r\n    //@ts-ignore\r\n    if (event.target.files.length) {\r\n      loadingPhotoThunk()\r\n    //@ts-ignore\r\n      async function uploadUserPhoto() {\r\n    //@ts-ignore\r\n        await props.upDatePhoto(event.target.files[0])\r\n        props.getNewUserPhotoFromServer(props.loggedInUserId)\r\n        loadingPhotoThunk()\r\n      }\r\n      return uploadUserPhoto()\r\n    }\r\n  }\r\n\r\n\r\n  const showButton = () => { \r\n    let buttonContainer = document.getElementById('button-container')\r\n    console.log('Show button')\r\n    if (randomUserId === loggedInUserId) {\r\n      console.log(randomUserId === loggedInUserId)\r\n      if (buttonContainer) {\r\n        buttonContainer.style.display = 'block'\r\n      } \r\n    }\r\n  }\r\n\r\n  const hideButton = () => {\r\n    let buttonContainer = document.getElementById('button-container')\r\n    if (randomUserId === loggedInUserId) {\r\n      if (buttonContainer) buttonContainer.style.display = 'none'\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  const showModal = () => {\r\n    let modal = document.getElementById('modal')\r\n    if (profile.photos.large) {\r\n      if (modal) modal.style.display = 'flex'\r\n    }\r\n  }\r\n\r\n  const hideModal = () => {\r\n    let modal = document.getElementById('modal')\r\n    if (modal) modal.style.display = 'none'\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.profileInfo}>\r\n      <h1>{profile.fullName}</h1>\r\n      <div>\r\n        <ProfileStatusWithHooks\r\n          upDateStatus={upDateStatus}\r\n          status={status}\r\n          randomUserId={randomUserId}\r\n          loggedInUserId={loggedInUserId}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span><b>Обо мне:</b> {profile.aboutMe}</span>\r\n        <p></p>\r\n      </div>\r\n      <div className={classes.profileInfoContainer}>\r\n\r\n        <div\r\n          onMouseOver={showButton}\r\n          onMouseOut={hideButton}\r\n          className={classes.profilePictureContainer}>\r\n\r\n          <img onClick={showModal} alt='profilePic' src={profile.photos.large || defaultAvatar} />\r\n          <div id='button-container' className={classes.addPhotoButtonContainer}>\r\n\r\n            <input type={'file'}\r\n              //@ts-ignore\r\n              onChange={changeAvartarPhoto} />\r\n          </div>\r\n          <div className={cn(classes.loadingPhotoContainer, {\r\n            [classes.hideLoading]: !loadingPhoto\r\n          })}>\r\n            <div>\r\n              Loading photo...\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.contacts}>\r\n          <ul>\r\n            <b>Контакты:</b>\r\n            <li>facebook: <span><a href={facebook}>{facebook}</a></span></li>\r\n            <li>website: <span><a href={website}>{website}</a></span></li>\r\n            <li>vk: <span><a href={vk}>{vk}</a></span></li>\r\n            <li>twitter: <span><a href={twitter}>{twitter}</a></span></li>\r\n            <li>instagram: <span><a href={instagram}>{instagram}</a></span></li>\r\n            <li>youtube: <span><a href={youtube}>{youtube}</a></span></li>\r\n            <li>github : <span><a href={github}>{github}</a></span></li>\r\n            <li>mainilnk: <span><a href={mainLink}>{mainLink}</a></span></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <b>Ищу работу:</b> {profile.lookingForAJob == true ? <span>Да</span> : <span>Нет</span>}\r\n          </li>\r\n          <li>\r\n            <b>Какую работу ищу:</b> <span>{profile.lookingForAJobDescription}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <hr />\r\n\r\n      <div id='modal' className={classes.modal}>\r\n        <div className={classes.modalContainer}>\r\n          <img\r\n            //@ts-ignore\r\n            src={profile.photos.large}\r\n            alt=\"profile photo large\" />\r\n        </div>\r\n        <div className={classes.hideModalButton}>\r\n          <button onClick={hideModal}>close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo","import React from 'react';\r\nimport { postsType, profileType } from '../../types/types';\r\nimport Posts from './Posts/PostsTS';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfoTS\";\r\n\r\ntype profilePropsType = {\r\n    status: string \r\n    profile: profileType\r\n    posts: Array<postsType>\r\n    userId: number\r\n    upDateStatus: () => void\r\n    updatePhoto: () => void\r\n    getUserProfilePhoto: () => void\r\n    loadingPhotoThunk: () => void\r\n    loadingPhoto: boolean\r\n}\r\n\r\nconst Profile : React.FC<profilePropsType> = (props) => {\r\n    \r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n            randomUserId={props.profile.userId}\r\n            loggedInUserId={props.userId}\r\n            status={props.status} \r\n            profile={props.profile}\r\n            upDateStatus={props.upDateStatus}\r\n            upDatePhoto={props.updatePhoto}\r\n            getNewUserPhotoFromServer={props.getUserProfilePhoto}\r\n            loadingPhotoThunk={props.loadingPhotoThunk}\r\n            loadingPhoto={props.loadingPhoto}\r\n            />\r\n            {props.userId === props.profile.userId ?  <Posts posts={props.posts}/> : null}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './ProfileTS';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    removeUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    updateUserStatusThunkCreator,\r\n    uploadUserProfilePhotoThunkCreator,\r\n    loadingPhotoThunk\r\n} from \"../../redux/profileReducerTypescript\";\r\nimport { getUserProfilePhotoThunk } from '../../redux/HeaderReducerTS'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { postsType, profileType } from '../../types/types';\r\n\r\ntype profileContainerPropsType = {\r\n    profile: profileType\r\n    posts: Array<postsType>\r\n    status: string \r\n    loadingPhoto: boolean\r\n    userId: number\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getUserStatusThunkCreator: (userId: number) => void\r\n    removeUserProfileThunkCreator: () => void\r\n    updateUserStatusThunkCreator: () => void\r\n    uploadUserProfilePhotoThunkCreator: () => void\r\n    getUserProfilePhotoThunk: () => void\r\n    loadingPhotoThunk: () => void\r\n    match: any // Выяснить что за match\r\n}\r\n\r\nclass ProfileInnerContainer extends React.Component<profileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <Profile\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                posts={this.props.posts}\r\n                upDateStatus={this.props.updateUserStatusThunkCreator}\r\n                userId={this.props.userId}\r\n                updatePhoto={this.props.uploadUserProfilePhotoThunkCreator}\r\n                getUserProfilePhoto={this.props.getUserProfilePhotoThunk}\r\n                loadingPhotoThunk={this.props.loadingPhotoThunk}\r\n                loadingPhoto={this.props.loadingPhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    posts: state.profileReducer.posts,\r\n    status: state.profileReducer.userStatus,\r\n    loadingPhoto: state.profileReducer.loadingPhoto,\r\n    userId: state.authReducer.userId,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        removeUserProfileThunkCreator,\r\n        getUserStatusThunkCreator,\r\n        updateUserStatusThunkCreator,\r\n        uploadUserProfilePhotoThunkCreator,\r\n        getUserProfilePhotoThunk,\r\n        loadingPhotoThunk\r\n    }),\r\n    LoggedInRedirect,\r\n)(ProfileInnerContainer)"],"sourceRoot":""}