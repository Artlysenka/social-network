{"version":3,"sources":["components/NewProfile/Posts/PostItem/PostItem.module.css","components/NewProfile/ProfileInfo/ProfileInfo.module.css","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/NewProfile/Posts/PostItem/PostItemTS.tsx","components/NewProfile/Posts/AddNewPost/AddNewPostTS.tsx","components/NewProfile/Posts/AddNewPost/AddNewPostContainerTS.tsx","components/NewProfile/Posts/PostsTS.tsx","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatusWithHooksTS.tsx","components/NewProfile/ProfileInfo/ProfileInfoTS.tsx","components/NewProfile/ProfileTS.tsx","components/NewProfile/ProfileContainerTS.tsx"],"names":["module","exports","PostItem","props","className","classes","postsContainer","avatar","src","userPhoto","defaultAvatar","alt","userName","postText","likesCount","AddNewPost","posts","map","post","id","initialValues","postMessage","onSubmit","values","onSubmitProps","addNewPostThunkCreator","login","resetForm","formik","htmlFor","as","name","value","type","AddNewPostContainer","connect","state","postsSelectors","getPosts","profile","getProfile","newPostText","getNewPostsText","getLogin","headerReducer","userProfilePhoto","addNewPostAC","Posts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","activateStatusChange","loggedInUserId","randomUserId","statusChangeSpan","document","getElementById","autoFocus","onBlur","upDateStatus","onChange","elem","currentTarget","onMouseLeave","style","display","onMouseEnter","onClick","changeStatus","ProfileInfo","loadingPhotoThunk","loadingPhoto","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","buttonContainer","modal","profileInfo","fullName","aboutMe","profileInfoContainer","onMouseOver","onMouseOut","profilePictureContainer","photos","large","addPhotoButtonContainer","event","target","files","length","uploadUserPhoto","a","upDatePhoto","getNewUserPhotoFromServer","cn","loadingPhotoContainer","hideLoading","href","lookingForAJob","lookingForAJobDescription","modalContainer","hideModalButton","Profile","console","log","userId","updatePhoto","getUserProfilePhoto","ProfileInnerContainer","this","match","params","getUserProfileThunkCreator","getUserStatusThunkCreator","removeUserProfileThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","getUserProfilePhotoThunk","Preloader","React","Component","compose","withRouter","profileReducer","userStatus","authReducer","LoggedInRedirect"],"mappings":"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","file":"static/js/4.7e8928c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"PostItem_postsContainer__1Sqqb\",\"avatar\":\"PostItem_avatar__1voR6\",\"userName\":\"PostItem_userName__2bW8A\",\"postText\":\"PostItem_postText__9Pj6u\",\"likesCount\":\"PostItem_likesCount__2Ngx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__-8ARQ\",\"contacts\":\"ProfileInfo_contacts__4AHRP\",\"profileInfo\":\"ProfileInfo_profileInfo__Vr2b1\",\"addPhotoButtonContainer\":\"ProfileInfo_addPhotoButtonContainer__3jXc8\",\"profilePictureContainer\":\"ProfileInfo_profilePictureContainer__36FKC\",\"loadingPhotoContainer\":\"ProfileInfo_loadingPhotoContainer__1-ztw\",\"hideLoading\":\"ProfileInfo_hideLoading__3NCLh\",\"modal\":\"ProfileInfo_modal__1O-kv\",\"modalContainer\":\"ProfileInfo_modalContainer__3lG6d\",\"hideModalButton\":\"ProfileInfo_hideModalButton__3oxH-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__3nqGG\",\"changeStatus\":\"ProfileStatus_changeStatus__4OetC\"};","import React from 'react'\r\nimport classes from './PostItem.module.css'\r\nimport defaultAvatar from '../../../../assets/defaultAvatar.png'\r\n\r\ntype postItemPropsType = {\r\n    id: number\r\n    postText: string\r\n    userName: string\r\n    likesCount: number\r\n    key: number\r\n    userPhoto: string\r\n}\r\n\r\nconst PostItem : React.FC<postItemPropsType> = (props) => {\r\n    return (\r\n        <>\r\n         <div className={classes.postsContainer}>\r\n            <div className={classes.avatar}>\r\n                <img src={props.userPhoto || defaultAvatar} alt=\"UserAvatar\" />\r\n            </div>\r\n            <div className={classes.userName}>\r\n                {props.userName}\r\n            </div>\r\n            <div className={classes.postText}>\r\n                {props.postText}\r\n            </div>\r\n            <div className={classes.likesCount}>\r\n                <span>Likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nexport default PostItem","import React from 'react'\r\nimport PostItem from '../PostItem/PostItemTS'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { postsType, profileType } from '../../../../types/types'\r\n\r\ntype addNewPostPropsType = {\r\n    posts: Array<postsType>\r\n    profile: profileType\r\n    newPostText: string\r\n    login: string\r\n    addNewPostAC: () => void\r\n    addNewPostThunkCreator: (postMessage : string, login : string) => void\r\n    userPhoto : string\r\n}\r\n\r\nconst AddNewPost : React.FC<addNewPostPropsType> = (props) => {\r\n    \r\n    let posts = props.posts.map((post : postsType) => <PostItem\r\n        id={post.id}\r\n        postText={post.postText}\r\n        userName={post.userName}\r\n        likesCount={post.likesCount}\r\n        key={post.id}\r\n        userPhoto={props.userPhoto}\r\n    />)\r\n\r\n    type initialValuesType = {\r\n        postMessage: string\r\n    }\r\n\r\n    const initialValues = {\r\n        postMessage: ''\r\n    }\r\n\r\n    const onSubmit = (values : initialValuesType, onSubmitProps : any) => {\r\n        if (values.postMessage === '') return \r\n        else {\r\n            props.addNewPostThunkCreator(values.postMessage, props.login)\r\n            onSubmitProps.resetForm()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n                    {\r\n                        formik => {\r\n                            return <Form>\r\n                                <h3>\r\n                                    <label htmlFor=\"postMessage\">Add post</label>\r\n                                </h3>\r\n                                <div></div>\r\n                                <Field as='textarea' name='postMessage' id='postMessage' value={formik.values.postMessage} />\r\n                                <div></div>\r\n                                <button type='submit'>Send</button>\r\n                            </Form>\r\n                        }\r\n                    }\r\n                </Formik>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewPost","import {connect} from 'react-redux'\r\nimport {  addNewPostAC, addNewPostThunkCreator } from '../../../../OldReducers/profileReducer'\r\nimport AddNewPost from './AddNewPostTS'\r\nimport { postsSelectors } from '../../../../OldReducers/selectors'\r\nimport { AppStateType } from '../../../../redux/reduxStoreTS'\r\n\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\nposts: postsSelectors.getPosts(state),\r\nprofile: postsSelectors.getProfile(state),\r\nnewPostText: postsSelectors.getNewPostsText(state),\r\nlogin: postsSelectors.getLogin(state),\r\nuserPhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nconst AddNewPostContainer = connect(mapStateToProps, { addNewPostAC, addNewPostThunkCreator })(AddNewPost)\r\nexport default AddNewPostContainer","import React from 'react'\r\nimport { postsType } from '../../../types/types'\r\nimport AddNewPostContainer from './AddNewPost/AddNewPostContainerTS'\r\n\r\ntype postsPropsType = {\r\n    posts: Array<postsType>\r\n}\r\n\r\nconst Posts : React.FC<postsPropsType> = (props) => {\r\n    return (\r\n        //@ts-ignore\r\n        <AddNewPostContainer posts={props.posts}/>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useEffect, useState } from 'react'\r\nimport classes from './ProfileStatus.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    randomUserId: number\r\n    loggedInUserId: number\r\n    upDateStatus : (status : string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks : React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            setEditMode(true)\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    const deactivateStatusChange = () => {\r\n        setEditMode(false)\r\n        props.upDateStatus(status)\r\n    }\r\n    //@ts-ignore\r\n    const onStatusChange = (elem) => {\r\n        setStatus(elem.currentTarget.value)\r\n    }\r\n\r\n    let statusChangeSpan = document.getElementById('statusChange')\r\n\r\n    const showStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            if (statusChangeSpan) statusChangeSpan.style.display = 'block'\r\n        }\r\n    }\r\n    const hideStatusChange = () => {\r\n        if (statusChangeSpan) statusChangeSpan.style.display = 'none'\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div id='status-container' onMouseLeave={hideStatusChange} className={classes.status}>\r\n                    <div onMouseEnter={showStatusChange}>\r\n                    <span onClick={activateStatusChange}><b>Статус: </b> {props.status}</span>\r\n                    </div>\r\n                    <div id='statusChange' className={classes.changeStatus}>\r\n                        <span onClick={activateStatusChange}>change status</span>\r\n                    </div>\r\n                    <p></p>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateStatusChange}\r\n                        onChange={onStatusChange}\r\n                        type=\"text\"\r\n                        value={status} />\r\n                    <p></p>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooksTS'\r\nimport cn from 'classnames'\r\nimport { profileType } from '../../../types/types'\r\n\r\ntype profileInfoPropsType = {\r\n  randomUserId: number\r\n  loggedInUserId: number\r\n  status: string \r\n  profile: profileType\r\n  loadingPhoto: boolean\r\n  upDateStatus: () => void\r\n  upDatePhoto: (arg: any) => void\r\n  getNewUserPhotoFromServer: (loggedInUserId: number) => void\r\n  loadingPhotoThunk: () => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<profileInfoPropsType> = (props) => {\r\n\r\n  const {\r\n    randomUserId,\r\n    loggedInUserId,\r\n    loadingPhotoThunk,\r\n    loadingPhoto,\r\n    profile,\r\n    status,\r\n    upDateStatus,\r\n  } = props\r\n\r\n  const {\r\n    facebook,\r\n    website,\r\n    vk,\r\n    twitter,\r\n    instagram,\r\n    youtube,\r\n    github,\r\n    mainLink\r\n  } = profile.contacts\r\n\r\n  const changeAvartarPhoto = (event: HTMLElement) => {\r\n    //@ts-ignore\r\n    if (event.target.files.length) {\r\n      loadingPhotoThunk()\r\n    //@ts-ignore\r\n      async function uploadUserPhoto() {\r\n    //@ts-ignore\r\n        await props.upDatePhoto(event.target.files[0])\r\n        props.getNewUserPhotoFromServer(props.loggedInUserId)\r\n        loadingPhotoThunk()\r\n      }\r\n      return uploadUserPhoto()\r\n    }\r\n  }\r\n\r\n  let buttonContainer = document.getElementById('button-container')\r\n\r\n  const showButton = () => {\r\n    if (randomUserId === loggedInUserId) {\r\n      if (buttonContainer) buttonContainer.style.display = 'block'\r\n    }\r\n  }\r\n\r\n  const hideButton = () => {\r\n    if (randomUserId === loggedInUserId) {\r\n      if (buttonContainer) buttonContainer.style.display = 'none'\r\n    }\r\n  }\r\n\r\n  let modal = document.getElementById('modal')\r\n\r\n  const showModal = () => {\r\n    if (profile.photos.large) {\r\n      if (modal) modal.style.display = 'flex'\r\n    }\r\n  }\r\n\r\n  const hideModal = () => {\r\n    if (modal) modal.style.display = 'none'\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.profileInfo}>\r\n      <h1>{profile.fullName}</h1>\r\n      <div>\r\n        <ProfileStatusWithHooks\r\n          upDateStatus={upDateStatus}\r\n          status={status}\r\n          randomUserId={randomUserId}\r\n          loggedInUserId={loggedInUserId}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span><b>Обо мне:</b> {profile.aboutMe}</span>\r\n        <p></p>\r\n      </div>\r\n      <div className={classes.profileInfoContainer}>\r\n\r\n        <div\r\n          onMouseOver={showButton}\r\n          onMouseOut={hideButton}\r\n          className={classes.profilePictureContainer}\r\n        >\r\n\r\n          <img onClick={showModal} alt='profilePic' src={profile.photos.large || defaultAvatar} />\r\n          <div id='button-container' className={classes.addPhotoButtonContainer}>\r\n\r\n            <input type={'file'}\r\n              //@ts-ignore\r\n              onChange={changeAvartarPhoto} />\r\n          </div>\r\n          <div className={cn(classes.loadingPhotoContainer, {\r\n            [classes.hideLoading]: !loadingPhoto\r\n          })}>\r\n            <div>\r\n              Loading photo...\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.contacts}>\r\n          <ul>\r\n            <b>Контакты:</b>\r\n            <li>facebook: <span><a href={facebook}>{facebook}</a></span></li>\r\n            <li>website: <span><a href={website}>{website}</a></span></li>\r\n            <li>vk: <span><a href={vk}>{vk}</a></span></li>\r\n            <li>twitter: <span><a href={twitter}>{twitter}</a></span></li>\r\n            <li>instagram: <span><a href={instagram}>{instagram}</a></span></li>\r\n            <li>youtube: <span><a href={youtube}>{youtube}</a></span></li>\r\n            <li>github : <span><a href={github}>{github}</a></span></li>\r\n            <li>mainilnk: <span><a href={mainLink}>{mainLink}</a></span></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <b>Ищу работу:</b> {profile.lookingForAJob == true ? <span>Да</span> : <span>Нет</span>}\r\n          </li>\r\n          <li>\r\n            <b>Какую работу ищу:</b> <span>{profile.lookingForAJobDescription}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <hr />\r\n\r\n      <div id='modal' className={classes.modal}>\r\n        <div className={classes.modalContainer}>\r\n          <img\r\n            //@ts-ignore\r\n            src={profile.photos.large}\r\n            alt=\"profile photo large\" />\r\n        </div>\r\n        <div className={classes.hideModalButton}>\r\n          <button onClick={hideModal}>close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo","import React from 'react';\r\nimport { postsType, profileType } from '../../types/types';\r\nimport Posts from './Posts/PostsTS';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfoTS\";\r\n\r\ntype profilePropsType = {\r\n    status: string \r\n    profile: profileType\r\n    posts: Array<postsType>\r\n    userId: number\r\n    upDateStatus: () => void\r\n    updatePhoto: () => void\r\n    getUserProfilePhoto: () => void\r\n    loadingPhotoThunk: () => void\r\n    loadingPhoto: boolean\r\n}\r\n\r\nconst Profile : React.FC<profilePropsType> = (props) => {\r\n    console.log('profile: ', props.profile)\r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n            randomUserId={props.profile.userId}\r\n            loggedInUserId={props.userId}\r\n            status={props.status} \r\n            profile={props.profile}\r\n            upDateStatus={props.upDateStatus}\r\n            upDatePhoto={props.updatePhoto}\r\n            getNewUserPhotoFromServer={props.getUserProfilePhoto}\r\n            loadingPhotoThunk={props.loadingPhotoThunk}\r\n            loadingPhoto={props.loadingPhoto}\r\n            />\r\n            {props.userId === props.profile.userId ?  <Posts posts={props.posts}/> : null}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './ProfileTS';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    removeUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    updateUserStatusThunkCreator,\r\n    uploadUserProfilePhotoThunkCreator,\r\n    loadingPhotoThunk\r\n} from \"../../OldReducers/profileReducer\";\r\nimport { getUserProfilePhotoThunk } from '../../OldReducers/headerRecuder'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { postsType, profileType } from '../../types/types';\r\n\r\ntype profileContainerPropsType = {\r\n    profile: profileType\r\n    posts: Array<postsType>\r\n    status: string \r\n    loadingPhoto: boolean\r\n    userId: number\r\n    getUserProfileThunkCreator: (userId: number) => void\r\n    getUserStatusThunkCreator: (userId: number) => void\r\n    removeUserProfileThunkCreator: () => void\r\n    updateUserStatusThunkCreator: () => void\r\n    uploadUserProfilePhotoThunkCreator: () => void\r\n    getUserProfilePhotoThunk: () => void\r\n    loadingPhotoThunk: () => void\r\n    match: any // Выяснить что за match\r\n}\r\n\r\nclass ProfileInnerContainer extends React.Component<profileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <Profile\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                posts={this.props.posts}\r\n                upDateStatus={this.props.updateUserStatusThunkCreator}\r\n                userId={this.props.userId}\r\n                updatePhoto={this.props.uploadUserProfilePhotoThunkCreator}\r\n                getUserProfilePhoto={this.props.getUserProfilePhotoThunk}\r\n                loadingPhotoThunk={this.props.loadingPhotoThunk}\r\n                loadingPhoto={this.props.loadingPhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    posts: state.profileReducer.posts,\r\n    status: state.profileReducer.userStatus,\r\n    loadingPhoto: state.profileReducer.loadingPhoto,\r\n    userId: state.authReducer.userId,\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        removeUserProfileThunkCreator,\r\n        getUserStatusThunkCreator,\r\n        updateUserStatusThunkCreator,\r\n        uploadUserProfilePhotoThunkCreator,\r\n        getUserProfilePhotoThunk,\r\n        loadingPhotoThunk\r\n    }),\r\n    LoggedInRedirect,\r\n)(ProfileInnerContainer)"],"sourceRoot":""}