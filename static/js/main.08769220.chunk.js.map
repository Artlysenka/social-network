{"version":3,"sources":["components/Common/Preloader/Preloader.module.css","redux/dialogsReducerTypescript.ts","components/Music/Music.module.css","components/Login/LoginForm.module.css","API/apiTS.ts","components/Navbar/Nav.module.css","components/Common/FormControls/Login.module.css","redux/authReducerTypescript.ts","reportWebVitals.js","OldReducers/friendsReducer.js","redux/usersReducerTypescript.ts","OldReducers/authReducer.js","redux/appReducerTypescript.ts","redux/reduxStoreTS.ts","components/Navbar/NavTS.tsx","components/Music/Music.jsx","components/Header/HeaderTS.tsx","components/Header/HeaderContainerTS.tsx","components/Users/Paginator/PageButtonTS.tsx","components/Users/Paginator/PaginatorTS.tsx","components/Users/User/UserTS.tsx","redux/selectorsTS.ts","components/Users/UsersTS.tsx","components/Users/SearchForm.tsx","components/Users/UsersInnerContainerTS.tsx","components/Common/FormControls/TextError.jsx","components/Common/FormControls/FormikCheckbox.jsx","components/Common/FormControls/FormikDatePicker.jsx","components/Common/FormControls/FormikInput.jsx","components/Common/FormControls/FormikRadioButtons.jsx","components/Common/FormControls/FormikSelect.jsx","components/Common/FormControls/FormikTextArea.jsx","components/Common/FormControls/FormikControl.jsx","components/Login/LoginFormTS.tsx","hoc/WithSuspense.js","components/Settings/SettingsTS.tsx","components/Settings/SettingsContainerTS.tsx","AppTS.tsx","index.js","components/Users/User/User.module.css","components/Header/Header.module.css","assets/loaderSVG.svg","components/Common/Preloader/Preloader.jsx","redux/profileReducerTypescript.ts","API/api.js","assets/defaultAvatar.png","hoc/LoggedInRedirect.js","redux/HeaderReducerTS.tsx","components/Users/Paginator/PageButton.module.css","components/Users/Users.module.css"],"names":["module","exports","POST_NEW_TEXT","initialState","dialogsData","messagesData","dialogsReducer","state","action","type","newDialog","id","name","newPostItem","message","postText","postNewTextActionCreator","instance","axios","create","withCredentials","baseURL","headers","getUsers","pageSize","pageCount","searchName","friend","get","then","res","data","getUserProfile","userId","sendUserStatus","status","put","getUserStatus","sendUserPhoto","file","formData","FormData","append","sendUserProfileSettings","settings","a","console","log","follow","post","unFollow","delete","logInProfile","loginMe","email","password","rememberMe","captcha","logOutMe","getCaptcha","login","isLoggedIn","isFetching","confirmation","captchaImg","authReducer","actions","setUserDataAC","LoggedInTogglegAC","LoggedInFetchingAC","dispatch","resultCode","getCaptchaThunk","logOut","url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friends","friendsReducer","stateCopy","users","totalCount","followingProgress","filter","term","followAC","unfollowAC","setUsersAC","setFilter","payload","pageSizeAC","pageCountAC","totalCountAR","togglePreloaderAC","toggleFollowingProgressAC","SET_USER_DATA","LOGGED_IN_FETCHING","logInUserThunkCreator","INITIALIZED_SUCCSESS","initialized","reducers","combineReducers","profileReducer","usersReducer","map","user","followed","appReducer","headerReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Nav","className","classes","nav","item","to","activeClassName","active","Music","props","contentColor","Header","userSettings","document","getElementById","hideUserSettingsContainer","style","display","header","onMouseOver","onMouseOut","userInfo","userLogin","userAvatar","src","userProfilePhoto","defaultAvatar","alt","profileSettings","onClick","HeaderContainer","this","getUserProfilePhotoThunk","React","Component","withRouter","connect","PageButton","cn","checkedButton","button","removeUsers","Paginator","useState","initialPage","setInitialPage","numberOfShowedButtons","decrementNumber","setDecrementNumber","incrementNumber","numberOfPageButtons","Math","ceil","buttons","buttonsInitializeArray","i","push","createButtonsArray","PageButtonTS","buttonsContainer","User","photo","unFollowThunkCreator","followThunkCreator","slicedStatus","length","slice","logoBlock","disabled","some","infoBlock","country","city","usersSelectors","getUsersSuper","createSelector","UsersTS","photos","small","totalUsersCount","useSelector","PaginatorTS","SearchForm","searchModule","initialValues","userName","onSubmit","values","searchUsers","validateOnChange","formik","as","value","isSubmitting","UsersInnerContainer","getUsersThunkCreator","removeUsersThunkCreator","Preloader","items","LoggedInRedirect","TextError","error","children","FormikCheckbox","options","label","rest","field","option","Fragment","htmlFor","key","checked","component","FormikDatePicker","formControl","form","setFieldValue","selected","onChange","val","Input","autocomplete","FormikInput","touchedEmail","touchedPassword","alert","FormikRadioButtons","FormikSelect","FormikTextArea","FormikControl","control","validationSchema","Yup","required","touched","isValid","WithSuspense","Suspense","fallback","Settings","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","shape","sendProfileSettings","SettingsContainer","getUserProfileThunkCreator","removeUserProfileThunkCreator","updateUserProfileSettings","DialogContainerTS","lazy","ProfileContainer","App","initializeApp","path","render","exact","AppWithRouter","logInUserPromise","Promise","all","MainApp","basename","process","rerenderEntireTree","ReactDOM","preloaderContainer","preloader","posts","newPostText","userStatus","loadingPhoto","newPost","userAva","likesCount","postId","UserId","getUserStatusThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","loadingPhotoThunk","RedirectedComponent","SET_USER_PROFILE_PHOTO"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,mBAAqB,sCAAsC,UAAY,+B,wHCDnFC,EAAgB,gBAqBlBC,EAAmC,CACnCC,YAAa,GACbC,aAAc,IAGLC,EAAiB,WAAmE,IAAlEC,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCAE5F,OAAQA,EAAOC,MACX,KAAKP,EACD,IAAIQ,EAA4B,CAC5BC,GAAI,EACJC,KAAM,QAENC,EAAgC,CAChCF,GAAI,EACJG,QAASN,EAAOO,UAEpB,OAAO,2BACAR,GADP,IAEIH,YAAY,GAAD,mBAAMG,EAAMH,aAAZ,CAAyBM,IACpCL,aAAa,GAAD,mBAAME,EAAMF,cAAZ,CAA0BQ,MAE9C,QACI,OAAON,IAMNS,EAA2B,SAACD,GACrC,MAAO,CACHN,KAAMP,EACNa,SAAUA,K,oBCpDlBf,EAAOC,QAAU,CAAC,aAAe,8B,oBCAjCD,EAAOC,QAAU,CAAC,WAAa,gC,ugBCEzBgB,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAUNC,EAAW,SACpBC,EACAC,GAGM,IAFNC,EAEK,uDAFiB,GACtBC,EACK,uCACL,OAAOV,EAASW,IACZ,qBAAcH,EAAd,kBAAiCD,EAAjC,iBAAkDE,IAA2B,OAAXC,EAAkB,GAAlB,kBAAkCA,IACpG,IACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAIRC,EAAiB,SAACC,GAC3B,OAAOhB,EAASW,IAAiB,WAAaK,EAAQ,KAG7CC,EAAiB,SAACC,GAC3B,OAAOlB,EAASmB,IAAI,kBAAmB,CAAED,OAAQA,KAGxCE,EAAgB,SAACJ,GAC1B,OAAOhB,EAASW,IAAI,kBAAoBK,EAAQ,KAGvCK,EAAgB,SAACC,GAC1B,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBtB,EAASmB,IAAI,iBAAkBI,EAAU,CAC5ClB,QAAS,CACL,eAAgB,0BAKfqB,EAAuB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEb5B,EAASmB,IAAI,UAAWQ,GAFX,cAEzBd,EAFyB,yBAGxBA,GAHwB,gCAK/BgB,QAAQC,IAAR,MAL+B,yBAO/BD,QAAQC,IAAI,WAPmB,4EAAH,sDAYvBC,EAAS,SAACf,GACnB,OAAOhB,EAASgC,KAAK,UAAYhB,EAAQ,GAAI,KAGpCiB,EAAW,SAACjB,GACrB,OAAOhB,EAASkC,OAAO,UAAYlB,EAAQ,KASlCmB,EAAe,WACxB,OAAOnC,EAASW,IAA2B,YAGlCyB,EAAU,SAACC,EAAgBC,GAAsE,IAAnDC,IAAkD,yDAArBC,EAAqB,uCACzG,OAAOxC,EAASgC,KAAK,aAAc,CAAEK,QAAOC,WAAUC,aAAYC,aAGzDC,EAAW,WACpB,OAAOzC,EAASkC,OAAO,eAGdQ,EAAa,WACtB,OAAO1C,EAASW,IAAI,8B,mBC1FxB5B,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,OAAS,sB,mBCA3ED,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,MAAQ,uB,kNCc5FE,EAAkC,CAClC8B,OAAQ,KACRqB,MAAO,KACPM,MAAO,KACPC,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,WAAY,IAGHC,EAAc,WAAoE,IAAnE1D,EAAkE,uDAA1DJ,EAAcK,EAA4C,uCAC1F,OAAQA,EAAOC,MACX,IAAK,gBACD,OAAO,2BACAF,GACAC,EAAOuB,MAElB,IAAK,mBACD,OAAO,2BACAxB,GADP,IAEIsD,WAAYrD,EAAOqD,aAE3B,IAAK,qBACD,OAAO,2BACAtD,GADP,IAEIuD,WAAYtD,EAAOsD,WACnBC,aAAcvD,EAAOuD,eAE7B,IAAK,UACD,OAAO,2BACAxD,GADP,IAEIyD,WAAYxD,EAAOwD,aAE3B,QACI,OAAOzD,IAMN2D,EAAU,CACnBC,cAAgB,SAAClC,EAAwBqB,EAAuBM,EAAuBC,GAAvE,MAAiG,CACzGpD,KAAM,gBACNsB,KAAM,CAAEE,SAAQqB,QAAOM,QAAOC,WAAYA,KAGlDO,kBAAoB,SAACP,GAAD,MAA2B,CACvCpD,KAAM,mBACNoD,WAAYA,IAGpBQ,mBAAqB,SAACP,EAAsBC,GAAvB,MAAmD,CAChEtD,KAAM,qBACNqD,WAAYA,EACZC,aAAcA,IAGtBN,QAAU,SAACO,GAAD,MAA0B,CAChCvD,KAAM,UACNuD,WAAYA,KAiBPJ,EAAQ,SAACN,EAAgBC,EAAmBC,EAAsBC,GAA1D,8CACjB,WAAOa,GAAP,eAAAzB,EAAA,sEACsBQ,YAAQC,EAAOC,EAAUC,EAAYC,GAD3D,OAEgC,KADtB3B,EADV,QAEYC,KAAKwC,YACTD,EAdyB,uCAAkB,WAAOA,GAAP,uBAAAzB,EAAA,6DACnDyB,EAASJ,EAAQG,oBAAmB,GAAM,IADS,SAEjCjB,cAFiC,OAGvB,KADtBtB,EAF6C,QAG3CC,KAAKwC,aAAmB,EACDzC,EAAIC,KAAKA,KAA9BpB,EADqB,EACrBA,GAAI2C,EADiB,EACjBA,MAAOM,EADU,EACVA,MACjBU,EAASJ,EAAQC,cAAcxD,EAAI2C,EAAOM,GAAO,KAErDU,EAASJ,EAAQG,oBAAmB,GAAO,IAPQ,2CAAlB,uDAgBD,KAAxBvC,EAAIC,KAAKwC,YACTD,EAASE,KANjB,2CADiB,uDAWRC,EAAS,yDAClB,WAAOH,GAAP,SAAAzB,EAAA,sEACsBa,cADtB,OAEgC,IAFhC,OAEY3B,KAAKwC,YACTD,EAASJ,EAAQC,cAAc,KAAM,KAAM,MAAM,IAHzD,2CADkB,uDAQTK,EAAkB,yDAC3B,WAAOF,GAAP,eAAAzB,EAAA,sEACsBc,cADtB,OACU7B,EADV,OAEIwC,EAASJ,EAAQT,QAAQ3B,EAAIC,KAAK2C,MAFtC,2CAD2B,wD,uGClGhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gCCPVzE,EAAe,CACfgF,QAAS,IAIAC,EAAiB,WAAmC,IAAlC7E,EAAiC,uDAAzBJ,EAC/BkF,EAAS,eAAO9E,GACpB,OAAO8E,G,uCCFPlF,EAAe,CACfmF,MAAO,GACP9D,SAAU,IACVC,UAAW,EACX8D,WAAY,EACZzB,YAAY,EACZ0B,kBAAmB,GACnBC,OAAQ,CACJC,KAAM,GACN/D,OAAQ,OAuEHuC,EAAU,CACnByB,SAAW,SAAC1D,GAAD,MAAsB,CAAExB,KAAM,SAAUwB,WAEnD2D,WAAa,SAAC3D,GAAD,MAAsB,CAAExB,KAAM,WAAYwB,WAEvD4D,WAAa,SAACP,GAAD,MAA8B,CAAE7E,KAAM,YAAa6E,UAEhEQ,UAAY,SAACJ,EAAe/D,GAAhB,MAA6C,CAAClB,KAAM,aAAesF,QAAU,CAACL,OAAM/D,YAEhGqE,WAAa,SAACxE,GAAD,MAAwB,CAAEf,KAAM,YAAae,aAE1DyE,YAAc,SAACxE,GAAD,MAAwB,CAAEhB,KAAM,aAAcgB,cAE5DyE,aAAe,SAACX,GAAD,MAA0B,CAAE9E,KAAM,cAAe8E,eAEhEY,kBAAoB,SAACrC,GAAD,MAA2B,CAAErD,KAAM,mBAAoBqD,eAE3EsC,0BAA4B,SAACZ,EAA6BvD,GAA9B,MAC3B,CAAExB,KAAM,4BAA6B+E,oBAAmBvD,Y,gBCrGvDoE,EAAgB,gBAEhBC,EAAqB,qBA0CdnC,EAAgB,SAAClC,EAAQqB,EAAOM,EAAOC,GAChD,MAAO,CACHpD,KAAM4F,EACNtE,KAAM,CAAEE,SAAQqB,QAAOM,QAAOC,WAAYA,KAWrCQ,EAAqB,SAACP,EAAYC,GAC3C,MAAO,CACHtD,KAAM6F,EACNxC,WAAYA,EACZC,aAAcA,IASTwC,EAAwB,yDAAM,WAAOjC,GAAP,uBAAAzB,EAAA,6DACvCyB,EAASD,GAAmB,GAAM,IADK,SAErBjB,cAFqB,OAGX,KADtBtB,EAFiC,QAG/BC,KAAKwC,aAAmB,EACDzC,EAAIC,KAAKA,KAA9BpB,EADqB,EACrBA,GAAI2C,EADiB,EACjBA,MAAOM,EADU,EACVA,MACjBU,EAASH,EAAcxD,EAAI2C,EAAOM,GAAO,KAE7CU,EAASD,GAAmB,GAAO,IAPI,2CAAN,uDCrE/BmC,EAAuB,uBAUzBrG,EAAkC,CAClCsG,aAAa,G,iBCJbC,EAAWC,YAAgB,CAC3BC,mBACAtG,mBACA8E,iBACAyB,aHKwB,WAAuF,IAAtFtG,EAAqF,uDAA1DJ,EAAcK,EAA4C,uCAC9G,OAAQA,EAAOC,MACX,IAAK,SACD,OAAO,2BACAF,GADP,IAEI+E,MAAO/E,EAAM+E,MAAMwB,KAAI,SAAAC,GACnB,OAAIA,EAAKpG,KAAOH,EAAOyB,OACZ,2BAAK8E,GAAZ,IAAkBC,UAAU,IAEzBD,OAGnB,IAAK,WACD,OAAO,2BACAxG,GADP,IAEI+E,MAAO/E,EAAM+E,MAAMwB,KAAI,SAAAC,GACnB,OAAIA,EAAKpG,KAAOH,EAAOyB,OACZ,2BAAK8E,GAAZ,IAAkBC,UAAU,IAEzBD,OAGnB,IAAK,YACD,OAAO,2BACAxG,GADP,IAEI+E,MAAM,YAAK9E,EAAO8E,SAE1B,IAAK,aACD,OAAO,2BACA/E,GADP,IAEIkF,OAAQjF,EAAOuF,UAEvB,IAAK,YACD,OAAO,2BACAxF,GADP,IAEIiB,SAAUhB,EAAOgB,WAEzB,IAAK,aACD,OAAO,2BACAjB,GADP,IAEIkB,UAAWjB,EAAOiB,YAE1B,IAAK,cACD,OAAO,2BACAlB,GADP,IAEIgF,WAAY/E,EAAO+E,aAE3B,IAAK,mBACD,OAAO,2BACAhF,GADP,IAEIuD,WAAYtD,EAAOsD,aAE3B,IAAK,4BACD,OAAO,2BACAvD,GADP,IAEIiF,kBAAmBhF,EAAOgF,kBAAP,sBAA+BjF,EAAMiF,mBAArC,CAAwDhF,EAAOyB,SAC5E1B,EAAMiF,kBAAkBC,QAAO,SAAA9E,GAAE,OAAIA,IAAOH,EAAOyB,YAEjE,QACI,OAAO1B,IG/Df0D,gBACAgD,WDCsB,WAAmE,IAAlE1G,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCACxF,OAAQA,EAAOC,MACX,KAAK+F,EACD,OAAO,2BACAjG,GADP,IAEIkG,aAAa,IAErB,QACI,OAAOlG,ICRf2G,oBAYEC,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYd,EAAUS,EAAiBM,YAAgBC,OAKrEN,OAAOG,MAAQA,EAEAA,Q,0HCTAI,EAxBH,WACV,OACE,qBAAKC,UAAWC,IAAQC,IAAxB,SAEE,gCACE,qBAAKF,UAAWC,IAAQE,KAAxB,SACE,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAQK,OAAjD,0BAEF,qBAAKN,UAAWC,IAAQE,KAAxB,SACE,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAQK,OAAhD,wBAEF,qBAAKN,UAAWC,IAAQE,KAAxB,SACE,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAQK,OAA9C,qBAEF,qBAAKN,UAAWC,IAAQE,KAAxB,SACE,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAQK,OAA9C,qBAEF,qBAAKN,UAAWC,IAAQE,KAAxB,SACE,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAQK,OAAjD,8B,kBCXKC,EAVD,SAACC,GACX,OACI,qBAAKR,UAAWC,IAAQQ,aAAxB,SACI,0C,yBC0DGC,EAvD2B,SAACF,GAGvC,IAIIG,EAAeC,SAASC,eAAe,mBAMrCC,EAA4B,WAC1BH,IACAA,EAAaI,MAAMC,QAAU,SAGrC,OACI,wBAAQhB,UAAWC,IAAQgB,OAA3B,SACI,qBAAKjB,UAAWC,IAAQjE,MAAxB,SACKwE,EAAMvE,WACH,sBACIiF,YAdc,WAC1BP,IACAA,EAAaI,MAAMC,QAAU,UAajBG,WAAYL,EAFhB,UAII,sBACId,UAAWC,IAAQmB,SADvB,UAEI,qBAAKpB,UAAWC,IAAQoB,UAAxB,SACI,8BAAK,+BAAOb,EAAMxE,YAEtB,cAAC,IAAD,CAASoE,GAAG,WAAZ,SACI,qBAAKJ,UAAWC,IAAQqB,WAAxB,SACI,qBAAKC,IAAKf,EAAMgB,kBAAoBC,IAAeC,IAAI,uBAInE,sBAAK3I,GAAG,kBAAkBiH,UAAWC,IAAQ0B,gBAA7C,UACI,8BACI,wBAAQC,QApCrB,WACXpB,EAAM3D,UAmCkB,uBAEJ,8BACI,cAAC,IAAD,CAASuD,GAAG,YAAZ,SACI,wBAAQwB,QAASd,EAAjB,wCAOd,eAAC,IAAD,CAASV,GAAG,SAAZ,cAAsB,mDC9CtCyB,G,kLAGEC,KAAKtB,MAAMuB,yBAAyBD,KAAKtB,MAAMnG,U,+BAI/C,OAAO,cAAC,EAAD,eAAYyH,KAAKtB,Y,GAPFwB,IAAMC,WAmBrBvC,eACXwC,IACAC,aAVoB,SAACxJ,GAAD,MAA2B,CAC/CsD,WAAYtD,EAAM0D,YAAYJ,WAC9BD,MAAOrD,EAAM0D,YAAYL,MACzBE,WAAYvD,EAAM0D,YAAYH,WAC9B7B,OAAQ1B,EAAM0D,YAAYhC,OAC1BmH,iBAAkB7I,EAAM2G,cAAckC,oBAKb,CAAE3E,WAAQkF,+BAFxBrC,CAGbmC,I,0DCDaO,GAxBI,SAAC5B,GAOhB,OACI,mCACI,8BACI,wBAEIR,UAAWqC,KAAG,gBACTpC,KAAQqC,cAAiB9B,EAAM+B,SAAW/B,EAAM3G,YAErD+H,QAbG,WACfpB,EAAMgC,cACNhC,EAAM7G,SAAS6G,EAAM5G,SAAU4G,EAAM+B,OAAQ,GAAI,OAMzC,SAMK/B,EAAM+B,QALF/B,EAAM+B,aCmEhBE,GAtEyB,SAACjC,GAErC,IAF+C,EAITkC,mBAASlC,EAAM3G,WAJN,oBAIxC8I,EAJwC,KAI3BC,EAJ2B,OAKfF,mBAAS,GAAlCG,EALwC,uBAMDH,mBAJd,GAFe,oBAMxCI,EANwC,KAMvBC,EANuB,OAODL,mBALd,GAFe,oBAOxCM,EAPwC,KAQzCC,GARyC,KAQnBC,KAAKC,KAAK3C,EAAM7C,WAAa6C,EAAM5G,WA8B3DwJ,EAhBuB,WAEvB,IADA,IAAIC,EAAyC,GACpCC,EAAIX,EAAaW,EAAIL,EAAsB,EAAGK,IACnDD,EAAuBE,KAAKD,GAGhC,OAAoB,IAAhBX,GAGKA,EAAcG,EAAkB,GACrCC,EAAoBD,EAAkB,GAAMH,EAAcG,IAHnDO,EASDG,GAAqBtE,KAAI,SAAUqD,GAC7C,KAAIA,EAASI,EAAcE,EAAwB,GAGnD,OAAO,cAACY,GAAD,CACHlB,OAAQA,EACR3I,SAAU4G,EAAM5G,SAChBD,SAAU6G,EAAM7G,SAChBE,UAAW2G,EAAM3G,UACjB8D,WAAY6C,EAAM7C,WAClB6E,YAAahC,EAAMgC,iBAI3B,OACI,sBAAKxC,UAAWC,KAAQyD,iBAAxB,UACqB,IAAhBf,EACK,KACA,8BACE,wBAAQf,QA1CK,WACzBgB,EAAeD,EAAcG,IACJ,GAfG,IAgBEA,GAAoCC,EAhBtC,IAuDhB,8CAEPK,EACAH,EAAsBD,GAAmBL,EACpC,KACA,8BACE,wBAAQf,QApDK,WACzBgB,EAAeD,EAAcK,IAmDjB,wD,oBCfLW,GAhDF,SAACnD,GAAsB,IAG5BzH,EAQAyH,EARAzH,GACA6K,EAOApD,EAPAoD,MACAxE,EAMAoB,EANApB,SACAxB,EAKA4C,EALA5C,kBACAiG,EAIArD,EAJAqD,qBACAC,EAGAtD,EAHAsD,mBACA9K,EAEAwH,EAFAxH,KACAuB,EACAiG,EADAjG,OAGAwJ,EAAe,KAMnB,OAJIxJ,GAAUA,EAAOyJ,OAAS,KAC1BD,EAAexJ,EAAO0J,MAAM,EAAE,IAAM,OAIpC,sBAAKjE,UAAWC,KAAQd,KAAxB,UACI,sBAAKa,UAAWC,KAAQiE,UAAxB,UACI,8BACI,cAAC,IAAD,CAAS9D,GAAI,UAAYrH,EAAzB,SACI,qBAAKwI,IAAc,MAATqC,EAAgBnC,IAAgBmC,EAAOlC,IAAI,kBAG7D,8BACKtC,EACK,wBAAQ+E,SAAUvG,EAAkBwG,MAAK,SAAA/J,GAAM,OAAIA,IAAWtB,KAAK6I,QAAS,WAC1EiC,EAAqB9K,IADvB,sBAIA,wBAAQoL,SAAUvG,EAAkBwG,MAAK,SAAA/J,GAAM,OAAIA,IAAWtB,KAAK6I,QAAS,WAC1EkC,EAAmB/K,IADrB,yBAMd,sBAAKiH,UAAWC,KAAQoE,UAAxB,UACI,qBAAKrE,UAAWC,KAAQjH,KAAxB,SAA+BA,IAC/B,qBAAKgH,UAAWC,KAAQ1F,OAAxB,SAAiCwJ,GAAgBxJ,IACjD,sBAAKyF,UAAWC,KAAQqE,QAAxB,oBAAwC,2CAAxC,OACA,sBAAKtE,UAAWC,KAAQsE,KAAxB,mBAAoC,qD,8BCzDvCC,GAAiB,SACd7L,GACR,OAAOA,EAAMsG,aAAavB,OAFrB8G,GAAiB,SAId7L,GACR,OAAOA,EAAMsG,aAAarF,UALrB4K,GAAiB,SAOb7L,GACT,OAAOA,EAAMsG,aAAapF,WARrB2K,GAAiB,SAUZ7L,GACV,OAAOA,EAAMsG,aAAatB,YAXrB6G,GAAiB,SAaZ7L,GACV,OAAOA,EAAMsG,aAAa/C,YAdrBsI,GAAiB,SAgBJ7L,GAClB,OAAOA,EAAMsG,aAAarB,mBAOrB6G,GAAgBC,aAAeF,IAA4B,SAAC9G,GACrE,OAAOA,EAAMG,QAAO,SAAAsB,GAAI,OAAI,QCgBjBwF,GAnC2B,SAACnE,GAEvC,IAAI9C,EAAQ8C,EAAM9C,MAAMwB,KAAI,SAAAC,GAAI,OAAI,cAAC,GAAD,CAEhCpG,GAAIoG,EAAKpG,GACTC,KAAMmG,EAAKnG,KACXuB,OAAQ4E,EAAK5E,OACbqJ,MAAOzE,EAAKyF,OAAOC,MACnBzF,SAAUD,EAAKC,SACfxB,kBAAmB4C,EAAM5C,kBACzBkG,mBAAoBtD,EAAMsD,mBAC1BD,qBAAsBrD,EAAMqD,sBARvB1E,EAAKpG,OAWR+L,EAAkBC,YAAYP,IAEpC,OACI,sBAAKxE,UAAWC,KAAQvC,MAAxB,UAEI,8BACKA,IAEL,cAACsH,GAAD,CACIpL,SAAU4G,EAAM5G,SAChB+D,WAAYmH,EACZnL,SAAU6G,EAAM7G,SAChBE,UAAW2G,EAAM3G,UACjB2I,YAAahC,EAAMgC,kB,kBCiBpByC,GA1CI,SAACzE,GAiBhB,OACI,qBAAKR,UAAWC,KAAQiF,aAAxB,SACI,cAAC,KAAD,CAAQC,cATM,CAClBC,SAAU,GACVrL,OAAQ,MAOkCsL,SAjB7B,SAACC,GAA8B,4CAE5C,sBAAArK,EAAA,sEACWuF,EAAM7G,SAAS6G,EAAM5G,SAAU,EAAG0L,EAAOF,SAAUE,EAAOvL,QADrE,4CAF4C,sBAK5C,OAJAyG,EAAMgC,cADsC,0CAKrC+C,IAYuDC,kBAAkB,EAA5E,SAEQ,SAAAC,GAEI,OADAvK,QAAQC,IAAI,WAAYsK,GACjB,eAAC,KAAD,WACH,cAAC,KAAD,CACIC,GAAG,QACH1M,KAAK,aAET,eAAC,KAAD,CAAOA,KAAK,SAAS0M,GAAG,SAAxB,UACI,wBAAQC,MAAM,OAAd,iBACA,wBAAQA,MAAM,OAAd,qBACA,wBAAQA,MAAM,QAAd,4BAEJ,uBAAO9M,KAAK,SAAS8M,MAAM,SAASxB,SAAUsB,EAAOG,wB,SCd3EC,G,kLAIE/D,KAAKtB,MAAMsF,qBAAqBhE,KAAKtB,MAAM5G,SAAUkI,KAAKtB,MAAM3G,UAAW,GAAI,Q,6CAG/EiI,KAAKtB,MAAMuF,4B,+BAIX,OAAKjE,KAAKtB,MAAM9C,MAAMsG,OAalB,qCAEI,cAAC,GAAD,CACIrK,SAAUmI,KAAKtB,MAAMsF,qBACrBlM,SAAUkI,KAAKtB,MAAM5G,SACrBC,UAAWiI,KAAKtB,MAAM3G,UACtBqC,WAAY4F,KAAKtB,MAAMtE,WACvBsG,YAAaV,KAAKtB,MAAMuF,0BAE5B,cAAC,GAAD,CACIrI,MAAOoE,KAAKtB,MAAM9C,MAClB9D,SAAUkI,KAAKtB,MAAM5G,SACrBgE,kBAAmBkE,KAAKtB,MAAM5C,kBAC9BkG,mBAAoBhC,KAAKtB,MAAMsD,mBAC/BD,qBAAsB/B,KAAKtB,MAAMqD,qBACjClK,SAAUmI,KAAKtB,MAAMsF,qBACrBtD,YAAaV,KAAKtB,MAAMuF,wBACxBlM,UAAWiI,KAAKtB,MAAM3G,UACtBqC,WAAY4F,KAAKtB,MAAMtE,gBA9BxB,qCACH,cAAC,GAAD,CACIvC,SAAUmI,KAAKtB,MAAMsF,qBACrBlM,SAAUkI,KAAKtB,MAAM5G,SACrBC,UAAWiI,KAAKtB,MAAM3G,UACtBqC,WAAY4F,KAAKtB,MAAMtE,WACvBsG,YAAaV,KAAKtB,MAAMuF,0BAE5B,cAACC,GAAA,EAAD,W,GApBkBhE,IAAMC,WA2DzBvC,eACXyC,aAXkB,SAACxJ,GACnB,MAAO,CACH+E,MAAO+G,GAAc9L,GACrBiB,SAAU4K,GAA2B7L,GACrCkB,UAAW2K,GAA4B7L,GACvCgF,WAAY6G,GAA6B7L,GACzCuD,WAAYsI,GAA6B7L,GACzCiF,kBAAmB4G,GAAqC7L,MAInC,CACrByF,WAAY9B,EAAQ8B,WACpB0H,qBdmBR,SAAClM,EAAkBC,EAAoBC,EAAoBC,GAA3D,8CACI,WAAO2C,GAAP,eAAAzB,EAAA,6DACIyB,EAASJ,EAAQiC,mBAAkB,IACnC7B,EAASJ,EAAQ+B,YAAYxE,IAC7B6C,EAASJ,EAAQ4B,UAAUpE,EAAYC,IAH3C,SAIsBJ,YAASC,EAAUC,EAAWC,EAAYC,GAJhE,OAIUG,EAJV,OAKIwC,EAASJ,EAAQiC,mBAAkB,IACnC7B,EAASJ,EAAQ2B,WAAW/D,EAAI+L,QAChCvJ,EAASJ,EAAQgC,aAAapE,EAAIyD,aAPtC,2CADJ,uDclBQoI,wBd8B+B,WAEnC,OAAO,SAACrJ,GACJA,EAASJ,EAAQ2B,WAAW,OchC5B6F,mBdoC0B,SAACzJ,GAAD,8CAE9B,WAAOqC,GAAP,SAAAzB,EAAA,6DACIyB,EAASJ,EAAQkC,2BAA0B,EAAMnE,IADrD,SAEsBe,YAAOf,GAF7B,OAGgC,IAHhC,OAGYF,KAAKwC,YACTD,EAASJ,EAAQyB,SAAS1D,IAE9BqC,EAASJ,EAAQkC,2BAA0B,EAAOnE,IANtD,2CAF8B,uDcnC1BwJ,qBd+C4B,SAACxJ,GAAD,8CAChC,WAAOqC,GAAP,SAAAzB,EAAA,6DACIyB,EAASJ,EAAQkC,2BAA0B,EAAMnE,IADrD,SAEsBiB,YAASjB,GAF/B,OAGgC,IAHhC,OAGYF,KAAKwC,YACTD,EAASJ,EAAQ0B,WAAW3D,IAEhCqC,EAASJ,EAAQkC,2BAA0B,EAAOnE,IANtD,2CADgC,uDc9C5BgE,YAAa/B,EAAQ+B,cAEzB6H,KATWxG,CAUbmG,I,6BCvFaM,GARG,SAAC3F,GACf,OACI,qBAAKR,UAAWC,KAAQmG,MAAxB,SACK5F,EAAM6F,YC2BJC,GA9BQ,SAAC9F,GAAW,IACvBxH,EAAkCwH,EAAlCxH,KAAauN,GAAqB/F,EAA5BgG,MAA4BhG,EAArB+F,SAAYE,EADH,aACYjG,EADZ,4BAE9B,OACI,gCACI,cAAC,KAAD,yBAAOxH,KAAMA,GAAUyN,GAAvB,aAEQ,YAAgB,IAAbC,EAAY,EAAZA,MACC,OAAOH,EAAQrH,KAAI,SAAAyH,GACf,OACI,eAAC,IAAMC,SAAP,WACI,8BACA,uBAAOC,QAASF,EAAOhB,MAAvB,SAA+BgB,EAAOG,QAEtC,+CACIjO,KAAK,WACLE,GAAI4N,EAAOhB,OACPe,GAHR,IAIIf,MAAOgB,EAAOhB,MACdoB,QAAgC,IAAvBL,EAAMf,MAAM3B,YATR2C,EAAOG,YAgBhD,cAAC,KAAD,CAAc9N,KAAMA,EAAMgO,UAAWb,S,qBCElCc,I,OAxBU,SAACzG,GAAW,IACzBgG,EAAyBhG,EAAzBgG,MAAOxN,EAAkBwH,EAAlBxH,KAASyN,EADQ,aACCjG,EADD,kBAEhC,OACI,sBAAKR,UAAWC,KAAQiH,YAAxB,UACI,uBAAOL,QAAS7N,EAAhB,SAAuBwN,IACvB,cAAC,KAAD,CAAOxN,KAAMA,EAAb,SAEQ,YAAsB,IAAnBmO,EAAkB,EAAlBA,KAAMT,EAAY,EAAZA,MACGU,EAAkBD,EAAlBC,cACAzB,EAAUe,EAAVf,MACR,OAAO,cAAC,KAAD,qCACH5M,GAAIC,GACA0N,GACAD,GAHD,IAIHY,SAAU1B,EACV2B,SAAU,SAAAC,GAAG,OAAIH,EAAcpO,EAAMuO,UAIrD,cAAC,KAAD,CAAcvO,KAAMA,EAAMgO,UAAWb,UCpB3CqB,GAAQ,SAAChH,GACX,OAAO,sBAAKR,UAAWC,KAAQiH,YAAxB,UACH,uBAAOL,QAASrG,EAAMxH,KAAtB,SAA6BwH,EAAMgG,QACnC,gCACI,cAAC,KAAD,CACIxG,UAAWQ,EAAMR,UACjBjH,GAAIyH,EAAMxH,KACVA,KAAMwH,EAAMxH,KACZH,KAAM2H,EAAM3H,KACZ4O,aAAcjH,EAAMiH,eACxB,cAAC,KAAD,CAAczO,KAAMwH,EAAMxH,KAAMgO,UAAWb,YA4BxCuB,GAvBK,SAAClH,GAAW,IAExBgG,EAOAhG,EAPAgG,MACAxN,EAMAwH,EANAxH,KACA0C,EAKA8E,EALA9E,MACAC,EAIA6E,EAJA7E,SACAgM,EAGAnH,EAHAmH,aACAC,EAEApH,EAFAoH,gBACA/O,EACA2H,EADA3H,KAGJ,OACI,mCACI,cAAC,GAAD,CAAOmH,UAAWqC,KAAG,gBAChBpC,KAAQ4H,MAAQF,IAAiBjM,GAASkM,IAAoBjM,IAE/D3C,KAAMA,EACNwN,MAAOA,EACP3N,KAAMA,OCLPiP,GA9BY,SAACtH,GAAW,IAC3BxH,EAAkCwH,EAAlCxH,KAAMwN,EAA4BhG,EAA5BgG,MAAOD,EAAqB/F,EAArB+F,QAAYE,EADC,aACQjG,EADR,4BAElC,OACI,gCACI,uBAAOqG,QAAS7N,EAAhB,SAAuBwN,IACvB,wBACA,cAAC,KAAD,yBAAOxN,KAAMA,GAAUyN,GAAvB,aAEQ,YAAgB,IAAbC,EAAY,EAAZA,MACC,OAAOH,EAAQrH,KAAI,SAAAyH,GACf,OACI,eAAC,IAAMC,SAAP,WACI,+CACI/N,KAAK,QACLE,GAAI4N,EAAOhB,OACPe,GAHR,IAIIf,MAAOgB,EAAOhB,MACdoB,QAASL,EAAMf,QAAUgB,EAAOhB,SAChC,uBAAOkB,QAASF,EAAOhB,MAAvB,SAA+BgB,EAAOG,QAPzBH,EAAOG,YAchD,cAAC,KAAD,CAAc9N,KAAMA,EAAMgO,UAAWb,SCLlC4B,GAnBM,SAACvH,GAAW,IACrBgG,EAAkChG,EAAlCgG,MAAOxN,EAA2BwH,EAA3BxH,KAAMuN,EAAqB/F,EAArB+F,QAAYE,EADL,aACcjG,EADd,4BAE5B,OACI,sBAAKR,UAAWC,KAAQiH,YAAxB,UACI,uBAAOL,QAAS7N,EAAhB,SAAuBwN,IACvB,cAAC,KAAD,yBAAOd,GAAG,SAAS3M,GAAIC,EAAMA,KAAMA,GAAUyN,GAA7C,aAEQF,EAAQrH,KAAI,SAAAyH,GACR,OAAO,wBAA2BhB,MAAOgB,EAAOhB,MAAzC,SACFgB,EAAOG,KADQH,EAAOhB,aAMvC,cAAC,KAAD,CAAc3M,KAAMA,EAAMgO,UAAWb,SCHlC6B,GAXQ,SAACxH,GAAW,IACvBgG,EAAyBhG,EAAzBgG,MAAOxN,EAAkBwH,EAAlBxH,KAASyN,EADM,aACGjG,EADH,kBAE9B,OACI,sBAAKR,UAAWC,KAAQiH,YAAxB,UACI,uBAAOL,QAAS7N,EAAhB,SAAuBwN,IACvB,cAAC,KAAD,aAAOd,GAAG,WAAW3M,GAAIC,EAAMA,KAAMA,GAAUyN,IAC/C,cAAC,KAAD,CAAczN,KAAMA,EAAMgO,UAAWb,SCSlC8B,GAbO,SAACzH,GAAW,IACtB0H,EAAqB1H,EAArB0H,QAAYzB,EADS,aACAjG,EADA,aAE7B,OAAQ0H,GACJ,IAAK,QAAS,OAAO,cAAC,GAAD,eAAiBzB,IACtC,IAAK,WAAY,OAAO,cAAC,GAAD,eAAoBA,IAC5C,IAAK,SAAU,OAAO,cAAC,GAAD,eAAkBA,IACxC,IAAK,QAAS,OAAO,cAAC,GAAD,eAAwBA,IAC7C,IAAK,WAAY,OAAO,cAAC,GAAD,eAAoBA,IAC5C,IAAK,OAAQ,OAAO,cAAC,GAAD,eAAsBA,IAC1C,QAAS,OAAO,O,8BC6ETtE,gBAPc,SAACxJ,GAC1B,MAAO,CACHsD,WAAYtD,EAAM0D,YAAYJ,WAC9BG,WAAYzD,EAAM0D,YAAYD,cAIE,CAAEJ,WAA3BmG,EA7E8B,SAAC3B,GAAW,IAE7CxE,EAAkCwE,EAAlCxE,MAAOC,EAA2BuE,EAA3BvE,WAAYG,EAAeoE,EAAfpE,WAgBrB+L,EAAmBC,KAAW,CAChC1M,MAAO0M,OAAa1M,MAAM,wBAAwB2M,SAAS,eAC3D1M,SAAUyM,OAAaC,SAAS,oBAOpC,OAAIpM,EAAqB,cAAC,IAAD,CAAUmE,GAAI,aAGnC,cAAC,KAAD,CAAQ+E,cAnB8B,CACtCzJ,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAe6BsM,iBAAkBA,EAAkB9C,SAP7D,SAACC,GACdtJ,EAAMsJ,EAAO5J,MAAO4J,EAAO3J,SAAU2J,EAAO1J,WAAY0J,EAAOzJ,UAM/D,SAEQ,SAAA4J,GACI,OAAO,eAAC,KAAD,WACH,uCACA,cAAC,GAAD,CACI/J,MAAO+J,EAAOH,OAAO5J,MACrBiM,aAAclC,EAAO6C,QAAQ5M,MAC7BwM,QAAQ,QACRrP,KAAK,QACL2N,MAAM,QACNxN,KAAK,UACT,cAAC,GAAD,CACI2C,SAAU8J,EAAOH,OAAO3J,SACxBiM,gBAAiBnC,EAAO6C,QAAQ3M,SAChCuM,QAAQ,QACRrP,KAAK,WACL2N,MAAM,WACNxN,KAAK,aAET,sBACA,uBAAOH,KAAK,SAASsL,UAAWsB,EAAO8C,QAAS5C,MAAO,UACrDvJ,EAEI,sBAAK4D,UAAWC,KAAQ7D,WAAxB,UACE,sBACA,qBAAKmF,IAAKnF,EAAYsF,IAAI,YAC1B,cAAC,GAAD,CACIwG,QAAQ,QACR1B,MAAM,qBACNxN,KAAK,eAPb,cClEfwP,GAAe,SAACvG,GACzB,OAAO,SAACzB,GACJ,OAAO,cAAC,IAAMiI,SAAP,CAAgBC,SAAU,cAAC1C,GAAA,EAAD,IAA1B,SACH,cAAC/D,EAAD,eAAezB,QCyIZmI,GApIwB,SAACnI,GAAW,IAAD,EAE2BA,EAAMoI,QAAvEC,EAFsC,EAEtCA,SAAUC,EAF4B,EAE5BA,QAASC,EAFmB,EAEnBA,eAAgBC,EAFG,EAEHA,0BAFG,EAGmCxI,EAAMoI,QAAQK,SAAvFC,EAHsC,EAGtCA,SAAUC,EAH4B,EAG5BA,OAAQC,EAHoB,EAGpBA,UAAWC,EAHS,EAGTA,SAAUC,EAHD,EAGCA,QAASC,EAHV,EAGUA,GAAIC,EAHd,EAGcA,QAASC,EAHvB,EAGuBA,QAG/DtB,EAAmBC,OAAasB,MAAM,CACxCT,SAAUb,OAAasB,MAAM,CACzBP,OAAQf,OAAatL,IAAI,gBACzByM,GAAInB,OAAatL,IAAI,gBACrBoM,SAAUd,OAAatL,IAAI,gBAC3BsM,UAAWhB,OAAatL,IAAI,gBAC5BwM,QAASlB,OAAatL,IAAI,gBAC1B0M,QAASpB,OAAatL,IAAI,gBAC1B2M,QAASrB,OAAatL,IAAI,gBAC1BuM,SAAUjB,OAAatL,IAAI,oBAK7BqI,EAA+B,CACjC0D,SAAUA,EACVC,QAASA,EACTC,eAAgBA,EAChBC,0BAA2BA,EAC3BC,SAAU,CACNE,OAAQA,EACRI,GAAIA,EACJL,SAAUA,EACVE,UAAWA,EACXE,QAASA,EACTE,QAASA,EACTC,QAASA,EACTJ,SAAUA,IAWlB,OAEI,mCACI,cAAC,KAAD,CACIlE,cAAeA,EACfE,SAZK,SAACC,GAA0B,4CACxC,sBAAArK,EAAA,sEACUuF,EAAMmJ,oBAAoBrE,GADpC,4CADwC,sBAIxC,OAJyC,WAAD,+BAIjCqE,IASCxB,iBAAkBA,EAClB3C,kBAAkB,EAJtB,SAOQ,SAAAC,GACI,OAAO,eAAC,KAAD,WACH,kDACA,cAAC,GAAD,CACIyC,QAAQ,QACR1B,MAAM,YACNxN,KAAK,aAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,WACNxN,KAAK,YAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,YACNxN,KAAK,8BAET,gCACI,sBACA,cAAC,KAAD,CACIH,KAAK,WACLG,KAAK,mBAET,uBAAO6N,QAAQ,iBAAf,kCAEJ,0CAGA,cAAC,GAAD,CACIqB,QAAQ,QACR1B,MAAM,SACNxN,KAAK,oBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,KACNxN,KAAK,gBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,WACNxN,KAAK,sBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,YACNxN,KAAK,uBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,UACNxN,KAAK,qBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,UACNxN,KAAK,qBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,UACNxN,KAAK,qBAET,cAAC,GAAD,CACIkP,QAAQ,QACR1B,MAAM,YACNxN,KAAK,sBAET,uBAAOH,KAAK,SAAS8M,MAAM,OAAOxB,SAAUsB,EAAOG,wBCnHzEgE,G,kLAGE9H,KAAKtB,MAAMqJ,2BAA2B/H,KAAKtB,MAAMnG,U,6CAGjDyH,KAAKtB,MAAMsJ,kC,+BAGX,OAAO,mCAEEhI,KAAKtB,MAAMoI,QAEN,cAAC,GAAD,CACEe,oBAAqB7H,KAAKtB,MAAMuJ,0BAChCnB,QAAS9G,KAAKtB,MAAMoI,UAHtB,W,GAZU5G,IAAMC,WA4BvBvC,eACXwC,IACAC,aAPkB,SAACxJ,GAAD,MAA2B,CAC7CiQ,QAASjQ,EAAMqG,eAAe4J,QAC9BvO,OAAQ1B,EAAM0D,YAAYhC,UAKD,CACrB0P,8BACAF,+BACAC,oCAEJ5D,KAPWxG,CASdkK,ICzCKI,GAAoBhI,IAAMiI,MAAK,kBAAM,iCACrCC,GAAmBlI,IAAMiI,MAAK,kBAAM,iCAQpCE,G,kLAGFrI,KAAKtB,MAAM4J,kB,+BAIX,OAAKtI,KAAKtB,MAAM3B,YAEd,mCACE,sBAAKmB,UAAU,cAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACE,cAAC,IAAD,CAAOqK,KAAK,WAAWC,OAAQ9B,GAAawB,MAC5C,cAAC,IAAD,CAAOK,KAAK,oBAAoBC,OAAQ9B,GAAa0B,MACrD,cAAC,IAAD,CAAOG,KAAK,iBAAiBC,OAAQ9B,GAAa0B,MAClD,cAAC,IAAD,CAAOK,OAAK,EAACF,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACzC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,eAbP,cAACtE,GAAA,EAAD,Q,GAPtBhE,IAAMC,WAgCpBuI,GAAgB9K,YAClBwC,IACAC,aANsB,SAACxJ,GAAD,MAA2B,CACjDkG,YAAalG,EAAM0G,WAAWR,eAKL,CAAEuL,czBxBA,kBAAkB,SAAC1N,GAC5C,IAAI+N,EAAmB/N,EAASiC,KAChC+L,QAAQC,IAAI,CAACF,IAAmBxQ,MAAK,WACjCyC,EAP8C,CAAE7D,KAAM+F,WyB0B1Cc,CAGlByK,IAUaS,GARD,WACZ,OAAO,cAAC,IAAD,CAAeC,SAAUC,kBAAzB,SACL,cAAC,IAAD,CAAUnL,MAAOA,EAAjB,SACE,cAAC6K,GAAD,SCzDKO,GAAqB,WAC9BC,IAASV,OAAQ,cAAC,GAAD,IACf1J,SAASC,eAAe,UAG5BkK,GAAmBpL,GACnBH,OAAOG,MAAQA,EAOf5C,K,mBCnBA3E,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,UAAY,wBAAwB,KAAO,mBAAmB,OAAS,qBAAqB,KAAO,mBAAmB,QAAU,wB,mBCAhND,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,SAAW,yBAAyB,UAAY,0BAA0B,WAAa,2BAA2B,gBAAkB,kC,2CCDrM,G,KAAA,IAA0B,uC,kBCY1B2N,IARG,WACd,OACI,qBAAKhG,UAAWC,IAAQgL,mBAAxB,SACI,qBAAKjL,UAAWC,IAAQiL,UAAW3J,IAAK2J,EAAWxJ,IAAI,kB,kWCS/DnJ,EAAe,CACf4S,MAAO,GACPC,YAAa,GACbxC,QAAS,KACTyC,WAAY,GACZC,cAAc,GAMLtM,EAAiB,WAAoE,IAAnErG,EAAkE,uDAA1DJ,EAAcK,EAA4C,uCAE7F,OAAQA,EAAOC,MACX,IAAK,mBACD,OAAO,2BAAKF,GAAZ,IAAmBiQ,QAAShQ,EAAOgQ,UAEvC,IAAK,qBACD,OAAO,2BACAjQ,GADP,IAEI0S,WAAYzS,EAAOyS,aAG3B,IAAK,oBACD,OAAO,2BAAK1S,GAAZ,IAAmBiQ,QAAQ,2BAAMjQ,EAAMiQ,SAAb,IAAsBhE,OAAQhM,EAAOgM,WAEnE,IAAK,eACD,IAAI2G,EAAU,CACVxS,GAAI,EACJI,SAAUP,EAAOO,SACjBqS,QAAS,KACTpG,SAAUxM,EAAOoD,MACjByP,WAAY,GAEhB,OAAO,2BACA9S,GADP,IAEIwS,MAAM,GAAD,mBAAMxS,EAAMwS,OAAZ,CAAmBI,MAGhC,IAAK,cACD,OAAO,2BACA5S,GADP,IAEIwS,MAAOxS,EAAMwS,MAAMtN,QAAO,SAAAxC,GAAI,OAAIA,EAAKtC,IAAMH,EAAO8S,YAG5D,IAAK,4BACD,OAAO,2BACA/S,GADP,IAEI2S,cAAe3S,EAAM2S,eAG7B,QACI,OAAO3S,IAMN2D,EACQ,SAACsM,GAAD,MAAoC,CAAE/P,KAAM,mBAAoB+P,YADxEtM,EAGY,SAAC+O,GAAD,MAA0B,CAAExS,KAAM,qBAAsBwS,eAHpE/O,EAKW,SAACsI,GAAD,MAA0B,CAAE/L,KAAM,oBAAqB+L,WALlEtI,EAOQ,iBAAO,CAACzD,KAAM,8BAUtBgR,EAA6B,SAAC8B,GAAD,8CACtC,WAAOjP,GAAP,eAAAzB,EAAA,sEACsBb,YAAeuR,GADrC,OACUzR,EADV,OAEIwC,EAASJ,EAAuBpC,EAAIC,OAFxC,2CADsC,uDAO7B2P,EAAgC,WACzC,OAAO,SAACpN,GACJA,EAASJ,EAAuB,SAI3BsP,EAA4B,SAACD,GAAD,8CACrC,WAAOjP,GAAP,eAAAzB,EAAA,sEACsBR,YAAckR,GADpC,OACUzR,EADV,OAEIwC,EAASJ,EAA2BpC,EAAIC,OAF5C,2CADqC,uDAO5B0R,EAA+B,SAACtR,GAAD,8CACxC,WAAOmC,GAAP,SAAAzB,EAAA,sEACsBX,YAAeC,GADrC,OAEgC,IAFhC,OAEYJ,KAAKwC,YACTD,EAASJ,EAA2B/B,IAH5C,2CADwC,uDAQ/BwP,EAA4B,SAAC/O,GAAD,8CACrC,WAAO0B,GAAP,SAAAzB,EAAA,sEACsBF,YAAwBC,GAD9C,yDADqC,uDAM5B8Q,EAAqC,SAACnR,GAAD,8CAC9C,WAAO+B,GAAP,eAAAzB,EAAA,sEACsBP,YAAcC,GADpC,OAEgC,KADtBT,EADV,QAEYC,KAAKwC,YACTD,EAASJ,EAA0BpC,EAAIC,KAAKA,KAAKyK,SAHzD,2CAD8C,uDAcrCmH,EAAoB,kBACwB,SAACrP,GACtDA,EAASJ,Q,qXC3IPjD,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAQNU,EAAiB,SAACC,GAC3B,OAAOhB,EAASW,IAAI,WAAaK,EAAQ,KAGhCC,EAAiB,SAACC,GAC3B,OAAOlB,EAASmB,IAAI,kBAAmB,CAAED,OAAQA,KAGxCE,EAAgB,SAACJ,GAC1B,OAAOhB,EAASW,IAAI,kBAAoBK,EAAQ,KAGvCK,EAAgB,SAACC,GAC1B,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBtB,EAASmB,IAAI,iBAAkBI,EAAU,CAC5ClB,QAAS,CACL,eAAgB,0BAKfqB,EAAuB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEb5B,EAASmB,IAAI,UAAWQ,GAFX,cAEzBd,EAFyB,yBAGxBA,GAHwB,gCAK/BgB,QAAQC,IAAR,MAL+B,yBAO/BD,QAAQC,IAAI,WAPmB,4EAAH,sDAoBvBK,EAAe,WACxB,OAAOnC,EAASW,IAAI,YAGXyB,EAAU,SAACC,EAAOC,GAA0C,IAAhCC,IAA+B,yDAAZC,EAAY,uCACpE,OAAOxC,EAASgC,KAAK,aAAc,CAAEK,QAAOC,WAAUC,aAAYC,aAGzDC,EAAW,WACpB,OAAOzC,EAASkC,OAAO,eAGdQ,EAAa,WACtB,OAAO1C,EAASW,IAAI,8B,gCCrET,QAA0B,2C,0JCK5BkM,EAAmB,SAACjE,GAAe,IACtC+J,EADqC,kDAGvC,WAAYxL,GAAQ,IAAD,8BACf,cAAMA,IACDA,MAAQA,EAFE,EAHoB,qDASnC,OAAKsB,KAAKtB,MAAMvE,WACT,cAACgG,EAAD,eAAeH,KAAKtB,QADQ,cAAC,IAAD,CAAUJ,GAAG,eATb,GACT4B,IAAMC,WA0BxC,OAR6BE,aALS,SAACxJ,GAAD,MAAY,CAC9CsD,WAAYtD,EAAM0D,YAAYJ,WAC9BC,WAAYvD,EAAM0D,YAAYH,WAC9BC,aAAcxD,EAAM0D,YAAYF,gBAIhC,CACIK,kBAAmBF,IAAQE,kBAC3BC,mBAAoBH,IAAQG,mBAC5BI,YALqBsF,CAO3B6J,K,8ICzBAC,EAAkC,yBAWpC1T,EAAkC,CAClCiJ,iBAAkB,IAGTlC,EAAgB,WAAmE,IAAlE3G,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCAC3F,OAAOA,EAAOC,MACV,KAAKoT,EACD,OAAO,2BAAKtT,GAAZ,IAAmB6I,iBAAkB5I,EAAO4I,mBAEhD,QACI,OAAO7I,IASNoJ,EAA2B,SAAC4J,GAAD,8CACpC,WAAOjP,GAAP,eAAAzB,EAAA,sEACsBb,YAAeuR,GADrC,OACUzR,EADV,OAEIwC,GAR4B8E,EAQCtH,EAAIC,KAAKyK,OAAOC,MAPtC,CAAChM,KAAMoT,EAAwBzK,sBAK1C,iCAN+B,IAACA,IAMhC,OADoC,wD,mBCnCxCpJ,EAAOC,QAAU,CAAC,iBAAmB,qCAAqC,cAAgB,oC,mBCA1FD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,wBAA0B,uCAAuC,aAAe,+B","file":"static/js/main.08769220.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__2qmHb\",\"preloader\":\"Preloader_preloader__3nzjs\"};","const POST_NEW_TEXT = 'POST_NEW_TEXT'\r\n\r\ntype newDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype newPostItemType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype initialStateType = {\r\n    dialogsData: Array<newDialogType>\r\n    messagesData: Array<newPostItemType>\r\n}\r\n\r\ntype actionType = {\r\n    type : typeof POST_NEW_TEXT\r\n    postText: string\r\n}\r\n\r\nlet initialState : initialStateType  = {\r\n    dialogsData: [],\r\n    messagesData: [],\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action : actionType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POST_NEW_TEXT:\r\n            let newDialog : newDialogType = {\r\n                id: 4,\r\n                name: 'Tema'\r\n            }\r\n            let newPostItem : newPostItemType = {\r\n                id: 4,\r\n                message: action.postText\r\n            }\r\n            return {\r\n                ...state,\r\n                dialogsData: [...state.dialogsData, newDialog],\r\n                messagesData: [...state.messagesData, newPostItem],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const postNewTextActionCreator = (postText : string) => {\r\n    return {\r\n        type: POST_NEW_TEXT,\r\n        postText: postText\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Music_contentColor__3tC_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaImg\":\"LoginForm_captchaImg__1M2-6\"};","import { profileType, settingsType, userType } from './../types/types';\r\nimport axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\ntype usersType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const getUsers = (\r\n    pageSize : number, \r\n    pageCount : number, \r\n    searchName : string = '', \r\n    friend : boolean | null\r\n    ) => {\r\n    return instance.get<usersType>(\r\n        `users?page=${pageCount}&count=${pageSize}&term=${searchName}` + (friend === null ? '' : `&friend=${friend}`), \r\n        {})\r\n    .then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\n\r\nexport const getUserProfile = (userId : number) => {\r\n    return instance.get<profileType>('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status : string) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId : number) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file : any) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings : settingsType) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId : number) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId : number) => {\r\n    return instance.delete('follow/' + userId, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\ntype logInVerificationType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get<logInVerificationType>('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email : string, password : string, rememberMe : boolean = true, captcha : string) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3jRL3\",\"item\":\"Nav_item__3Mn2D\",\"active\":\"Nav_active__10tEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__3P2GR\",\"formControl\":\"Login_formControl__2h8Kz\",\"alert\":\"Login_alert__3TE9q\"};","import { ThunkAction } from 'redux-thunk'\r\nimport { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/apiTS'\r\nimport { ActionsType, AppStateType } from './reduxStoreTS'\r\n\r\ntype initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoggedIn: boolean\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n    captchaImg: string\r\n}\r\n\r\n\r\nlet initialState : initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            } as initialStateType\r\n        case 'LOGGED_IN_TOGGLE':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case 'LOGGED_IN_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case 'CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionsType = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setUserDataAC : (userId : number | null, email : string | null, login : string | null, isLoggedIn : boolean) => ({\r\n            type: 'SET_USER_DATA',\r\n            data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }as const),\r\n    \r\n    LoggedInTogglegAC : (isLoggedIn : boolean) => ({\r\n            type: 'LOGGED_IN_TOGGLE',\r\n            isLoggedIn: isLoggedIn\r\n    } as const),\r\n    \r\n    LoggedInFetchingAC : (isFetching : boolean, confirmation : boolean) => ({\r\n            type: 'LOGGED_IN_FETCHING',\r\n            isFetching: isFetching,\r\n            confirmation: confirmation\r\n    } as const),\r\n    \r\n    captcha : (captchaImg : string) => ({\r\n        type: 'CAPTCHA',\r\n        captchaImg: captchaImg\r\n    } as const)\r\n}\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const logInUserThunkCreator = () : thunkType => async (dispatch) => {\r\n    dispatch(actions.LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(actions.setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(actions.LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email : string, password : string, rememberMe : boolean, captcha : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\nexport const logOut = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaThunk = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(actions.captcha(res.data.url))\r\n    }\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\r\n    friends: [\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    return stateCopy\r\n}\r\nexport default friendsReducer","import { userType } from './../types/types';\r\nimport { follow, unFollow, getUsers } from '../API/apiTS'\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { ActionsType, AppStateType } from './reduxStoreTS';\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 100,\r\n    pageCount: 1,\r\n    totalCount: 0,\r\n    isFetching: false,\r\n    followingProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const usersReducer = (state : initialStateType = initialState, action : actionTypes) : initialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case 'PAGE_SIZE':\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case 'PAGE_COUNT':\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        case 'TOTAL_COUNT':\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case 'TOGGLE_PRELOADER':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'TOGGLE_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionTypes = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    followAC : (userId : number) => ({ type: 'FOLLOW', userId } as const),\r\n\r\n    unfollowAC : (userId : number) => ({ type: 'UNFOLLOW', userId } as const),\r\n    \r\n    setUsersAC : (users : Array<userType>) => ({ type: 'SET_USERS', users } as const),\r\n\r\n    setFilter : (term : string, friend : null | boolean) => ({type: 'SET_FILTER' , payload : {term, friend}} as const),\r\n    \r\n    pageSizeAC : (pageSize : number) => ({ type: 'PAGE_SIZE', pageSize } as const),\r\n    \r\n    pageCountAC : (pageCount: number) => ({ type: 'PAGE_COUNT', pageCount } as const),\r\n    \r\n    totalCountAR : (totalCount : number) => ({ type: 'TOTAL_COUNT', totalCount } as const),\r\n    \r\n    togglePreloaderAC : (isFetching : boolean) => ({ type: 'TOGGLE_PRELOADER', isFetching } as const),\r\n    \r\n    toggleFollowingProgressAC : (followingProgress : boolean, userId: number) => \r\n    ({ type: 'TOGGLE_FOLLOWING_PROGRESS', followingProgress, userId } as const),\r\n  \r\n}\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionTypes>\r\n\r\nexport const getUsersThunkCreator = \r\n(pageSize: number, pageCount : number, searchName: string, friend: boolean | null) : thunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.togglePreloaderAC(true))\r\n        dispatch(actions.pageCountAC(pageCount))\r\n        dispatch(actions.setFilter(searchName, friend))\r\n        const res = await getUsers(pageSize, pageCount, searchName, friend)\r\n        dispatch(actions.togglePreloaderAC(false))\r\n        dispatch(actions.setUsersAC(res.items))\r\n        dispatch(actions.totalCountAR(res.totalCount))\r\n    }\r\n\r\n\r\nexport const removeUsersThunkCreator = () : \r\nThunkAction<void, AppStateType, unknown, actionTypes> => {\r\n    return (dispatch) => {\r\n        dispatch(actions.setUsersAC([]))\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId : number) : thunkType =>\r\n\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n        const res = await follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.followAC(userId))\r\n        }\r\n        dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\nexport const unFollowThunkCreator = (userId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n        const res = await unFollow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.unfollowAC(userId))\r\n        }\r\n        dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserDataAC = (userId, email, login, isLoggedIn) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\nexport const LoggedInTogglegAC = (isLoggedIn) => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching, confirmation) => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\nexport const captcha = (captchaImg) => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { logInUserThunkCreator } from \"../OldReducers/authReducer\"\r\nimport { AppStateType } from \"./reduxStoreTS\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\n\r\ntype initialStateType = {\r\n    initialized : boolean\r\n}\r\n\r\ntype actionType = {\r\n    type: typeof INITIALIZED_SUCCSESS\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () : actionType => ({ type: INITIALIZED_SUCCSESS })\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionType>\r\n\r\nexport const initializeApp = () : thunkType => (dispatch) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux'\r\nimport { profileReducer } from './profileReducerTypescript'\r\nimport { dialogsReducer } from './dialogsReducerTypescript'\r\nimport { friendsReducer } from '../OldReducers/friendsReducer'\r\nimport { usersReducer } from './usersReducerTypescript'\r\nimport { authReducer } from './authReducerTypescript'\r\nimport { appReducer } from './appReducerTypescript'\r\nimport { headerReducer } from './HeaderReducerTS'\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type ActionsType<T> = T extends {[key: string] : (...args: any[]) => infer U } ? U : never\r\n\r\n/* export type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A> */\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport classes from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst Nav = function () {\r\n  return (\r\n    <div className={classes.nav}>\r\n      \r\n      <nav >\r\n        <div className={classes.item}>\r\n          <NavLink to='/Profile/' activeClassName={classes.active}>My Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Users' activeClassName={classes.active}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\nexport default Nav ","import React from 'react'\r\nimport classes from './Music.module.css'\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={classes.contentColor}>\r\n            <h1>\r\n                Music\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport defaultAvatar from '../../assets/defaultAvatar.png'\r\nimport { headerPropsType } from '../../types/types'\r\n\r\n\r\n\r\nconst Header: React.FC<headerPropsType> = (props) => {\r\n\r\n    \r\n    const logout = () => {\r\n        props.logOut()\r\n    }\r\n\r\n    let userSettings = document.getElementById('profileSettings')\r\n\r\n    const showUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'block';\r\n    }\r\n    const hideUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isLoggedIn ?\r\n                    <div\r\n                        onMouseOver={showUserSettingsContainer}\r\n                        onMouseOut={hideUserSettingsContainer}>\r\n\r\n                        <div\r\n                            className={classes.userInfo}>\r\n                            <div className={classes.userLogin}>\r\n                                <div><span>{props.login}</span></div>\r\n                            </div>\r\n                            <NavLink to='/Profile'>\r\n                                <div className={classes.userAvatar}>\r\n                                    <img src={props.userProfilePhoto || defaultAvatar} alt=\"User avatar\" />\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div id='profileSettings' className={classes.profileSettings}>\r\n                            <div>\r\n                                <button onClick={logout}>Log out</button>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/Settings'>\r\n                                    <button onClick={hideUserSettingsContainer} >\r\n                                        Profile settings\r\n                                </button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : <NavLink to='/Login'> <button>Login</button></NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './HeaderTS'\r\nimport { logOut } from '../../redux/authReducerTypescript'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport { getUserProfilePhotoThunk } from '../../redux/HeaderReducerTS';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { headerPropsType } from '../../types/types';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component<headerPropsType> {\r\n\r\n    componentDidMount() { \r\n        this.props.getUserProfilePhotoThunk(this.props.userId)\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state : AppStateType) => ({\r\n    isLoggedIn: state.authReducer.isLoggedIn,\r\n    login: state.authReducer.login,\r\n    isFetching: state.authReducer.isFetching,\r\n    userId: state.authReducer.userId,\r\n    userProfilePhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, { logOut, getUserProfilePhotoThunk })\r\n)(HeaderContainer) ","import React from 'react'\r\nimport classes from './PageButton.module.css'\r\nimport { propsType } from './PaginatorTS'\r\nimport cn from 'classnames'\r\n\r\ninterface PageButtonProps extends propsType {\r\n    button: number\r\n}\r\n\r\nconst PageButton = (props: PageButtonProps) => {\r\n\r\n    const switchPage = () => {\r\n        props.removeUsers()\r\n        props.getUsers(props.pageSize, props.button, '', null)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button\r\n                    key={props.button}\r\n                    className={cn({\r\n                        [classes.checkedButton] : props.button === props.pageCount\r\n                    })}\r\n                    onClick={switchPage}>\r\n                    {props.button}\r\n                </button>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PageButton","import React, { useState } from 'react'\r\nimport PageButtonTS from './PageButtonTS'\r\nimport classes from './PageButton.module.css'\r\n\r\nexport type propsType = {\r\n    pageSize: number\r\n    totalCount: number\r\n    pageCount: number\r\n    getUsers: (\r\n        pageSize: number,\r\n        button: number,\r\n        searchName: string,\r\n        friend: boolean | null\r\n    ) => any\r\n    removeUsers: () => any\r\n}\r\n\r\nconst Paginator : React.FC<propsType> = (props) => {\r\n\r\n    const buttonsPortion : number = 5\r\n    let touchedDecrementButton : boolean = false\r\n    const [initialPage, setInitialPage] = useState(props.pageCount)\r\n    const [numberOfShowedButtons] = useState(7)\r\n    const [decrementNumber, setDecrementNumber] = useState(buttonsPortion)\r\n    const [incrementNumber, setIncrementNumber] = useState(buttonsPortion)\r\n    const numberOfPageButtons = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n\r\n    const incrementInitialPage = () => {\r\n        setInitialPage(initialPage + incrementNumber)\r\n    }\r\n\r\n    const decrementInitialPage = () => {\r\n        setInitialPage(initialPage - decrementNumber)\r\n        touchedDecrementButton = true\r\n        if (touchedDecrementButton && decrementNumber !== buttonsPortion) setDecrementNumber(buttonsPortion)\r\n\r\n    }\r\n\r\n    const createButtonsArray = () : Array<number> => {\r\n        let buttonsInitializeArray : Array<number> = []\r\n        for (let i = initialPage; i < numberOfPageButtons + 1; i++) {\r\n            buttonsInitializeArray.push(i)\r\n        }\r\n\r\n        if (initialPage === 1) {\r\n            return buttonsInitializeArray\r\n        }\r\n        else if (initialPage - decrementNumber < 0) {\r\n            setDecrementNumber((decrementNumber - 1) + (initialPage - decrementNumber))\r\n        }\r\n\r\n        return buttonsInitializeArray\r\n    }\r\n\r\n    let buttons = createButtonsArray().map(function (button) {\r\n        if (button > initialPage + numberOfShowedButtons - 1) {\r\n            return\r\n        }\r\n        return <PageButtonTS\r\n            button={button}\r\n            pageSize={props.pageSize}\r\n            getUsers={props.getUsers}\r\n            pageCount={props.pageCount}\r\n            totalCount={props.totalCount}\r\n            removeUsers={props.removeUsers}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={classes.buttonsContainer}>\r\n            {initialPage === 1\r\n                ? null\r\n                : <div>\r\n                    <button onClick={decrementInitialPage}>назад</button>\r\n                </div>}\r\n            {buttons}\r\n            {numberOfPageButtons - incrementNumber <= initialPage\r\n                ? null\r\n                : <div>\r\n                    <button onClick={incrementInitialPage}>Вперед</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from 'react'\r\nimport classes from './User.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype userType = {\r\n    key: number\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photo: string | null\r\n    followed: boolean\r\n    followingProgress: Array<number>\r\n    followThunkCreator: (id: number) => void\r\n    unFollowThunkCreator: (id: number) => void\r\n}\r\n\r\nconst User = (props : userType) => {\r\n\r\n    let {\r\n        id,\r\n        photo,\r\n        followed,\r\n        followingProgress,\r\n        unFollowThunkCreator,\r\n        followThunkCreator,\r\n        name,\r\n        status\r\n    } = props\r\n\r\n    let slicedStatus = null\r\n\r\n    if (status && status.length > 50) {\r\n        slicedStatus = status.slice(1,50) + '...'\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.logoBlock}>\r\n                <div>\r\n                    <NavLink to={'/Users/' + id} >\r\n                        <img src={photo == null ? defaultAvatar : photo} alt=\"UserPhoto\" />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            unFollowThunkCreator(id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            followThunkCreator(id)\r\n                        }}>Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div className={classes.infoBlock}>\r\n                <div className={classes.name}>{name}</div>\r\n                <div className={classes.status}>{slicedStatus || status}</div>\r\n                <div className={classes.country}>Belarus<i>(hardcode)</i>,</div>\r\n                <div className={classes.city}>Bralaw<i>(hardcode)</i></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './reduxStoreTS'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state : AppStateType) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state : AppStateType) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state : AppStateType) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state : AppStateType) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state : AppStateType) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state : AppStateType) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state : AppStateType) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state : AppStateType) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state : AppStateType) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state : AppStateType) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state : AppStateType) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport PaginatorTS from './Paginator/PaginatorTS'\r\nimport User from './User/UserTS'\r\nimport classes from './Users.module.css'\r\nimport { usersPropsType } from '../../types/types'\r\nimport { useSelector } from 'react-redux'\r\nimport { usersSelectors } from '../../redux/selectorsTS'\r\n\r\n\r\nconst UsersTS: React.FC<usersPropsType> = (props) => {\r\n\r\n    let users = props.users.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        name={user.name}\r\n        status={user.status}\r\n        photo={user.photos.small}\r\n        followed={user.followed}\r\n        followingProgress={props.followingProgress}\r\n        followThunkCreator={props.followThunkCreator}\r\n        unFollowThunkCreator={props.unFollowThunkCreator}\r\n    />)\r\n\r\n    const totalUsersCount = useSelector(usersSelectors.getTotalCount)\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n            \r\n            <div>\r\n                {users}\r\n            </div>\r\n            <PaginatorTS\r\n                pageSize={props.pageSize}\r\n                totalCount={totalUsersCount}\r\n                getUsers={props.getUsers}\r\n                pageCount={props.pageCount}\r\n                removeUsers={props.removeUsers}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default UsersTS","import { Field, Form, Formik } from 'formik'\r\nimport classes from './Users.module.css'\r\n\r\ntype SearchFormPropsType = {\r\n    getUsers: (pageSize: number, pageCount: number, searchName: string, friend: boolean | null) => Promise<void>\r\n    removeUsers: () => Promise<void>\r\n    pageSize: number\r\n    pageCount: number\r\n    isFetching: boolean\r\n}\r\n\r\nconst SearchForm = (props: SearchFormPropsType) => {\r\n    \r\n    const onSubmit = (values: initialValuesType) => {\r\n        props.removeUsers()\r\n        async function searchUsers() {\r\n            await  props.getUsers(props.pageSize, 1, values.userName, values.friend)\r\n        }\r\n        return searchUsers()\r\n    }\r\n\r\n    const initialValues = {\r\n        userName: '',\r\n        friend: null\r\n    }\r\n\r\n    type initialValuesType = typeof initialValues\r\n\r\n    return (\r\n        <div className={classes.searchModule}>\r\n            <Formik initialValues={initialValues} onSubmit={onSubmit} validateOnChange={false}>\r\n                {\r\n                    formik => {\r\n                        console.log('formik: ', formik)\r\n                        return <Form>\r\n                            <Field\r\n                                as='input'\r\n                                name='userName'\r\n                            />\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Friends</option>\r\n                                <option value=\"false\">Not friends</option>\r\n                            </Field>\r\n                            <input type='submit' value='search' disabled={formik.isSubmitting} />\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\nimport UsersTS from './UsersTS';\r\nimport { usersPropsType } from '../../types/types'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport SearchForm from './SearchForm'\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    actions,\r\n    getUsersThunkCreator,\r\n    followThunkCreator,\r\n    unFollowThunkCreator,\r\n    removeUsersThunkCreator,\r\n} from '../../redux/usersReducerTypescript'\r\nimport { compose } from 'redux';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect'\r\nimport {\r\n    getUsersSuper,\r\n    usersSelectors\r\n} from '../../redux/selectorsTS'\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\ninterface PropsType extends usersPropsType {\r\n    getUsersThunkCreator: (\r\n        pageSize: number,\r\n        pageCount: number,\r\n        searchName: string,\r\n        friend: boolean | null) => Promise<void>\r\n    removeUsersThunkCreator: () => Promise<void>\r\n}\r\n\r\nclass UsersInnerContainer extends React.Component<PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.pageSize, this.props.pageCount, '', null)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUsersThunkCreator()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.users.length) {\r\n            return <>\r\n                <SearchForm\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    pageSize={this.props.pageSize}\r\n                    pageCount={this.props.pageCount}\r\n                    isFetching={this.props.isFetching}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                />\r\n                <Preloader />\r\n            </>\r\n        }\r\n        return (\r\n            <>\r\n            \r\n                <SearchForm\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    pageSize={this.props.pageSize}\r\n                    pageCount={this.props.pageCount}\r\n                    isFetching={this.props.isFetching}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                />\r\n                <UsersTS\r\n                    users={this.props.users}\r\n                    pageSize={this.props.pageSize}\r\n                    followingProgress={this.props.followingProgress}\r\n                    followThunkCreator={this.props.followThunkCreator}\r\n                    unFollowThunkCreator={this.props.unFollowThunkCreator}\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                    pageCount={this.props.pageCount}\r\n                    isFetching={this.props.isFetching}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: usersSelectors.getPageSize(state),\r\n        pageCount: usersSelectors.getPageCount(state),\r\n        totalCount: usersSelectors.getTotalCount(state),\r\n        isFetching: usersSelectors.getIsFetching(state),\r\n        followingProgress: usersSelectors.getFollowingProgrress(state),\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        pageSizeAC: actions.pageSizeAC,\r\n        getUsersThunkCreator,\r\n        removeUsersThunkCreator,\r\n        followThunkCreator,\r\n        unFollowThunkCreator,\r\n        pageCountAC: actions.pageCountAC,\r\n    }),\r\n    LoggedInRedirect\r\n)(UsersInnerContainer)","import React from 'react' \r\nimport classes from './Login.module.css'\r\n\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div className={classes.error}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError","import React from 'react' \r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikCheckbox = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <div>\r\n                                    <label htmlFor={option.value}>{option.key}</label>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value.length === 2} />\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikCheckbox","import React from 'react'\r\nimport DateView from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikDatePicker = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field }) => {\r\n                        const { setFieldValue } = form\r\n                        const { value } = field\r\n                        return <DateView\r\n                            id={name}\r\n                            {...field}\r\n                            {...rest}\r\n                            selected={value}\r\n                            onChange={val => setFieldValue(name, val)} />\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikDatePicker","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Input = (props) => {\r\n    return <div className={classes.formControl}>\r\n        <label htmlFor={props.name}>{props.label}</label>\r\n        <div>\r\n            <Field\r\n                className={props.className}\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                autocomplete={props.autocomplete} />\r\n            <ErrorMessage name={props.name} component={TextError} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst FormikInput = (props) => {\r\n    const {\r\n        label,\r\n        name,\r\n        email,\r\n        password,\r\n        touchedEmail,\r\n        touchedPassword,\r\n        type\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Input className={cn({\r\n                [classes.alert]: touchedEmail && !email || touchedPassword && !password\r\n            })}\r\n                name={name}\r\n                label={label}\r\n                type={type} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikInput","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikRadioButtons = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <label htmlFor={name}>{label}</label>\r\n            <div></div>\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value === option.value} />\r\n                                        <label htmlFor={option.value}>{option.key}</label>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikRadioButtons","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikSelect = (props) => {\r\n    const { label, name, options, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='select' id={name} name={name} {...rest}>\r\n                {\r\n                    options.map(option => {\r\n                        return <option key={option.value} value={option.value}>\r\n                            {option.key}\r\n                        </option>\r\n                    })\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikSelect","import React from 'react' \r\nimport { Field, ErrorMessage} from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikTextArea = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='textarea' id={name} name={name} {...rest}/>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikTextArea","import FormikCheckbox from './FormikCheckbox'\r\nimport FormikDatePicker from './FormikDatePicker'\r\nimport FormikInput from './FormikInput'\r\nimport FormikRadioButtons from './FormikRadioButtons'\r\nimport FormikSelect from './FormikSelect'\r\nimport FormikTextArea from './FormikTextArea'\r\n\r\nconst FormikControl = (props) => {\r\n    const { control, ...rest } = props\r\n    switch (control) {\r\n        case 'input': return <FormikInput {...rest} />\r\n        case 'textarea': return <FormikTextArea {...rest} />\r\n        case 'select': return <FormikSelect {...rest} />\r\n        case 'radio': return <FormikRadioButtons {...rest} />\r\n        case 'checkbox': return <FormikCheckbox {...rest} /> \r\n        case 'date': return <FormikDatePicker {...rest} />\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport default FormikControl","import React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { login } from '../../redux/authReducerTypescript'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './LoginForm.module.css'\r\nimport { AppStateType } from '../../redux/reduxStoreTS'\r\n\r\ntype loginPropsType = {\r\n    isLoggedIn: boolean\r\n    captchaImg: string | undefined\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst LoginForm : React.FC<loginPropsType> = (props) => {\r\n\r\n    const { login, isLoggedIn, captchaImg } = props\r\n\r\n    type initialValuesType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha: string\r\n    }\r\n\r\n    const initialValues : initialValuesType = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email format').required('Enter email'),\r\n        password: Yup.string().required('Enter password'),\r\n    })\r\n\r\n    const onSubmit = (values : initialValuesType) => {\r\n        login(values.email, values.password, values.rememberMe, values.captcha)\r\n    }\r\n\r\n    if (isLoggedIn) { return <Redirect to={'/Profile'} /> } // Проверяем, если мы залогинены, то редиректим на профиль\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <h1>Login</h1>\r\n                        <FormikControl\r\n                            email={formik.values.email}\r\n                            touchedEmail={formik.touched.email}\r\n                            control='input'\r\n                            type='email'\r\n                            label='Email'\r\n                            name='email' />\r\n                        <FormikControl\r\n                            password={formik.values.password}\r\n                            touchedPassword={formik.touched.password}\r\n                            control='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            name='password'\r\n                        />\r\n                        <p></p>\r\n                        <input type='submit' disabled={!formik.isValid} value={'Login'} />\r\n                        {!captchaImg ?\r\n                            null\r\n                            : <div className={classes.captchaImg}>\r\n                                <p></p>\r\n                                <img src={captchaImg} alt=\"captcha\" />\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    label='Enter your captcha'\r\n                                    name='captcha'\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </Form>\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\nexport let mapStateToProps = (state : AppStateType) => {\r\n    return {\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        captchaImg: state.authReducer.captchaImg\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm)","import React from 'react'\r\nimport Preloader from '../components/Common/Preloader/Preloader'\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props}/>\r\n        </React.Suspense> \r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { profileType, settingsType } from '../../types/types'\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    sendProfileSettings: (values : any) => void\r\n}\r\n\r\nconst Settings : React.FC<propsType> = (props) => {\r\n    \r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profile\r\n    const { facebook, github, instagram, mainLink, twitter, vk, website, youtube } = props.profile.contacts\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        contacts: Yup.object().shape({\r\n            github: Yup.string().url('Invalid URL!'),\r\n            vk: Yup.string().url('Invalid URL!'),\r\n            facebook: Yup.string().url('Invalid URL!'),\r\n            instagram: Yup.string().url('Invalid URL!'),\r\n            twitter: Yup.string().url('Invalid URL!'),\r\n            website: Yup.string().url('Invalid URL!'),\r\n            youtube: Yup.string().url('Invalid URL!'),\r\n            mainLink: Yup.string().url('Invalid URL!')\r\n        })\r\n    })\r\n\r\n\r\n    const initialValues : settingsType = {\r\n        fullName: fullName,\r\n        aboutMe: aboutMe,\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n    }\r\n\r\n    const onSubmit = (values : settingsType) => {\r\n        async function sendProfileSettings() {\r\n            await props.sendProfileSettings(values)\r\n        }\r\n        return sendProfileSettings()\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n                validateOnChange={false}\r\n                >\r\n                {\r\n                    formik => {\r\n                        return <Form>\r\n                            <h1>Profile settings</h1>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Full Name'\r\n                                name='fullName'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='About me'\r\n                                name='aboutMe'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='My skills'\r\n                                name='lookingForAJobDescription'\r\n                            />\r\n                            <div>\r\n                                <p></p>\r\n                                <Field\r\n                                    type='checkbox'\r\n                                    name='lookingForAJob'\r\n                                />\r\n                                <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n                            </div>\r\n                            <h3>\r\n                                Contacts\r\n                            </h3>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Github'\r\n                                name='contacts.github'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='vk'\r\n                                name='contacts.vk'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Facebook'\r\n                                name='contacts.facebook'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Instagram'\r\n                                name='contacts.instagram'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Twitter'\r\n                                name='contacts.twitter'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Website'\r\n                                name='contacts.website'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Youtube'\r\n                                name='contacts.youtube'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Main link'\r\n                                name='contacts.mainLink'\r\n                            />\r\n                            <input type='submit' value='save' disabled={formik.isSubmitting}/>\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { updateUserProfileSettings, getUserProfileThunkCreator, removeUserProfileThunkCreator } from '../../redux/profileReducerTypescript'\r\nimport { connect } from \"react-redux\";\r\nimport Settings from './SettingsTS';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { profileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\n\r\ntype propsType = {\r\n    userId: number\r\n    profile: profileType\r\n    getUserProfileThunkCreator: (userId : number) => void\r\n    removeUserProfileThunkCreator: () => void\r\n    updateUserProfileSettings: () => void\r\n}\r\n\r\nclass SettingsContainer extends React.Component<propsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserProfileThunkCreator(this.props.userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        return <>\r\n            {\r\n                !this.props.profile\r\n                    ? null\r\n                    : <Settings\r\n                        sendProfileSettings={this.props.updateUserProfileSettings}\r\n                        profile={this.props.profile}\r\n                    />\r\n            }\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, \r\n    connect(mapStateToProps, { \r\n        updateUserProfileSettings, \r\n        getUserProfileThunkCreator, \r\n        removeUserProfileThunkCreator \r\n    }),\r\n    LoggedInRedirect\r\n) \r\n(SettingsContainer) ","import React from 'react'\nimport './App.css'\nimport { Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux'\nimport { initializeApp } from './redux/appReducerTypescript'\nimport { compose } from 'redux';\nimport store, { AppStateType } from './redux/reduxStoreTS'\nimport Nav from './components/Navbar/NavTS';\nimport Music from './components/Music/Music';\nimport HeaderContainer from './components/Header/HeaderContainerTS';\nimport UsersInnerContainer from './components/Users/UsersInnerContainerTS';\nimport LoginForm from './components/Login/LoginFormTS';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport SettingsContainer from './components/Settings/SettingsContainerTS';\nconst DialogContainerTS = React.lazy(() => import('./components/Dialogs/DialogContainerTS'))\nconst ProfileContainer = React.lazy(() => import('./components/NewProfile/ProfileContainerTS'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  \n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <>\n        <div className='app-wrapper'>\n          <HeaderContainer />\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Route path='/Dialogs' render={WithSuspense(DialogContainerTS)}/>\n            <Route path='/Profile/:userId?' render={WithSuspense(ProfileContainer)}/>\n            <Route path='/Users/:userId' render={WithSuspense(ProfileContainer)} />\n            <Route exact path='/Users' render={() => <UsersInnerContainer />} />\n            <Route path='/Music' render={() => <Music />} />\n            <Route path='/Settings' render={() => <SettingsContainer />} />\n            <Route path='/Login' render={() => <LoginForm />} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state : AppStateType) => ({\n  initialized: state.appReducer.initialized\n})\n\nlet AppWithRouter = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\nlet MainApp = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppWithRouter />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStoreTS'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './AppTS';\n \n\nexport let rerenderEntireTree = () => {\n  ReactDOM.render( <MainApp />,\n    document.getElementById('root')\n  );\n}\nrerenderEntireTree(store)\nwindow.store = store\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Kdvq\",\"logoBlock\":\"User_logoBlock__xhS7H\",\"infoBlock\":\"User_infoBlock__3O4VD\",\"name\":\"User_name__3sCD6\",\"status\":\"User_status__1ssRJ\",\"city\":\"User_city__1xMuO\",\"country\":\"User_country__1_5tH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__eA5PG\",\"login\":\"Header_login__2clXM\",\"userInfo\":\"Header_userInfo__UZJGJ\",\"userLogin\":\"Header_userLogin__1B_UB\",\"userAvatar\":\"Header_userAvatar__8bsmo\",\"profileSettings\":\"Header_profileSettings__3xpjx\"};","export default __webpack_public_path__ + \"static/media/loaderSVG.2997ce57.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/loaderSVG.svg'\r\nimport classes from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.preloaderContainer}>\r\n            <img className={classes.preloader} src={preloader} alt='preloader'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/apiTS'\r\n\r\nimport {\r\n    photosType,\r\n    postsType,\r\n    profileType\r\n} from '../types/types'\r\nimport { ActionsType, AppStateType } from './reduxStoreTS';\r\n\r\nlet initialState = {\r\n    posts: [] as Array<postsType>,\r\n    newPostText: '',\r\n    profile: null as profileType | null,\r\n    userStatus: '',\r\n    loadingPhoto: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_USER_PROFILE': {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case 'APDATE_USER_STATUS': {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            } \r\n        }\r\n        case 'UPDATE_USER_PHOTO': {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as profileType}\r\n        }\r\n        case 'ADD_NEW_POST': {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost] as Array<postsType>\r\n            }\r\n        }\r\n        case 'DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case 'LOADING_NEW_PROFILE_PHOTO': {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype actionsType = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setUserProfile : (profile : profileType | null ) => ({ type: 'SET_USER_PROFILE', profile } as const),\r\n\r\n    updateUserStatusAC : (userStatus : string) => ({ type: 'APDATE_USER_STATUS', userStatus } as const),\r\n    \r\n    updateUserPhotoAC : (photos : photosType) => ({ type: 'UPDATE_USER_PHOTO', photos } as const),\r\n    \r\n    loadingPhotoAC : () => ({type: 'LOADING_NEW_PROFILE_PHOTO'} as const),\r\n    \r\n    addNewPostAC : (postText:string, login:string) => ({ type: 'ADD_NEW_POST', postText, login } as const),\r\n    \r\n    deletePostAC : (postId:number) => ({ type: 'DELETE_POST', postId } as const)\r\n}\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const getUserProfileThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(actions.setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () : ThunkAction<void, AppStateType, unknown, actionsType> => {\r\n    return (dispatch) => {\r\n        dispatch(actions.setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(actions.updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status : string) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file : File) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText : string, login : string) : \r\nThunkAction<void, AppStateType, unknown, actionsType> => \r\n(dispatch) => {\r\n    dispatch(actions.addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () : \r\nThunkAction<void, AppStateType, unknown, actionsType> => (dispatch : any) => {\r\n    dispatch(actions.loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\nexport const getUsers = (pageSize, pageCount) => {\r\n    return instance.get('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\nexport const getUserProfile = (userId) => {\r\n    return instance.get('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId) => {\r\n    return instance.delete('follow/' + userId, {}, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email, password, rememberMe = true, captcha) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","export default __webpack_public_path__ + \"static/media/defaultAvatar.0334f4b4.png\";","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from 'react-redux'\r\nimport { actions, logOut } from '../redux/authReducerTypescript'\r\n\r\nexport const LoggedInRedirect = (Component) => {\r\n    class RedirectedComponent extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.props = props\r\n        }\r\n\r\n        render() {\r\n            if (!this.props.isLoggedIn) return <Redirect to='/Login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsLoggedInRedirect = (state) => ({\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        isFetching: state.authReducer.isFetching,\r\n        confirmation: state.authReducer.confirmation,\r\n    })\r\n    let LogInRedirectComponent = connect(\r\n        mapStateToPropsLoggedInRedirect,\r\n        {\r\n            LoggedInTogglegAC: actions.LoggedInTogglegAC,\r\n            LoggedInFetchingAC: actions.LoggedInFetchingAC,\r\n            logOut\r\n        }\r\n    )(RedirectedComponent)\r\n    return LogInRedirectComponent\r\n}\r\n\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n} from '../API/apiTS'\r\nimport { AppStateType } from './reduxStoreTS';\r\n\r\nconst SET_USER_PROFILE_PHOTO : string = 'SET_USER_PROFILE_PHOTO';\r\n\r\nexport type initialStateType = {\r\n    userProfilePhoto: string\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    userProfilePhoto: string\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    userProfilePhoto: '',\r\n}\r\n\r\nexport const headerReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto : string) : \r\nactionType => ({type: SET_USER_PROFILE_PHOTO, userProfilePhoto})\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionType>\r\n\r\nexport const getUserProfilePhotoThunk = (UserId : number) : thunkType => \r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"PageButton_buttonsContainer__135jv\",\"checkedButton\":\"PageButton_checkedButton__2t6J4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Users_contentColor__2Kips\",\"addUsersButtonContainer\":\"Users_addUsersButtonContainer__3tC_O\",\"searchModule\":\"Users_searchModule__2XlsX\"};"],"sourceRoot":""}