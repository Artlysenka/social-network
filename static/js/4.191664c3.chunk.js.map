{"version":3,"sources":["components/NewProfile/Posts/PostItem/PostItem.module.css","components/NewProfile/ProfileInfo/ProfileInfo.module.css","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/NewProfile/Posts/PostItem/PostItem.jsx","components/NewProfile/Posts/AddNewPost/AddNewPost.jsx","components/NewProfile/Posts/AddNewPost/AddNewPostContainer.jsx","components/NewProfile/Posts/Posts.jsx","components/NewProfile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","components/NewProfile/ProfileInfo/ProfileInfo.jsx","components/NewProfile/Profile.jsx","components/NewProfile/ProfileContainer.jsx"],"names":["module","exports","PostItem","props","className","classes","postsContainer","avatar","src","userPhoto","defaultAvatar","alt","userName","postText","likesCount","AddNewPost","posts","map","post","id","userAva","initialValues","postMessage","onSubmit","values","onSubmitProps","addNewPostThunkCreator","login","resetForm","formik","htmlFor","as","name","value","type","AddNewPostContainer","connect","state","postsSelectors","getPosts","profile","getProfile","newPostText","getNewPostsText","getLogin","headerReducer","userProfilePhoto","addNewPostAC","Posts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","activateStatusChange","loggedInUserId","randomUserId","autoFocus","onBlur","upDateStatus","onChange","elem","currentTarget","onMouseLeave","document","getElementById","style","display","onMouseEnter","onClick","changeStatus","ProfileInfo","loadingPhotoThunk","loadingPhoto","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","profileInfo","fullName","aboutMe","profileInfoContainer","onMouseOver","event","onMouseOut","profilePictureContainer","photos","large","console","log","addPhotoButtonContainer","target","files","length","uploadUserPhoto","a","upDatePhoto","getNewUserPhotoFromServer","cn","loadingPhotoContainer","hideLoading","href","lookingForAJob","lookingForAJobDescription","modal","modalContainer","hideModalButton","Profile","userId","updatePhoto","getUserProfilePhoto","ProfileInnerContainer","this","match","params","getUserProfileThunkCreator","getUserStatusThunkCreator","removeUserProfileThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","getUserProfilePhotoThunk","Preloader","React","Component","compose","withRouter","profileReducer","userStatus","authReducer","LoggedInRedirect"],"mappings":"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","file":"static/js/4.191664c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"PostItem_postsContainer__1Sqqb\",\"avatar\":\"PostItem_avatar__1voR6\",\"userName\":\"PostItem_userName__2bW8A\",\"postText\":\"PostItem_postText__9Pj6u\",\"likesCount\":\"PostItem_likesCount__2Ngx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__-8ARQ\",\"contacts\":\"ProfileInfo_contacts__4AHRP\",\"profileInfo\":\"ProfileInfo_profileInfo__Vr2b1\",\"addPhotoButtonContainer\":\"ProfileInfo_addPhotoButtonContainer__3jXc8\",\"profilePictureContainer\":\"ProfileInfo_profilePictureContainer__36FKC\",\"loadingPhotoContainer\":\"ProfileInfo_loadingPhotoContainer__1-ztw\",\"hideLoading\":\"ProfileInfo_hideLoading__3NCLh\",\"modal\":\"ProfileInfo_modal__1O-kv\",\"modalContainer\":\"ProfileInfo_modalContainer__3lG6d\",\"hideModalButton\":\"ProfileInfo_hideModalButton__3oxH-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__3nqGG\",\"changeStatus\":\"ProfileStatus_changeStatus__4OetC\"};","import React from 'react'\r\nimport classes from './PostItem.module.css'\r\nimport defaultAvatar from '../../../../assets/defaultAvatar.png'\r\n\r\nconst PostItem = (props) => {\r\n    return (\r\n        <>\r\n         <div className={classes.postsContainer}>\r\n            <div className={classes.avatar}>\r\n                <img src={props.userPhoto || defaultAvatar} alt=\"UserAvatar\" />\r\n            </div>\r\n            <div className={classes.userName}>\r\n                {props.userName}\r\n            </div>\r\n            <div className={classes.postText}>\r\n                {props.postText}\r\n            </div>\r\n            <div className={classes.likesCount}>\r\n                <span>Likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nexport default PostItem","import React from 'react'\r\nimport PostItem from '../PostItem/PostItem'\r\nimport { Formik, Form, Field } from 'formik'\r\n\r\nconst AddNewPost = (props) => {\r\n    \r\n    let posts = props.posts.map(post => <PostItem\r\n        id={post.id}\r\n        postText={post.postText}\r\n        userAva={post.userAva}\r\n        userName={post.userName}\r\n        likesCount={post.likesCount}\r\n        key={post.id}\r\n        userPhoto={props.userPhoto}\r\n    />)\r\n\r\n    const initialValues = {\r\n        postMessage: ''\r\n    }\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        if (values.postMessage === '') return null\r\n        else {\r\n            props.addNewPostThunkCreator(values.postMessage, props.login)\r\n            onSubmitProps.resetForm()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n                    {\r\n                        formik => {\r\n                            return <Form>\r\n                                <h3>\r\n                                    <label htmlFor=\"postMessage\">Add post</label>\r\n                                </h3>\r\n                                <div></div>\r\n                                <Field as='textarea' name='postMessage' id='postMessage' value={formik.values.postMessage} />\r\n                                <div></div>\r\n                                <button type='submit'>Send</button>\r\n                            </Form>\r\n                        }\r\n                    }\r\n                </Formik>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewPost","import {connect} from 'react-redux'\r\nimport {  addNewPostAC, addNewPostThunkCreator } from '../../../../OldReducers/profileReducer'\r\nimport AddNewPost from './AddNewPost'\r\nimport { postsSelectors } from '../../../../OldReducers/selectors'\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\nposts: postsSelectors.getPosts(state),\r\nprofile: postsSelectors.getProfile(state),\r\nnewPostText: postsSelectors.getNewPostsText(state),\r\nlogin: postsSelectors.getLogin(state),\r\nuserPhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nconst AddNewPostContainer = connect(mapStateToProps, { addNewPostAC, addNewPostThunkCreator })(AddNewPost)\r\nexport default AddNewPostContainer","import React from 'react'\r\nimport AddNewPostContainer from './AddNewPost/AddNewPostContainer'\r\n\r\nconst Posts = (props) => {\r\n    return (\r\n        <AddNewPostContainer posts={props.posts}/>\r\n    )\r\n}\r\n\r\nexport default Posts","import React, { useEffect, useState } from 'react'\r\nimport classes from './ProfileStatus.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            setEditMode(true)\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    const deactivateStatusChange = () => {\r\n        setEditMode(false)\r\n        props.upDateStatus(status)\r\n    }\r\n    const onStatusChange = (elem) => {\r\n        setStatus(elem.currentTarget.value)\r\n    }\r\n    const showStatusChange = () => {\r\n        if (props.loggedInUserId === props.randomUserId) {\r\n            let statusChangeSpan = document.getElementById('statusChange')\r\n            statusChangeSpan.style.display = 'block'\r\n        }\r\n    }\r\n    const hideStatusChange = () => {\r\n        let statusChangeSpan = document.getElementById('statusChange')\r\n        statusChangeSpan.style.display = 'none'\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode ?\r\n                <div id='status-container' onMouseLeave={hideStatusChange} className={classes.status}>\r\n                    <div onMouseEnter={showStatusChange}>\r\n                    <span onClick={activateStatusChange}><b>Статус: </b> {props.status}</span>\r\n                    </div>\r\n                    <div id='statusChange' className={classes.changeStatus}>\r\n                        <span onClick={activateStatusChange}>change status</span>\r\n                    </div>\r\n                    <p></p>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onBlur={deactivateStatusChange}\r\n                        onChange={onStatusChange}\r\n                        type=\"text\"\r\n                        value={status} />\r\n                    <p></p>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\nimport cn from 'classnames'\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  const {\r\n    randomUserId,\r\n    loggedInUserId,\r\n    loadingPhotoThunk,\r\n    loadingPhoto,\r\n    profile,\r\n    status,\r\n    upDateStatus,\r\n  } = props\r\n\r\n  const {\r\n    facebook,\r\n    website,\r\n    vk,\r\n    twitter,\r\n    instagram,\r\n    youtube,\r\n    github,\r\n    mainLink\r\n  } = profile.contacts\r\n\r\n  const changeAvartarPhoto = (event) => {\r\n    if (event.target.files.length) {\r\n      loadingPhotoThunk()\r\n      async function uploadUserPhoto() {\r\n        await props.upDatePhoto(event.target.files[0])\r\n        props.getNewUserPhotoFromServer(props.loggedInUserId)\r\n        loadingPhotoThunk()\r\n      }\r\n      return uploadUserPhoto()\r\n    }\r\n  }\r\n\r\n  const showButton = (event) => {\r\n    if (randomUserId === loggedInUserId) {\r\n      let buttonContainer = document.getElementById('button-container')\r\n      buttonContainer.style.display = 'block'\r\n    }\r\n  }\r\n\r\n  const hideButton = (event) => {\r\n    if (randomUserId === loggedInUserId) {\r\n      let buttonContainer = document.getElementById('button-container')\r\n      buttonContainer.style.display = 'none'\r\n    }\r\n  }\r\n\r\n  const showModal = () => {\r\n    if (profile.photos.large) {\r\n      let modal = document.getElementById('modal')\r\n      modal.style.display = 'flex'\r\n    }\r\n    console.log(profile.photos.large)\r\n  }\r\n\r\n  const hideModal = () => {\r\n    let modal = document.getElementById('modal')\r\n    modal.style.display = 'none'\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div className={classes.profileInfo}>\r\n      <h1>{profile.fullName}</h1>\r\n      <div>\r\n        <ProfileStatusWithHooks\r\n          upDateStatus={upDateStatus}\r\n          status={status}\r\n          randomUserId={randomUserId}\r\n          loggedInUserId={loggedInUserId}\r\n        />\r\n      </div>\r\n      <div>\r\n        <span><b>Обо мне:</b> {profile.aboutMe}</span>\r\n        <p></p>\r\n      </div>\r\n      <div className={classes.profileInfoContainer}>\r\n\r\n        <div\r\n          onMouseOver={showButton}\r\n          onMouseOut={hideButton}\r\n          className={classes.profilePictureContainer}\r\n        >\r\n          <img onClick={showModal} alt='profilePic' src={profile.photos.large || defaultAvatar} />\r\n          <div id='button-container' className={classes.addPhotoButtonContainer}>\r\n            <input type={'file'} onChange={changeAvartarPhoto} />\r\n          </div>\r\n          <div className={cn(classes.loadingPhotoContainer, {\r\n            [classes.hideLoading]: !loadingPhoto\r\n          })}>\r\n            <div>\r\n              Loading photo...\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={classes.contacts}>\r\n          <ul>\r\n            <b>Контакты:</b>\r\n            <li>facebook: <span><a href={facebook}>{facebook}</a></span></li>\r\n            <li>website: <span><a href={website}>{website}</a></span></li>\r\n            <li>vk: <span><a href={vk}>{vk}</a></span></li>\r\n            <li>twitter: <span><a href={twitter}>{twitter}</a></span></li>\r\n            <li>instagram: <span><a href={instagram}>{instagram}</a></span></li>\r\n            <li>youtube: <span><a href={youtube}>{youtube}</a></span></li>\r\n            <li>github : <span><a href={github}>{github}</a></span></li>\r\n            <li>mainilnk: <span><a href={mainLink}>{mainLink}</a></span></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <b>Ищу работу:</b> {profile.lookingForAJob == true ? <span>Да</span> : <span>Нет</span>}\r\n          </li>\r\n          <li>\r\n            <b>Какую работу ищу:</b> <span>{profile.lookingForAJobDescription}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <hr />\r\n\r\n      <div id='modal' className={classes.modal}>\r\n        <div className={classes.modalContainer}>\r\n          <img src={profile.photos.large} alt=\"profile photo large\" />\r\n        </div>\r\n        <div className={classes.hideModalButton}>\r\n          <button onClick={hideModal}>close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileInfo ","import React from 'react';\r\nimport Posts from './Posts/Posts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo \r\n            randomUserId={props.profile.userId}\r\n            loggedInUserId={props.userId}\r\n            status={props.status} \r\n            profile={props.profile}\r\n            upDateStatus={props.upDateStatus}\r\n            upDatePhoto={props.updatePhoto}\r\n            getNewUserPhotoFromServer={props.getUserProfilePhoto}\r\n            loadingPhotoThunk={props.loadingPhotoThunk}\r\n            loadingPhoto={props.loadingPhoto}\r\n            />\r\n            {props.userId === props.profile.userId ?  <Posts posts={props.posts}/> : null}\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    removeUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    updateUserStatusThunkCreator,\r\n    uploadUserProfilePhotoThunkCreator,\r\n    loadingPhotoThunk\r\n} from \"../../OldReducers/profileReducer\";\r\nimport { getUserProfilePhotoThunk } from '../../OldReducers/headerRecuder'\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileInnerContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <Profile\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                posts={this.props.posts}\r\n                upDateStatus={this.props.updateUserStatusThunkCreator}\r\n                userId={this.props.userId}\r\n                updatePhoto={this.props.uploadUserProfilePhotoThunkCreator}\r\n                getUserProfilePhoto={this.props.getUserProfilePhotoThunk}\r\n                loadingPhotoThunk={this.props.loadingPhotoThunk}\r\n                loadingPhoto={this.props.loadingPhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profileReducer.profile,\r\n    posts: state.profileReducer.posts,\r\n    status: state.profileReducer.userStatus,\r\n    loadingPhoto: state.profileReducer.loadingPhoto,\r\n    userId: state.authReducer.userId,\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        removeUserProfileThunkCreator,\r\n        getUserStatusThunkCreator,\r\n        updateUserStatusThunkCreator,\r\n        uploadUserProfilePhotoThunkCreator,\r\n        getUserProfilePhotoThunk,\r\n        loadingPhotoThunk\r\n    }),\r\n    LoggedInRedirect,\r\n)(ProfileInnerContainer)"],"sourceRoot":""}