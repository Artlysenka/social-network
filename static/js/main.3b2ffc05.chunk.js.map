{"version":3,"sources":["components/Common/Preloader/Preloader.module.css","redux/headerRecuder.js","API/api.js","components/Music/Music.module.css","components/Users/Users.module.css","components/Login/LoginForm.module.css","redux/authReducer.js","components/Navbar/Nav.module.css","components/Common/FormControls/Login.module.css","reportWebVitals.js","redux/dialogsReducerTypescript.ts","redux/friendsReducer.js","redux/usersReducer.js","redux/authReducerTypescript.ts","redux/appReducerTypescript.ts","redux/myFirstTypescriptReducer.tsx","redux/reduxStore.js","redux/appReducer.js","components/Navbar/Nav.jsx","components/Music/Music.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Users/Paginator/PageButton.jsx","components/Users/Paginator/Paginator.jsx","components/Users/User/User.jsx","components/Users/Users.jsx","components/Users/UsersInnerContainer.jsx","components/Common/FormControls/TextError.jsx","components/Common/FormControls/FormikCheckbox.jsx","components/Common/FormControls/FormikDatePicker.jsx","components/Common/FormControls/FormikInput.jsx","components/Common/FormControls/FormikRadioButtons.jsx","components/Common/FormControls/FormikSelect.jsx","components/Common/FormControls/FormikTextArea.jsx","components/Common/FormControls/FormikControl.jsx","components/Login/LoginForm.jsx","hoc/WithSuspense.js","components/Settings/Settings.jsx","components/Settings/SettingsContainer.jsx","App.js","index.js","components/Users/User/User.module.css","redux/selectors.js","components/Header/Header.module.css","redux/profileReducer.js","assets/loaderSVG.svg","components/Common/Preloader/Preloader.jsx","assets/defaultAvatar.png","hoc/LoggedInRedirect.js","components/Users/Paginator/PageButton.module.css"],"names":["module","exports","SET_USER_PROFILE_PHOTO","getUserProfilePhotoThunk","UserId","dispatch","a","getUserProfile","res","userProfilePhoto","data","photos","small","type","instance","axios","create","withCredentials","baseURL","headers","getUsers","pageSize","pageCount","get","then","userId","sendUserStatus","status","put","getUserStatus","sendUserPhoto","file","formData","FormData","append","sendUserProfileSettings","settings","console","log","follow","post","unFollow","delete","logInProfile","loginMe","email","password","rememberMe","captcha","logOutMe","getCaptcha","SET_USER_DATA","LOGGED_IN_TOGGLE","LOGGED_IN_FETCHING","CAPTCHA","setUserDataAC","login","isLoggedIn","LoggedInTogglegAC","LoggedInFetchingAC","isFetching","confirmation","logInUserThunkCreator","resultCode","id","getCaptchaThunk","logOut","captchaImg","url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","POST_NEW_TEXT","initialState","dialogsData","messagesData","friends","friendsReducer","state","stateCopy","FOLLOW","UNFOLLOW","SET_USERS","PAGE_SIZE","TOGGLE_PRELOADER","TOGGLE_FOLLOWING_PROGRESS","PAGE_COUNT","TOTAL_COUNT","users","totalCount","followingProgress","followAC","unfollowAC","setUsersAC","pageCountAC","toggleFollowingProgressAC","INITIALIZED_SUCCSESS","initialized","reducers","combineReducers","profileReducer","dialogsReducer","action","newDialog","name","newPostItem","message","postText","usersReducer","map","user","followed","filter","authReducer","appReducer","headerReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Nav","props","className","classes","nav","item","to","activeClassName","active","Music","contentColor","Header","hideUserSettingsContainer","event","document","getElementById","style","display","header","onMouseOver","onMouseOut","userInfo","userLogin","userAvatar","src","defaultAvatar","alt","profileSettings","onClick","HeaderContainer","this","React","Component","withRouter","connect","PageButton","switchPage","removeUsers","button","checkedButton","Paginator","useState","initialPage","setInitialPage","numberOfShowedButtons","decrementNumber","setDecrementNumber","incrementNumber","numberOfPageButtons","Math","ceil","buttons","buttonsInitializeArray","i","push","createButtonsArray","buttonsContainer","User","photo","unFollowThunkCreator","followThunkCreator","slicedStatus","length","slice","logoBlock","disabled","some","infoBlock","country","city","Users","UsersInnerContainer","getUsersThunkCreator","removeUsersThunkCreator","addPageSize","pageSizeAC","setUsers","addUsers","Preloader","getUsersSuper","usersSelectors","getPageSize","getPageCount","getTotalCount","getIsFetching","getFollowingProgrress","items","LoggedInRedirect","TextError","error","children","FormikCheckbox","options","label","rest","field","option","Fragment","htmlFor","value","key","checked","component","FormikDatePicker","formControl","form","setFieldValue","selected","onChange","val","Input","autocomplete","FormikInput","touchedEmail","touchedPassword","cn","alert","FormikRadioButtons","FormikSelect","as","FormikTextArea","FormikControl","control","validationSchema","Yup","required","initialValues","onSubmit","values","formik","touched","isValid","WithSuspense","Suspense","fallback","Settings","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","shape","sendProfileSettings","validateOnChange","isSubmitting","SettingsContainer","getUserProfileThunkCreator","removeUserProfileThunkCreator","updateUserProfileSettings","Dialogs","lazy","ProfileContainer","App","initializeApp","path","render","exact","AppWithRouter","logInUserPromise","Promise","all","MainApp","basename","process","rerenderEntireTree","ReactDOM","getAllUsers","getAllUsersSelector","createSelector","postsSelectors","getPosts","posts","getProfile","getNewPostsText","newPostText","getLogin","SET_USER_PROFILE","APDATE_USER_STATUS","ADD_NEW_POST","UPDATE_POST_TEXT","DELETE_POST","UPDATE_USER_PHOTO","LOADING_NEW_PROFILE_PHOTO","userStatus","loadingPhoto","newPost","userAva","userName","likesCount","postId","setUserProfile","updateUserStatusAC","addNewPostAC","getUserStatusThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","addNewPostThunkCreator","loadingPhotoThunk","preloaderContainer","preloader","RedirectedComponent"],"mappings":"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","file":"static/js/main.3b2ffc05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__2qmHb\",\"preloader\":\"Preloader_preloader__3nzjs\"};","import {\r\n    getUserProfile,\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE_PHOTO = 'SET_USER_PROFILE_PHOTO';\r\n\r\nlet initialState = {\r\n    userProfilePhoto: ''\r\n};\r\n\r\n\r\nexport const headerReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto) => ({ type: SET_USER_PROFILE_PHOTO, userProfilePhoto })\r\n\r\n\r\nexport const getUserProfilePhotoThunk = (UserId) => \r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n\r\n    \r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\nexport const getUsers = (pageSize, pageCount) => {\r\n    return instance.get('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\nexport const getUserProfile = (userId) => {\r\n    return instance.get('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId) => {\r\n    return instance.delete('follow/' + userId, {}, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email, password, rememberMe = true, captcha) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Music_contentColor__3tC_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Users_contentColor__2Kips\",\"addUsersButtonContainer\":\"Users_addUsersButtonContainer__3tC_O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaImg\":\"LoginForm_captchaImg__1M2-6\"};","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserDataAC = (userId, email, login, isLoggedIn) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\nexport const LoggedInTogglegAC = (isLoggedIn) => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching, confirmation) => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\nexport const captcha = (captchaImg) => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3jRL3\",\"item\":\"Nav_item__3Mn2D\",\"active\":\"Nav_active__10tEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__3P2GR\",\"formControl\":\"Login_formControl__2h8Kz\",\"alert\":\"Login_alert__3TE9q\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const POST_NEW_TEXT = 'POST_NEW_TEXT'\r\n\r\ntype newDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype newPostItemType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype initialStateType = {\r\n    dialogsData: Array<newDialogType>\r\n    messagesData: Array<newPostItemType>\r\n}\r\n\r\ntype actionType = {\r\n    type : typeof POST_NEW_TEXT\r\n    postText: string\r\n}\r\n\r\nlet initialState : initialStateType  = {\r\n    dialogsData: [],\r\n    messagesData: [],\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action : actionType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POST_NEW_TEXT:\r\n            let newDialog : newDialogType = {\r\n                id: 4,\r\n                name: 'Tema'\r\n            }\r\n            let newPostItem : newPostItemType = {\r\n                id: 4,\r\n                message: action.postText\r\n            }\r\n            return {\r\n                ...state,\r\n                dialogsData: [...state.dialogsData, newDialog],\r\n                messagesData: [...state.messagesData, newPostItem],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const postNewTextActionCreator = (postText : string) => {\r\n    return {\r\n        type: POST_NEW_TEXT,\r\n        postText: postText\r\n    }\r\n}\r\n","let initialState = {\r\n    friends: [\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    return stateCopy\r\n}\r\nexport default friendsReducer","import { follow, unFollow, getUsers } from '../API/api'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst PAGE_SIZE = 'PAGE_SIZE'\r\nconst TOGGLE_PRELOADER = 'TOGGLE_PRELOADER'\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\nconst PAGE_COUNT = 'PAGE_COUNT'\r\nconst TOTAL_COUNT = 'TOTAL_COUNT'\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 100,\r\n    pageCount: 1,\r\n    totalCount: null,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case PAGE_SIZE:\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case PAGE_COUNT:\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        case TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case TOGGLE_PRELOADER:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (userId) => ({ type: FOLLOW, userId })\r\n\r\nexport const unfollowAC = (userId) => ({ type: UNFOLLOW, userId })\r\n\r\nexport const setUsersAC = (users) => ({ type: SET_USERS, users })\r\n\r\nexport const pageSizeAC = (pageSize) => ({ type: PAGE_SIZE, pageSize })\r\n\r\nexport const pageCountAC = (pageCount) => ({ type: PAGE_COUNT, pageCount })\r\n\r\nexport const totalCountAR = (totalCount) => ({ type: TOTAL_COUNT, totalCount })\r\n\r\nexport const togglePreloaderAC = (isFetching) => ({ type: TOGGLE_PRELOADER, isFetching })\r\n\r\nexport const toggleFollowingProgressAC = (followingProgress, userId) => ({ type: TOGGLE_FOLLOWING_PROGRESS, followingProgress, userId })\r\n\r\nexport const getUsersThunkCreator = (pageSize, pageCount) =>\r\n    async (dispatch) => {\r\n        dispatch(pageCountAC(pageCount))\r\n        const res = await getUsers(pageSize, pageCount)\r\n        dispatch(setUsersAC(res.items))\r\n        dispatch(totalCountAR(res.totalCount))\r\n    }\r\n\r\n\r\nexport const removeUsersThunkCreator = () => {\r\n    return (dispatch) => {\r\n        dispatch(setUsersAC([]))\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId) =>\r\n\r\n    async (dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(followAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\nexport const unFollowThunkCreator = (userId) =>\r\n    async (dispatch) => {\r\n        dispatch(toggleFollowingProgressAC(true, userId))\r\n        const res = await unFollow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(unfollowAC(userId))\r\n        }\r\n        dispatch(toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\ntype initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoggedIn: boolean\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n    captchaImg: string\r\n}\r\n\r\n\r\nlet initialState : initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action : any) : initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype setUserDataACDataType = {\r\n    userId: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isLoggedIn: null | boolean\r\n}\r\ntype setUserDataACType = {\r\n    type : typeof SET_USER_DATA\r\n    data : setUserDataACDataType\r\n}\r\n\r\nexport const setUserDataAC = \r\n(userId : number | null, email : string | null, login : string | null, isLoggedIn : boolean) \r\n: setUserDataACType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\n\r\ntype LoggedInTogglegACType = {\r\n    type : typeof LOGGED_IN_TOGGLE\r\n    isLoggedIn : boolean\r\n}\r\nexport const LoggedInTogglegAC = (isLoggedIn : boolean) : LoggedInTogglegACType => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\ntype LoggedInFetchingACType = {\r\n    type : typeof LOGGED_IN_FETCHING\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching : boolean, confirmation : boolean) : LoggedInFetchingACType => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\ntype captchaType = {\r\n    type: typeof CAPTCHA\r\n    captchaImg: string\r\n}\r\nexport const captcha = (captchaImg : string) : captchaType => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch : any) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email : string, password : string, rememberMe : boolean, captcha : any) =>\r\n    async (dispatch : any) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch : any) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch : any) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import { logInUserThunkCreator } from \"./authReducer\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\n\r\ntype initialStateType = {\r\n    initialized : boolean\r\n}\r\n\r\ntype actionType = {\r\n    type: typeof INITIALIZED_SUCCSESS\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () : actionType => ({ type: INITIALIZED_SUCCSESS })\r\n\r\nexport const initializeApp = () => (dispatch : Function) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import {\r\n    getUserProfile,\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE_PHOTO : string = 'SET_USER_PROFILE_PHOTO';\r\n\r\nexport type initialStateType = {\r\n    userProfilePhoto: string\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    userProfilePhoto: string,\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    userProfilePhoto: '',\r\n}\r\n\r\nexport const headerReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto : string) : actionType => ({type: SET_USER_PROFILE_PHOTO, userProfilePhoto})\r\n\r\nexport const getUserProfilePhotoThunk = (UserId : string) => \r\n    async (dispatch : any) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n","import { applyMiddleware, combineReducers, createStore, compose } from 'redux'\r\nimport { profileReducer } from './profileReducer'\r\nimport { dialogsReducer } from './dialogsReducerTypescript'\r\nimport { friendsReducer } from './friendsReducer'\r\nimport { usersReducer } from './usersReducer'\r\nimport { authReducer } from './authReducerTypescript'\r\nimport { appReducer } from './appReducerTypescript'\r\nimport { headerReducer } from './myFirstTypescriptReducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store\r\n\r\nexport default store","import { logInUserThunkCreator } from \"./authReducer\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () => ({ type: INITIALIZED_SUCCSESS })\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import React from 'react'\r\nimport classes from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\n\r\nconst Nav = function (props) {\r\n  return (\r\n    \r\n    <div className={classes.nav}>\r\n      \r\n      <nav >\r\n        <div className={classes.item}>\r\n          <NavLink to='/Profile/' activeClassName={classes.active}>My Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Users' activeClassName={classes.active}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/Settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n        \r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Nav ","import React from 'react'\r\nimport classes from './Music.module.css'\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={classes.contentColor}>\r\n            <h1>\r\n                Music\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport defaultAvatar from '../../assets/defaultAvatar.png'\r\n\r\n\r\nconst Header = (props) => {\r\n    console.log(typeof props.userId)\r\n    const logout = () => {\r\n        props.logOut()\r\n    }\r\n\r\n    const showUserSettingsContainer = (event) => {\r\n        let userSettings = document.getElementById('profileSettings')\r\n        userSettings.style.display = 'block';\r\n    }\r\n    const hideUserSettingsContainer = (event) => {\r\n        let userSettings = document.getElementById('profileSettings')\r\n        userSettings.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isLoggedIn ?\r\n                    <div\r\n                        onMouseOver={showUserSettingsContainer}\r\n                        onMouseOut={hideUserSettingsContainer}>\r\n\r\n                        <div\r\n                            className={classes.userInfo}>\r\n                            <div className={classes.userLogin}>\r\n                                <div><span>{props.login}</span></div>\r\n                            </div>\r\n                            <NavLink to='/Profile'>\r\n                                <div className={classes.userAvatar}>\r\n                                    <img src={props.userProfilePhoto || defaultAvatar} alt=\"User avatar\" />\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div id='profileSettings' className={classes.profileSettings}>\r\n                            <div>\r\n                                <button onClick={logout}>Log out</button>\r\n                            </div>\r\n                            <div>\r\n                                <NavLink to='/Settings'>\r\n                                    <button onClick={hideUserSettingsContainer} >\r\n                                        Profile settings\r\n                                </button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : <NavLink to='/Login'> <button>Login</button></NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header ","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './Header'\r\nimport { logOut } from '../../redux/authReducer'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport axios from 'axios'\r\nimport { getUserProfilePhotoThunk } from '../../redux/headerRecuder';\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.props = props\r\n    }\r\n\r\n    componentDidMount() { \r\n        this.props.getUserProfilePhotoThunk(this.props.userId)\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoggedIn: state.authReducer.isLoggedIn,\r\n    login: state.authReducer.login,\r\n    isFetching: state.authReducer.isFetching,\r\n    userId: state.authReducer.userId,\r\n    userProfilePhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, { logOut, getUserProfilePhotoThunk })\r\n)(HeaderContainer) ","import React from 'react'\r\nimport classes from './PageButton.module.css'\r\n\r\n\r\nconst PageButton = (props) => {\r\n    const switchPage = () => {\r\n        props.removeUsers()\r\n        props.getUsers(props.pageSize, props.button)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.button === props.pageCount\r\n                ? <div>\r\n                    <button className={classes.checkedButton} onClick={switchPage}>{props.button}</button>\r\n                </div>\r\n                : <div>\r\n                    <button key={props.button} onClick={switchPage}>{props.button}</button>\r\n                </div>\r\n            }\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default PageButton","import React, { useState } from 'react'\r\nimport PageButton from './PageButton'\r\nimport classes from './PageButton.module.css'\r\n\r\nconst Paginator = (props) => {\r\n\r\n    const buttonsPortion = 5\r\n    let touchedDecrementButton = false\r\n    const [initialPage, setInitialPage] = useState(props.pageCount)\r\n    const [numberOfShowedButtons] = useState(7)\r\n    const [decrementNumber, setDecrementNumber] = useState(buttonsPortion)\r\n    const [incrementNumber, setIncrementNumber] = useState(buttonsPortion)\r\n    const numberOfPageButtons = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n\r\n    const incrementInitialPage = () => {\r\n        setInitialPage(initialPage + incrementNumber)\r\n    }\r\n\r\n    const decrementInitialPage = () => {\r\n        setInitialPage(initialPage - decrementNumber)\r\n        touchedDecrementButton = true\r\n        if (touchedDecrementButton && decrementNumber !== buttonsPortion) setDecrementNumber(buttonsPortion)\r\n\r\n    }\r\n\r\n    const createButtonsArray = () => {\r\n        let buttonsInitializeArray = []\r\n        for (let i = initialPage; i < numberOfPageButtons + 1; i++) {\r\n            buttonsInitializeArray.push(i)\r\n        }\r\n\r\n        if (initialPage === 1) {\r\n            return buttonsInitializeArray\r\n        }\r\n        else if (initialPage - decrementNumber < 0) {\r\n            setDecrementNumber((decrementNumber - 1) + (initialPage - decrementNumber))\r\n        }\r\n\r\n        return buttonsInitializeArray\r\n    }\r\n\r\n    let buttons = createButtonsArray().map(function (button) {\r\n        if (button > initialPage + numberOfShowedButtons - 1) {\r\n            return\r\n        }\r\n        return <PageButton\r\n            button={button}\r\n            pageSize={props.pageSize}\r\n            getUsers={props.getUsers}\r\n            pageCount={props.pageCount}\r\n            totalCount={props.totalCount}\r\n            removeUsers={props.removeUsers}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className={classes.buttonsContainer}>\r\n            {initialPage === 1\r\n                ? null\r\n                : <div>\r\n                    <button onClick={decrementInitialPage}>назад</button>\r\n                </div>}\r\n            {buttons}\r\n            {numberOfPageButtons - incrementNumber <= initialPage\r\n                ? null\r\n                : <div>\r\n                    <button onClick={incrementInitialPage}>Вперед</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from 'react'\r\nimport classes from './User.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst User = (props) => {\r\n\r\n    let {\r\n        id,\r\n        photo,\r\n        followed,\r\n        followingProgress,\r\n        unFollowThunkCreator,\r\n        followThunkCreator,\r\n        name,\r\n        status\r\n    } = props\r\n\r\n    let slicedStatus = null\r\n\r\n    if (status && status.length > 50) {\r\n        slicedStatus = status.slice(1,50) + '...'\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.logoBlock}>\r\n                <div>\r\n                    <NavLink to={'/Users/' + id} >\r\n                        <img src={photo == null ? defaultAvatar : photo} alt=\"UserPhoto\" />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            unFollowThunkCreator(id)\r\n\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            followThunkCreator(id)\r\n                        }}>Follow</button>}\r\n\r\n                </div>\r\n            </div>\r\n            <div className={classes.infoBlock}>\r\n                <div className={classes.name}>{name}</div>\r\n                <div className={classes.status}>{slicedStatus || status}</div>\r\n                <div className={classes.country}>Belarus<i>(hardcode)</i>,</div>\r\n                <div className={classes.city}>Bralaw<i>(hardcode)</i></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from 'react'\r\nimport Paginator from './Paginator/Paginator'\r\nimport User from './User/User'\r\nimport classes from './Users.module.css'\r\n\r\nconst Users = (props) => {\r\n    let users = props.users.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        name={user.name}\r\n        status={user.status}\r\n        photo={user.photos.small}\r\n        followed={user.followed}\r\n        followingProgress={props.followingProgress}\r\n        followThunkCreator={props.followThunkCreator}\r\n        unFollowThunkCreator={props.unFollowThunkCreator}\r\n    />)\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n            <div>\r\n                {users}\r\n            </div>\r\n            <Paginator\r\n                pageSize={props.pageSize}\r\n                totalCount={props.totalCount}\r\n                getUsers={props.getUsers}\r\n                pageCount={props.pageCount}\r\n                removeUsers={props.removeUsers}\r\n                />\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from 'react'\r\nimport Users from './Users';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    pageSizeAC,\r\n    getUsersThunkCreator,\r\n    followThunkCreator,\r\n    unFollowThunkCreator,\r\n    removeUsersThunkCreator,\r\n    pageCountAC\r\n    \r\n} from '../../redux/usersReducer'\r\nimport { compose } from 'redux';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect'\r\nimport {\r\n    getUsersSuper,\r\n    usersSelectors\r\n} from '../../redux/selectors'\r\n\r\nclass UsersInnerContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.pageSize, this.props.pageCount)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUsersThunkCreator() \r\n    }\r\n\r\n    render() {\r\n        if (!this.props.users.length) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <>\r\n                <Users\r\n                    users={this.props.users}\r\n                    addPageSize={this.props.pageSizeAC}\r\n                    pageSize={this.props.pageSize}\r\n                    totalCount={this.props.totalCount}\r\n                    setUsers={this.props.setUsers}\r\n                    addUsers={this.addUsers}\r\n                    followingProgress={this.props.followingProgress}\r\n                    followThunkCreator={this.props.followThunkCreator}\r\n                    unFollowThunkCreator={this.props.unFollowThunkCreator}\r\n                    getUsers={this.props.getUsersThunkCreator}\r\n                    removeUsers={this.props.removeUsersThunkCreator}\r\n                    pageCount={this.props.pageCount}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: usersSelectors.getPageSize(state),\r\n        pageCount: usersSelectors.getPageCount(state),\r\n        totalCount: usersSelectors.getTotalCount(state),\r\n        isFetching: usersSelectors.getIsFetching(state),\r\n        followingProgress: usersSelectors.getFollowingProgrress(state),\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        pageSizeAC,\r\n        getUsersThunkCreator,\r\n        removeUsersThunkCreator,\r\n        followThunkCreator,\r\n        unFollowThunkCreator,\r\n        pageCountAC,\r\n    }),\r\n    LoggedInRedirect\r\n)(UsersInnerContainer) ","import React from 'react' \r\nimport classes from './Login.module.css'\r\n\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div className={classes.error}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError","import React from 'react' \r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikCheckbox = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <div>\r\n                                    <label htmlFor={option.value}>{option.key}</label>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value.length === 2} />\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikCheckbox","import React from 'react'\r\nimport DateView from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikDatePicker = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field }) => {\r\n                        const { setFieldValue } = form\r\n                        const { value } = field\r\n                        return <DateView\r\n                            id={name}\r\n                            {...field}\r\n                            {...rest}\r\n                            selected={value}\r\n                            onChange={val => setFieldValue(name, val)} />\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikDatePicker","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Input = (props) => {\r\n    return <div className={classes.formControl}>\r\n        <label htmlFor={props.name}>{props.label}</label>\r\n        <div>\r\n            <Field\r\n                className={props.className}\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                autocomplete={props.autocomplete} />\r\n            <ErrorMessage name={props.name} component={TextError} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst FormikInput = (props) => {\r\n    const {\r\n        label,\r\n        name,\r\n        email,\r\n        password,\r\n        touchedEmail,\r\n        touchedPassword,\r\n        type\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Input className={cn({\r\n                [classes.alert]: touchedEmail && !email || touchedPassword && !password\r\n            })}\r\n                name={name}\r\n                label={label}\r\n                type={type} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikInput","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikRadioButtons = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <label htmlFor={name}>{label}</label>\r\n            <div></div>\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        console.log('field',field)\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value === option.value} />\r\n                                        <label htmlFor={option.value}>{option.key}</label>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikRadioButtons","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikSelect = (props) => {\r\n    const { label, name, options, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='select' id={name} name={name} {...rest}>\r\n                {\r\n                    options.map(option => {\r\n                        return <option key={option.value} value={option.value}>\r\n                            {option.key}\r\n                        </option>\r\n                    })\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikSelect","import React from 'react' \r\nimport { Field, ErrorMessage} from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikTextArea = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='textarea' id={name} name={name} {...rest}/>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikTextArea","import React from 'react'\r\nimport FormikCheckbox from './FormikCheckbox'\r\nimport FormikDatePicker from './FormikDatePicker'\r\nimport FormikInput from './FormikInput'\r\nimport FormikRadioButtons from './FormikRadioButtons'\r\nimport FormikSelect from './FormikSelect'\r\nimport FormikTextArea from './FormikTextArea'\r\n\r\nconst FormikControl = (props) => {\r\n    const { control, ...rest } = props\r\n    switch (control) {\r\n        case 'input': return <FormikInput {...rest} />\r\n        case 'textarea': return <FormikTextArea {...rest} />\r\n        case 'select': return <FormikSelect {...rest} />\r\n        case 'radio': return <FormikRadioButtons {...rest} />\r\n        case 'checkbox': return <FormikCheckbox {...rest} /> \r\n        case 'date': return <FormikDatePicker {...rest} />\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport default FormikControl","import React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { login } from '../../redux/authReducer'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './LoginForm.module.css'\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const { login, isLoggedIn, captchaImg } = props\r\n\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email format').required('Enter email'),\r\n        password: Yup.string().required('Enter password'),\r\n    })\r\n\r\n    const onSubmit = values => {\r\n        login(values.email, values.password, values.rememberMe, values.captcha)\r\n    }\r\n\r\n    if (isLoggedIn) { return <Redirect to={'/Profile'} /> } // Проверяем, если мы залогинены, то редиректим на профиль\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <h1>Login</h1>\r\n                        <FormikControl\r\n                            email={formik.values.email}\r\n                            touchedEmail={formik.touched.email}\r\n                            control='input'\r\n                            type='email'\r\n                            label='Email'\r\n                            name='email' />\r\n                        <FormikControl\r\n                            password={formik.values.password}\r\n                            touchedPassword={formik.touched.password}\r\n                            control='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            name='password'\r\n                        />\r\n                        <p></p>\r\n                        <input type='submit' disabled={!formik.isValid} value={'Login'} />\r\n                        {!captchaImg ?\r\n                            null\r\n                            : <div className={classes.captchaImg}>\r\n                                <p></p>\r\n                                <img src={captchaImg} alt=\"captcha\" />\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    label='Enter your captcha'\r\n                                    name='captcha'\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </Form>\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\nexport let mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        captchaImg: state.authReducer.captchaImg\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm)","import React from 'react'\r\nimport Preloader from '../components/Common/Preloader/Preloader'\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props}/>\r\n        </React.Suspense> \r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\n\r\n\r\nconst Settings = (props) => {\r\n    \r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profile\r\n    const { facebook, github, instagram, mainLink, twitter, vk, website, youtube } = props.profile.contacts\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        contacts: Yup.object().shape({\r\n            github: Yup.string().url('Invalid URL!'),\r\n            vk: Yup.string().url('Invalid URL!'),\r\n            facebook: Yup.string().url('Invalid URL!'),\r\n            instagram: Yup.string().url('Invalid URL!'),\r\n            twitter: Yup.string().url('Invalid URL!'),\r\n            website: Yup.string().url('Invalid URL!'),\r\n            youtube: Yup.string().url('Invalid URL!'),\r\n            mainLink: Yup.string().url('Invalid URL!')\r\n        })\r\n    })\r\n\r\n    const initialValues = {\r\n        fullName: fullName,\r\n        aboutMe: aboutMe,\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n    }\r\n\r\n    const onSubmit = (values) => {\r\n        console.log('Submitting')\r\n        async function sendProfileSettings() {\r\n            await props.sendProfileSettings(values)\r\n        }\r\n        return sendProfileSettings()\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n                validateOnChange={false}\r\n                >\r\n                {\r\n                    formik => {\r\n                        \r\n                        return <Form>\r\n                            <h1>Profile settings</h1>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Full Name'\r\n                                name='fullName'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='About me'\r\n                                name='aboutMe'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='My skills'\r\n                                name='lookingForAJobDescription'\r\n                            />\r\n                            <div>\r\n                                <p></p>\r\n                                <Field\r\n                                    type='checkbox'\r\n                                    name='lookingForAJob'\r\n                                />\r\n                                <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n                            </div>\r\n                            <h3>\r\n                                Contacts\r\n                            </h3>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Github'\r\n                                name='contacts.github'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='vk'\r\n                                name='contacts.vk'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Facebook'\r\n                                name='contacts.facebook'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Instagram'\r\n                                name='contacts.instagram'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Twitter'\r\n                                name='contacts.twitter'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Website'\r\n                                name='contacts.website'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Youtube'\r\n                                name='contacts.youtube'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Main link'\r\n                                name='contacts.mainLink'\r\n                            />\r\n                            <input type='submit' value='save' disabled={formik.isSubmitting}/>\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { updateUserProfileSettings, getUserProfileThunkCreator, removeUserProfileThunkCreator } from '../../redux/profileReducer'\r\nimport { connect } from \"react-redux\";\r\nimport Settings from './Settings';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\n\r\n\r\nclass SettingsContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserProfileThunkCreator(this.props.userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        return <>\r\n            {\r\n                !this.props.profile\r\n                    ? null\r\n                    : <Settings\r\n                        sendProfileSettings={this.props.updateUserProfileSettings}\r\n                        profile={this.props.profile}\r\n                    />\r\n            }\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profileReducer.profile,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose (\r\n    withRouter, \r\n    connect(mapStateToProps, { \r\n        updateUserProfileSettings, \r\n        getUserProfileThunkCreator, \r\n        removeUserProfileThunkCreator \r\n    }),\r\n    LoggedInRedirect\r\n) \r\n(SettingsContainer) ","import React from 'react'\nimport './App.css'\nimport { Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux'\nimport { initializeApp } from './redux/appReducer'\nimport { compose } from 'redux';\nimport store from './redux/reduxStore'\nimport Nav from './components/Navbar/Nav';\nimport Music from './components/Music/Music';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport UsersInnerContainer from './components/Users/UsersInnerContainer';\nimport LoginForm from './components/Login/LoginForm';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport SettingsContainer from './components/Settings/SettingsContainer';\nconst Dialogs = React.lazy(() => import('./components/Dialogs/Dialogs'))\nconst ProfileContainer = React.lazy(() => import('./components/NewProfile/ProfileContainer'))\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <>\n        <div className='app-wrapper'>\n          <HeaderContainer />\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Route path='/Dialogs' render={WithSuspense(Dialogs)}/>\n            <Route path='/Profile/:userId?' render={WithSuspense(ProfileContainer)}/>\n            <Route path='/Users/:userId' render={WithSuspense(ProfileContainer)} />\n            <Route exact path='/Users' render={() => <UsersInnerContainer />} />\n            <Route path='/Music' render={() => <Music />} />\n            <Route path='/Settings' render={() => <SettingsContainer />} />\n            <Route path='/Login' render={() => <LoginForm />} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.appReducer.initialized\n})\n\nlet AppWithRouter = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\nlet MainApp = (props) => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppWithRouter />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStore'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n \n\nexport let rerenderEntireTree = () => {\n  ReactDOM.render( <MainApp />,\n    document.getElementById('root')\n  );\n}\nrerenderEntireTree(store)\nwindow.store = store\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Kdvq\",\"logoBlock\":\"User_logoBlock__xhS7H\",\"infoBlock\":\"User_infoBlock__3O4VD\",\"name\":\"User_name__3sCD6\",\"status\":\"User_status__1ssRJ\",\"city\":\"User_city__1xMuO\",\"country\":\"User_country__1_5tH\"};","import { createSelector } from 'reselect'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__eA5PG\",\"login\":\"Header_login__2clXM\",\"userInfo\":\"Header_userInfo__UZJGJ\",\"userLogin\":\"Header_userLogin__1B_UB\",\"userAvatar\":\"Header_userAvatar__8bsmo\",\"profileSettings\":\"Header_profileSettings__3xpjx\"};","import {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/api'\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst APDATE_USER_STATUS = 'APDATE_USER_STATUS'\r\nconst ADD_NEW_POST = 'ADD_NEW_POST'\r\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst UPDATE_USER_PHOTO = 'UPDATE_USER_PHOTO'\r\nconst LOADING_NEW_PROFILE_PHOTO = 'LOADING_NEW_PROFILE_PHOTO'\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    newPostText: '',\r\n    profile: null,\r\n    userStatus: null,\r\n    loadingPhoto: false\r\n};\r\n\r\n\r\n\r\nexport const profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case APDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            }\r\n        }\r\n        case UPDATE_USER_PHOTO: {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } }\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.postText\r\n            }\r\n        }\r\n        case ADD_NEW_POST: {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case LOADING_NEW_PROFILE_PHOTO: {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\r\n\r\nconst updateUserStatusAC = (userStatus) => ({ type: APDATE_USER_STATUS, userStatus: userStatus })\r\n\r\nconst updateUserPhotoAC = (photos) => ({ type: UPDATE_USER_PHOTO, photos })\r\n\r\nconst loadingPhotoAC = () => ({type: LOADING_NEW_PROFILE_PHOTO})\r\n\r\nexport const addNewPostAC = (postText, login) => ({ type: ADD_NEW_POST, postText, login })\r\n\r\nexport const deletePostAC = (postId) => ({ type: DELETE_POST, postId })\r\n\r\nexport const getUserProfileThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () => {\r\n    return (dispatch) => {\r\n        dispatch(setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId) =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file) =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText, login) => (dispatch) => {\r\n    dispatch(addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () => (dispatch) => {\r\n    dispatch(loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/loaderSVG.2997ce57.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/loaderSVG.svg'\r\nimport classes from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.preloaderContainer}>\r\n            <img className={classes.preloader} src={preloader} alt='preloader'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","export default __webpack_public_path__ + \"static/media/defaultAvatar.0334f4b4.png\";","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from 'react-redux'\r\nimport { LoggedInTogglegAC, LoggedInFetchingAC, logOut } from '../redux/authReducer'\r\n\r\nexport const LoggedInRedirect = (Component) => {\r\n    class RedirectedComponent extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.props = props\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <>\r\n                 {!this.props.isLoggedIn && this.props.confirmation ? <Redirect to='/Login' /> : <></>}\r\n                 {this.props.isFetching && !this.props.isLoggedIn ? <></> : <Component {...this.props} />}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsLoggedInRedirect = (state) => ({\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        isFetching: state.authReducer.isFetching,\r\n        confirmation: state.authReducer.confirmation,\r\n    })\r\n    let LogInRedirectComponent = connect(mapStateToPropsLoggedInRedirect, {LoggedInTogglegAC, LoggedInFetchingAC, logOut})(RedirectedComponent)\r\n    return LogInRedirectComponent\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"PageButton_buttonsContainer__135jv\",\"checkedButton\":\"PageButton_checkedButton__2t6J4\"};"],"sourceRoot":""}