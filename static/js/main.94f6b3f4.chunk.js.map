{"version":3,"sources":["components/Common/Preloader/Preloader.module.css","redux/dialogsReducerTypescript.ts","components/Music/Music.module.css","components/Login/LoginForm.module.css","API/apiTS.ts","components/Common/FormControls/Login.module.css","reportWebVitals.js","OldReducers/friendsReducer.js","redux/usersReducerTypescript.ts","OldReducers/authReducer.js","redux/appReducerTypescript.ts","redux/reduxStoreTS.ts","components/Navbar/NavTS.tsx","components/Music/Music.jsx","components/Header/HeaderTS.tsx","components/Header/HeaderContainerTS.tsx","components/Users/User/UserTS.tsx","redux/selectorsTS.ts","components/Users/UsersTS.tsx","components/Users/SearchForm.tsx","components/Users/UsersInnerContainerTS.tsx","components/Common/FormControls/TextError.jsx","components/Common/FormControls/FormikCheckbox.jsx","components/Common/FormControls/FormikDatePicker.jsx","components/Common/FormControls/FormikInput.jsx","components/Common/FormControls/FormikRadioButtons.jsx","components/Common/FormControls/FormikSelect.jsx","components/Common/FormControls/FormikTextArea.jsx","components/Common/FormControls/FormikControl.jsx","components/Login/LoginFormTS.tsx","hoc/WithSuspense.js","components/Settings/SettingsTS.tsx","components/Settings/SettingsContainerTS.tsx","AppTS.tsx","index.js","redux/authReducerTypescript.ts","components/Users/Users.module.css","components/Navbar/Nav.module.css","components/Header/Header.module.css","assets/loaderSVG.svg","components/Common/Preloader/Preloader.jsx","redux/profileReducerTypescript.ts","components/Users/User/User.module.css","API/api.js","assets/defaultAvatar.png","hoc/LoggedInRedirect.js","redux/HeaderReducerTS.tsx"],"names":["module","exports","POST_NEW_TEXT","initialState","dialogsData","messagesData","dialogsReducer","state","action","type","newDialog","id","name","newPostItem","message","postText","postNewTextActionCreator","instance","axios","create","withCredentials","baseURL","headers","getUsers","pageSize","pageCount","searchName","friend","get","then","res","data","getUserProfile","userId","sendUserStatus","status","put","getUserStatus","sendUserPhoto","file","formData","FormData","append","sendUserProfileSettings","settings","a","console","log","follow","post","unFollow","delete","logInProfile","loginMe","email","password","rememberMe","captcha","logOutMe","getCaptcha","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","friends","friendsReducer","stateCopy","users","totalCount","isFetching","followingProgress","filter","term","actions","payload","getUsersThunkCreator","dispatch","items","SET_USER_DATA","LOGGED_IN_FETCHING","setUserDataAC","login","isLoggedIn","LoggedInFetchingAC","confirmation","logInUserThunkCreator","resultCode","INITIALIZED_SUCCSESS","initialized","reducers","combineReducers","profileReducer","usersReducer","map","user","followed","authReducer","appReducer","headerReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Nav","className","classes","nav","item","to","activeClassName","active","Music","props","contentColor","Header","userSettings","document","getElementById","hideUserSettingsContainer","style","display","header","onMouseOver","onMouseOut","userInfo","userLogin","userAvatar","src","userProfilePhoto","defaultAvatar","alt","profileSettings","onClick","logOut","HeaderContainer","this","getUserProfilePhotoThunk","React","Component","withRouter","connect","User","photo","slicedStatus","useDispatch","length","slice","logoBlock","disabled","some","infoBlock","usersSelectors","getUsersSuper","createSelector","UsersTS","history","useHistory","useSelector","usersAll","useEffect","push","pathname","search","photos","small","SearchForm","initialValues","userName","onSubmit","values","searchUsers","validateOnChange","formik","searchModule","as","value","isSubmitting","Paginator","totalUsersCount","numberOfPageButtons","Math","ceil","previousLabel","nextLabel","pageRangeDisplayed","marginPagesDisplayed","onPageChange","selected","scrollTo","containerClassName","paginationBttns","previousLinkClassName","prevBttn","nextLinkClassName","nextBttn","disabledClassName","paginationDisabled","paginationActive","initialPage","disableInitialCallback","LoggedInRedirect","Preloader","TextError","error","children","FormikCheckbox","options","label","rest","field","option","Fragment","htmlFor","key","checked","component","FormikDatePicker","formControl","form","setFieldValue","onChange","val","Input","autocomplete","FormikInput","touchedEmail","touchedPassword","cn","alert","FormikRadioButtons","FormikSelect","FormikTextArea","FormikControl","control","captchaImg","validationSchema","Yup","required","touched","isValid","WithSuspense","Suspense","fallback","Settings","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","shape","url","sendProfileSettings","SettingsContainer","getUserProfileThunkCreator","removeUserProfileThunkCreator","updateUserProfileSettings","DialogContainerTS","lazy","ProfileContainer","App","initializeApp","path","render","exact","AppWithRouter","logInUserPromise","Promise","all","MainApp","basename","process","rerenderEntireTree","ReactDOM","LoggedInTogglegAC","getCaptchaThunk","preloaderContainer","preloader","posts","newPostText","userStatus","loadingPhoto","newPost","userAva","likesCount","postId","UserId","getUserStatusThunkCreator","updateUserStatusThunkCreator","uploadUserProfilePhotoThunkCreator","loadingPhotoThunk","RedirectedComponent","SET_USER_PROFILE_PHOTO"],"mappings":"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","file":"static/js/main.94f6b3f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__2qmHb\",\"preloader\":\"Preloader_preloader__3nzjs\"};","const POST_NEW_TEXT = 'POST_NEW_TEXT'\r\n\r\ntype newDialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype newPostItemType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype initialStateType = {\r\n    dialogsData: Array<newDialogType>\r\n    messagesData: Array<newPostItemType>\r\n}\r\n\r\ntype actionType = {\r\n    type : typeof POST_NEW_TEXT\r\n    postText: string\r\n}\r\n\r\nlet initialState : initialStateType  = {\r\n    dialogsData: [],\r\n    messagesData: [],\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action : actionType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POST_NEW_TEXT:\r\n            let newDialog : newDialogType = {\r\n                id: 4,\r\n                name: 'Tema'\r\n            }\r\n            let newPostItem : newPostItemType = {\r\n                id: 4,\r\n                message: action.postText\r\n            }\r\n            return {\r\n                ...state,\r\n                dialogsData: [...state.dialogsData, newDialog],\r\n                messagesData: [...state.messagesData, newPostItem],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const postNewTextActionCreator = (postText : string) => {\r\n    return {\r\n        type: POST_NEW_TEXT,\r\n        postText: postText\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Music_contentColor__3tC_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captchaImg\":\"LoginForm_captchaImg__1M2-6\"};","import { profileType, settingsType, userType } from './../types/types';\r\nimport axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\ntype usersType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const getUsers = (\r\n    pageSize : number, \r\n    pageCount : number, \r\n    searchName : string = '', \r\n    friend : boolean | null\r\n    ) => {\r\n    return instance.get<usersType>(\r\n        `users?page=${pageCount}&count=${pageSize}&term=${searchName}` + (friend === null ? '' : `&friend=${friend}`), \r\n        {})\r\n    .then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\n\r\nexport const getUserProfile = (userId : number) => {\r\n    return instance.get<profileType>('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status : string) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId : number) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file : any) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings : settingsType) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId : number) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId : number) => {\r\n    return instance.delete('follow/' + userId, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\ntype logInVerificationType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get<logInVerificationType>('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email : string, password : string, rememberMe : boolean = true, captcha : string) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__3P2GR\",\"formControl\":\"Login_formControl__2h8Kz\",\"alert\":\"Login_alert__3TE9q\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","let initialState = {\r\n    friends: [\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    return stateCopy\r\n}\r\nexport default friendsReducer","import { userType } from './../types/types';\r\nimport { follow, unFollow, getUsers } from '../API/apiTS'\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { ActionsType, AppStateType } from './reduxStoreTS';\r\n\r\nlet initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 50,\r\n    pageCount: 1,\r\n    totalCount: 0,\r\n    isFetching: false,\r\n    followingProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const usersReducer = (state: initialStateType = initialState, action: actionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false }\r\n                    }\r\n                    return user\r\n                })\r\n            }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case 'PAGE_SIZE':\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        case 'PAGE_COUNT':\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        case 'TOTAL_COUNT':\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            }\r\n        case 'TOGGLE_PRELOADER':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'TOGGLE_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionTypes = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    followAC: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n\r\n    unfollowAC: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n\r\n    setUsersAC: (users: Array<userType>) => ({ type: 'SET_USERS', users } as const),\r\n\r\n    setFilter: (term: string, friend: null | boolean) => ({ type: 'SET_FILTER', payload: { term, friend } } as const),\r\n\r\n    pageSizeAC: (pageSize: number) => ({ type: 'PAGE_SIZE', pageSize } as const),\r\n\r\n    pageCountAC: (pageCount: number) => ({ type: 'PAGE_COUNT', pageCount } as const),\r\n\r\n    totalCountAR: (totalCount: number) => ({ type: 'TOTAL_COUNT', totalCount } as const),\r\n\r\n    togglePreloaderAC: (isFetching: boolean) => ({ type: 'TOGGLE_PRELOADER', isFetching } as const),\r\n\r\n    toggleFollowingProgressAC: (followingProgress: boolean, userId: number) =>\r\n        ({ type: 'TOGGLE_FOLLOWING_PROGRESS', followingProgress, userId } as const),\r\n\r\n}\r\n\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionTypes>\r\n\r\nexport const getUsersThunkCreator =\r\n    (pageSize: number, pageCount: number, searchName: string, friend: boolean | null): thunkType =>\r\n        async (dispatch) => {\r\n            dispatch(actions.togglePreloaderAC(true))\r\n            dispatch(actions.pageCountAC(pageCount))\r\n            dispatch(actions.setFilter(searchName, friend))\r\n            const res = await getUsers(pageSize, pageCount, searchName, friend)\r\n            dispatch(actions.setUsersAC(res.items))\r\n            dispatch(actions.totalCountAR(res.totalCount))\r\n            dispatch(actions.togglePreloaderAC(false))\r\n        }\r\n\r\nexport const removeUsersThunkCreator = ():\r\n    ThunkAction<void, AppStateType, unknown, actionTypes> => {\r\n    return (dispatch) => {\r\n        dispatch(actions.setUsersAC([]))\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId: number): thunkType =>\r\n\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n        const res = await follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.followAC(userId))\r\n        }\r\n        dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\nexport const unFollowThunkCreator = (userId: number): thunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.toggleFollowingProgressAC(true, userId))\r\n        const res = await unFollow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.unfollowAC(userId))\r\n        }\r\n        dispatch(actions.toggleFollowingProgressAC(false, userId))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/api'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst LOGGED_IN_TOGGLE = 'LOGGED_IN_TOGGLE'\r\nconst LOGGED_IN_FETCHING = 'LOGGED_IN_FETCHING'\r\nconst CAPTCHA = 'CAPTCHA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOGGED_IN_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case LOGGED_IN_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setUserDataAC = (userId, email, login, isLoggedIn) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }\r\n}\r\n\r\nexport const LoggedInTogglegAC = (isLoggedIn) => {\r\n    return {\r\n        type: LOGGED_IN_TOGGLE,\r\n        isLoggedIn: isLoggedIn\r\n    }\r\n}\r\n\r\nexport const LoggedInFetchingAC = (isFetching, confirmation) => {\r\n    return {\r\n        type: LOGGED_IN_FETCHING,\r\n        isFetching: isFetching,\r\n        confirmation: confirmation\r\n    }\r\n}\r\n\r\nexport const captcha = (captchaImg) => ({\r\n    type: CAPTCHA,\r\n    captchaImg: captchaImg\r\n})\r\n\r\nexport const logInUserThunkCreator = () => async (dispatch) => {\r\n    dispatch(LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\n\r\nexport const logOut = () =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport const getCaptchaThunk = () =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(captcha(res.data.url))\r\n    }\r\n\r\n\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { logInUserThunkCreator } from \"../OldReducers/authReducer\"\r\nimport { AppStateType } from \"./reduxStoreTS\"\r\n\r\nconst INITIALIZED_SUCCSESS = 'INITIALIZED_SUCCSESS'\r\n\r\ntype initialStateType = {\r\n    initialized : boolean\r\n}\r\n\r\ntype actionType = {\r\n    type: typeof INITIALIZED_SUCCSESS\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCSESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccsess = () : actionType => ({ type: INITIALIZED_SUCCSESS })\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionType>\r\n\r\nexport const initializeApp = () : thunkType => (dispatch) => {\r\n    let logInUserPromise = dispatch(logInUserThunkCreator())\r\n    Promise.all([logInUserPromise]).then(() => {\r\n        dispatch(initializeSuccsess())\r\n    })\r\n}","import { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux'\r\nimport { profileReducer } from './profileReducerTypescript'\r\nimport { dialogsReducer } from './dialogsReducerTypescript'\r\nimport { friendsReducer } from '../OldReducers/friendsReducer'\r\nimport { usersReducer } from './usersReducerTypescript'\r\nimport { authReducer } from './authReducerTypescript'\r\nimport { appReducer } from './appReducerTypescript'\r\nimport { headerReducer } from './HeaderReducerTS'\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    friendsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    headerReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nexport type ActionsType<T> = T extends {[key: string] : (...args: any[]) => infer U } ? U : never\r\n\r\n/* export type CommonThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A> */\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import classes from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Nav = function () {\r\n  return (\r\n    <div className={classes.nav}>\r\n      <div className={classes.item} key=\"1\">\r\n        <NavLink to='/Profile/' activeClassName={classes.active}>My Profile</NavLink>\r\n      </div>\r\n      <div className={classes.item} key=\"2\">\r\n        <NavLink to='/Dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n      </div>\r\n      <div className={classes.item} key=\"3\">\r\n        <NavLink to='/Users' activeClassName={classes.active}>Users</NavLink>\r\n      </div>\r\n      <div className={classes.item} key=\"4\">\r\n        <NavLink to='/Settings' activeClassName={classes.active}>Settings</NavLink>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Nav","import React from 'react'\r\nimport classes from './Music.module.css'\r\nimport { Button } from 'antd'\r\nconst Music = (props) => {\r\n    return (\r\n        <div className={classes.contentColor}>\r\n            <h1>\r\n                Music\r\n            </h1>\r\n            <Button>Music</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport defaultAvatar from '../../assets/defaultAvatar.png'\r\nimport { headerPropsType } from '../../types/types'\r\nimport { Button } from 'antd'\r\n\r\n\r\nconst Header: React.FC<headerPropsType> = (props) => {\r\n\r\n    \r\n    const logout = () => {\r\n        props.logOut()\r\n    }\r\n\r\n    let userSettings = document.getElementById('profileSettings')\r\n\r\n    const showUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'block';\r\n    }\r\n    const hideUserSettingsContainer = () => {\r\n        if (userSettings)\r\n            userSettings.style.display = 'none';\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.login}>\r\n                {props.isLoggedIn ?\r\n                    <div\r\n                        onMouseOver={showUserSettingsContainer}\r\n                        onMouseOut={hideUserSettingsContainer}>\r\n\r\n                        <div\r\n                            className={classes.userInfo}>\r\n                            <div className={classes.userLogin}>\r\n                                <div><span>{props.login}</span></div>\r\n                            </div>\r\n                            <NavLink to='/Profile'>\r\n                                <div className={classes.userAvatar}>\r\n                                    <img src={props.userProfilePhoto || defaultAvatar} alt=\"User avatar\" />\r\n                                </div>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div id='profileSettings' className={classes.profileSettings}>\r\n                        <Button type=\"primary\" onClick={logout}>Log out</Button>\r\n                            <div>\r\n                                <NavLink to='/Settings'>\r\n                                    <Button type=\"primary\" onClick={hideUserSettingsContainer} >\r\n                                        Profile settings\r\n                                </Button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : <NavLink to='/Login'> <button>Login</button></NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Header from './HeaderTS'\r\nimport { logOut } from '../../redux/authReducerTypescript'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport { getUserProfilePhotoThunk } from '../../redux/HeaderReducerTS';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\nimport { headerPropsType } from '../../types/types';\r\n\r\n\r\n\r\nclass HeaderContainer extends React.Component<headerPropsType> {\r\n\r\n    componentDidMount() { \r\n        this.props.getUserProfilePhotoThunk(this.props.userId)\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state : AppStateType) => ({\r\n    isLoggedIn: state.authReducer.isLoggedIn,\r\n    login: state.authReducer.login,\r\n    isFetching: state.authReducer.isFetching,\r\n    userId: state.authReducer.userId,\r\n    userProfilePhoto: state.headerReducer.userProfilePhoto\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, { logOut, getUserProfilePhotoThunk })\r\n)(HeaderContainer) ","import classes from './User.module.css'\r\nimport defaultAvatar from '../../../assets/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Button } from 'antd'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { followThunkCreator, unFollowThunkCreator } from '../../../redux/usersReducerTypescript'\r\n\r\ntype userType = {\r\n    key: number\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photo: string | null\r\n    followed: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nconst User = (props : userType) => {\r\n\r\n    let {\r\n        id,\r\n        photo,\r\n        followed,\r\n        followingProgress,\r\n        name,\r\n        status\r\n    } = props\r\n\r\n    let slicedStatus = null\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (status && status.length > 50) {\r\n        slicedStatus = status.slice(1,50) + '...'\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.user}>\r\n            <div className={classes.logoBlock}>\r\n                <div>\r\n                    <NavLink to={'/Users/' + id} >\r\n                        <img src={photo == null ? defaultAvatar : photo} alt=\"UserPhoto\" />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed\r\n                        ? <Button type='default' disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            dispatch(unFollowThunkCreator(id))\r\n\r\n                        }}>Unfollow</Button>\r\n                        : <Button type='default' disabled={followingProgress.some(userId => userId === id)} onClick={() => {\r\n                            dispatch(followThunkCreator(id))\r\n                        }}>Follow</Button>}\r\n                </div>\r\n            </div>\r\n            <div className={classes.infoBlock}>\r\n                <div className={classes.name}>{name}</div>\r\n                <div className={classes.status}>{slicedStatus || status}</div>\r\n               {/*  <div className={classes.country}>Belarus<i>(hardcode)</i>,</div>\r\n                <div className={classes.city}>Bralaw<i>(hardcode)</i></div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './reduxStoreTS'\r\n\r\nexport const usersSelectors = {\r\n    getAllUsers(state : AppStateType) {\r\n        return state.usersReducer.users\r\n    },\r\n    getPageSize(state : AppStateType) {\r\n        return state.usersReducer.pageSize \r\n    },\r\n    getPageCount(state : AppStateType) {\r\n        return state.usersReducer.pageCount\r\n    },\r\n    getTotalCount(state : AppStateType) {\r\n        return state.usersReducer.totalCount\r\n    },\r\n    getIsFetching(state : AppStateType) {\r\n        return state.usersReducer.isFetching \r\n    },\r\n    getFollowingProgrress(state : AppStateType) {\r\n        return state.usersReducer.followingProgress\r\n    },\r\n    getAllUsersSelector(state : AppStateType) {\r\n        return this.getAllUsers(state).filter(user => true) \r\n    },\r\n    getFilter(state: AppStateType) {\r\n        return state.usersReducer.filter\r\n    }\r\n}\r\n\r\nexport const getUsersSuper = createSelector(usersSelectors.getAllUsers, (users) => {\r\n    return users.filter(user => true)\r\n})\r\n\r\nexport const postsSelectors = {\r\n    getPosts(state : AppStateType) {\r\n        return state.profileReducer.posts\r\n    },\r\n    getProfile(state : AppStateType) {\r\n        return state.profileReducer.profile\r\n    },\r\n    getNewPostsText(state : AppStateType) {\r\n        return state.profileReducer.newPostText\r\n    },\r\n    getLogin(state : AppStateType) {\r\n        return state.authReducer.login\r\n    }\r\n}\r\n\r\n","import React, { useEffect } from 'react'\r\nimport User from './User/UserTS'\r\nimport classes from './Users.module.css'\r\nimport { userType } from '../../types/types'\r\nimport { useSelector } from 'react-redux'\r\nimport { usersSelectors, getUsersSuper } from '../../redux/selectorsTS'\r\nimport { useHistory } from 'react-router'\r\n\r\n\r\nconst UsersTS: React.FC = () => {\r\n\r\n    const history = useHistory()\r\n    const filter = useSelector(usersSelectors.getFilter)\r\n    const usersAll = useSelector(getUsersSuper)\r\n    const pageCount = useSelector(usersSelectors.getPageCount)\r\n    const followingProgress = useSelector(usersSelectors.getFollowingProgrress)\r\n\r\n    useEffect(() => {\r\n        history.push({\r\n            pathname: '/users',\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${pageCount}`\r\n        })\r\n    }, [filter, pageCount])\r\n\r\n    let users = usersAll.map(user => <User\r\n        key={user.id}\r\n        id={user.id}\r\n        name={user.name}\r\n        status={user.status}\r\n        photo={user.photos.small}\r\n        followed={user.followed}\r\n        followingProgress={followingProgress}\r\n    />)\r\n\r\n    return (\r\n        <div className={classes.users}>\r\n            <div>\r\n                {users}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default UsersTS","import { Field, Form, Formik } from 'formik'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getUsersThunkCreator, removeUsersThunkCreator } from '../../redux/usersReducerTypescript'\r\nimport classes from './Users.module.css'\r\nimport { useSelector } from 'react-redux'\r\nimport { usersSelectors } from '../../redux/selectorsTS'\r\n\r\n\r\n\r\nconst SearchForm = () => {\r\n\r\n    const pageSize = useSelector(usersSelectors.getPageSize)\r\n    const isFetching= useSelector(usersSelectors.getIsFetching)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (values: initialValuesType) => {\r\n        dispatch(removeUsersThunkCreator())\r\n        async function searchUsers() {\r\n            await dispatch(getUsersThunkCreator(pageSize, 1, values.userName, values.friend))\r\n        }\r\n        return searchUsers()\r\n    }\r\n\r\n    const initialValues = {\r\n        userName: '',\r\n        friend: null\r\n    }\r\n\r\n    type initialValuesType = typeof initialValues\r\n\r\n    return (\r\n        <div >\r\n            <Formik initialValues={initialValues} onSubmit={onSubmit} validateOnChange={false}>\r\n                {\r\n                    formik => {\r\n                        return <Form className={classes.searchModule}>\r\n                            <Field\r\n                                as='input'\r\n                                name='userName'\r\n                            />\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Friends</option>\r\n                                <option value=\"false\">Not friends</option>\r\n                            </Field>\r\n                            <input type='submit' value='search' disabled={formik.isSubmitting} />\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React, { useEffect } from 'react'\r\nimport UsersTS from './UsersTS';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\nimport SearchForm from './SearchForm'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    getUsersThunkCreator\r\n} from '../../redux/usersReducerTypescript'\r\nimport { compose } from 'redux';\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect'\r\nimport {\r\n    usersSelectors\r\n} from '../../redux/selectorsTS'\r\nimport ReactPaginate from 'react-paginate'\r\nimport classes from './Users.module.css'\r\n\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number\r\n    pageCount: number\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(usersSelectors.getTotalCount)\r\n    const numberOfPageButtons = Math.ceil(totalUsersCount / props.pageSize)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onPageChange = (selected: number) => {\r\n        dispatch(getUsersThunkCreator(props.pageSize, selected + 1, '', null))\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n    return (\r\n        <ReactPaginate\r\n            previousLabel={\"Previous\"}\r\n            nextLabel={\"Next\"}\r\n            pageCount={numberOfPageButtons}\r\n            pageRangeDisplayed={5}\r\n            marginPagesDisplayed={2}\r\n            onPageChange={({ selected }) => {\r\n                return onPageChange(selected)\r\n            }}\r\n            containerClassName={classes.paginationBttns}\r\n            previousLinkClassName={classes.prevBttn}\r\n            nextLinkClassName={classes.nextBttn}\r\n            disabledClassName={classes.paginationDisabled}\r\n            activeClassName={classes.paginationActive}\r\n            initialPage={props.pageCount - 1}\r\n            disableInitialCallback={true}\r\n        />\r\n    )\r\n}\r\n\r\nconst UsersInnerContainer: React.FC<any> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const pageSize = useSelector(usersSelectors.getPageSize)\r\n    const pageCount = useSelector(usersSelectors.getPageCount)\r\n    const isFetching = useSelector(usersSelectors.getIsFetching)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(pageSize, pageCount, '', null))\r\n    }, [])\r\n    console.log(isFetching)\r\n    return (\r\n        <>\r\n            {\r\n                isFetching\r\n                    ? <>\r\n                        <SearchForm />\r\n                        <Preloader />\r\n                    </>\r\n                    : <>\r\n                        <SearchForm />\r\n                        <UsersTS />\r\n                        <Paginator pageSize={pageSize} pageCount={pageCount} />\r\n                    </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default compose(LoggedInRedirect)(UsersInnerContainer)","import React from 'react' \r\nimport classes from './Login.module.css'\r\n\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div className={classes.error}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError","import React from 'react' \r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikCheckbox = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <div>\r\n                                    <label htmlFor={option.value}>{option.key}</label>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value.length === 2} />\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikCheckbox","import React from 'react'\r\nimport DateView from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikDatePicker = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field name={name}>\r\n                {\r\n                    ({ form, field }) => {\r\n                        const { setFieldValue } = form\r\n                        const { value } = field\r\n                        return <DateView\r\n                            id={name}\r\n                            {...field}\r\n                            {...rest}\r\n                            selected={value}\r\n                            onChange={val => setFieldValue(name, val)} />\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikDatePicker","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\nimport cn from 'classnames'\r\n\r\nconst Input = (props) => {\r\n    return <div className={classes.formControl}>\r\n        <label htmlFor={props.name}>{props.label}</label>\r\n        <div>\r\n            <Field\r\n                className={props.className}\r\n                id={props.name}\r\n                name={props.name}\r\n                type={props.type}\r\n                autocomplete={props.autocomplete} />\r\n            <ErrorMessage name={props.name} component={TextError} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst FormikInput = (props) => {\r\n    const {\r\n        label,\r\n        name,\r\n        email,\r\n        password,\r\n        touchedEmail,\r\n        touchedPassword,\r\n        type\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Input className={cn({\r\n                [classes.alert]: touchedEmail && !email || touchedPassword && !password\r\n            })}\r\n                name={name}\r\n                label={label}\r\n                type={type} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikInput","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\n\r\nconst FormikRadioButtons = (props) => {\r\n    const { name, label, options, ...rest } = props\r\n    return (\r\n        <div >\r\n            <label htmlFor={name}>{label}</label>\r\n            <div></div>\r\n            <Field name={name} {...rest}>\r\n                {\r\n                    ({ field }) => {\r\n                        return options.map(option => {\r\n                            return (\r\n                                <React.Fragment key={option.key}>\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        id={option.value}\r\n                                        {...field}\r\n                                        value={option.value}\r\n                                        checked={field.value === option.value} />\r\n                                        <label htmlFor={option.value}>{option.key}</label>\r\n                                </React.Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikRadioButtons","import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikSelect = (props) => {\r\n    const { label, name, options, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='select' id={name} name={name} {...rest}>\r\n                {\r\n                    options.map(option => {\r\n                        return <option key={option.value} value={option.value}>\r\n                            {option.key}\r\n                        </option>\r\n                    })\r\n                }\r\n            </Field>\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikSelect","import React from 'react' \r\nimport { Field, ErrorMessage} from 'formik'\r\nimport TextError from './TextError'\r\nimport classes from './Login.module.css'\r\n\r\nconst FormikTextArea = (props) => {\r\n    const { label, name, ...rest } = props\r\n    return (\r\n        <div className={classes.formControl}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field as='textarea' id={name} name={name} {...rest}/>\r\n            <ErrorMessage name={name} component={TextError}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormikTextArea","import FormikCheckbox from './FormikCheckbox'\r\nimport FormikDatePicker from './FormikDatePicker'\r\nimport FormikInput from './FormikInput'\r\nimport FormikRadioButtons from './FormikRadioButtons'\r\nimport FormikSelect from './FormikSelect'\r\nimport FormikTextArea from './FormikTextArea'\r\n\r\nconst FormikControl = (props) => {\r\n    const { control, ...rest } = props\r\n    switch (control) {\r\n        case 'input': return <FormikInput {...rest} />\r\n        case 'textarea': return <FormikTextArea {...rest} />\r\n        case 'select': return <FormikSelect {...rest} />\r\n        case 'radio': return <FormikRadioButtons {...rest} />\r\n        case 'checkbox': return <FormikCheckbox {...rest} /> \r\n        case 'date': return <FormikDatePicker {...rest} />\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport default FormikControl","import React from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { login } from '../../redux/authReducerTypescript'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './LoginForm.module.css'\r\nimport { AppStateType } from '../../redux/reduxStoreTS'\r\n\r\ntype loginPropsType = {\r\n    isLoggedIn: boolean\r\n    captchaImg: string | undefined\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst LoginForm : React.FC<loginPropsType> = (props) => {\r\n\r\n    const { login, isLoggedIn, captchaImg } = props\r\n\r\n    type initialValuesType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n        captcha: string\r\n    }\r\n\r\n    const initialValues : initialValuesType = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid email format').required('Enter email'),\r\n        password: Yup.string().required('Enter password'),\r\n    })\r\n\r\n    const onSubmit = (values : initialValuesType) => {\r\n        login(values.email, values.password, values.rememberMe, values.captcha)\r\n    }\r\n\r\n    if (isLoggedIn) { return <Redirect to={'/Profile'} /> } // Проверяем, если мы залогинены, то редиректим на профиль\r\n\r\n    return (\r\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n            {\r\n                formik => {\r\n                    return <Form>\r\n                        <h1>Login</h1>\r\n                        <FormikControl\r\n                            email={formik.values.email}\r\n                            touchedEmail={formik.touched.email}\r\n                            control='input'\r\n                            type='email'\r\n                            label='Email'\r\n                            name='email' />\r\n                        <FormikControl\r\n                            password={formik.values.password}\r\n                            touchedPassword={formik.touched.password}\r\n                            control='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            name='password'\r\n                        />\r\n                        <p></p>\r\n                        <input type='submit' disabled={!formik.isValid} value={'Login'} />\r\n                        {!captchaImg ?\r\n                            null\r\n                            : <div className={classes.captchaImg}>\r\n                                <p></p>\r\n                                <img src={captchaImg} alt=\"captcha\" />\r\n                                <FormikControl\r\n                                    control='input'\r\n                                    label='Enter your captcha'\r\n                                    name='captcha'\r\n                                />\r\n                            </div>\r\n                        }\r\n                    </Form>\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\nexport let mapStateToProps = (state : AppStateType) => {\r\n    return {\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        captchaImg: state.authReducer.captchaImg\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(LoginForm)","import React from 'react'\r\nimport Preloader from '../components/Common/Preloader/Preloader'\r\n\r\nexport const WithSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props}/>\r\n        </React.Suspense> \r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport FormikControl from '../Common/FormControls/FormikControl'\r\nimport * as Yup from 'yup'\r\nimport { profileType, settingsType } from '../../types/types'\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n    sendProfileSettings: (values : any) => void\r\n}\r\n\r\nconst Settings : React.FC<propsType> = (props) => {\r\n    \r\n    const { fullName, aboutMe, lookingForAJob, lookingForAJobDescription } = props.profile\r\n    const { facebook, github, instagram, mainLink, twitter, vk, website, youtube } = props.profile.contacts\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        contacts: Yup.object().shape({\r\n            github: Yup.string().url('Invalid URL!'),\r\n            vk: Yup.string().url('Invalid URL!'),\r\n            facebook: Yup.string().url('Invalid URL!'),\r\n            instagram: Yup.string().url('Invalid URL!'),\r\n            twitter: Yup.string().url('Invalid URL!'),\r\n            website: Yup.string().url('Invalid URL!'),\r\n            youtube: Yup.string().url('Invalid URL!'),\r\n            mainLink: Yup.string().url('Invalid URL!')\r\n        })\r\n    })\r\n\r\n\r\n    const initialValues : settingsType = {\r\n        fullName: fullName,\r\n        aboutMe: aboutMe,\r\n        lookingForAJob: lookingForAJob,\r\n        lookingForAJobDescription: lookingForAJobDescription,\r\n        contacts: {\r\n            github: github,\r\n            vk: vk,\r\n            facebook: facebook,\r\n            instagram: instagram,\r\n            twitter: twitter,\r\n            website: website,\r\n            youtube: youtube,\r\n            mainLink: mainLink,\r\n        },\r\n    }\r\n\r\n    const onSubmit = (values : settingsType) => {\r\n        async function sendProfileSettings() {\r\n            await props.sendProfileSettings(values)\r\n        }\r\n        return sendProfileSettings()\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}\r\n                validateOnChange={false}\r\n                >\r\n                {\r\n                    formik => {\r\n                        return <Form>\r\n                            <h1>Profile settings</h1>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Full Name'\r\n                                name='fullName'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='About me'\r\n                                name='aboutMe'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='My skills'\r\n                                name='lookingForAJobDescription'\r\n                            />\r\n                            <div>\r\n                                <p></p>\r\n                                <Field\r\n                                    type='checkbox'\r\n                                    name='lookingForAJob'\r\n                                />\r\n                                <label htmlFor=\"lookingForAJob\">Looking for a job</label>\r\n                            </div>\r\n                            <h3>\r\n                                Contacts\r\n                            </h3>\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Github'\r\n                                name='contacts.github'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='vk'\r\n                                name='contacts.vk'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Facebook'\r\n                                name='contacts.facebook'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Instagram'\r\n                                name='contacts.instagram'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Twitter'\r\n                                name='contacts.twitter'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Website'\r\n                                name='contacts.website'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Youtube'\r\n                                name='contacts.youtube'\r\n                            />\r\n                            <FormikControl\r\n                                control='input'\r\n                                label='Main link'\r\n                                name='contacts.mainLink'\r\n                            />\r\n                            <p></p>\r\n                            <input type='submit' value='save' disabled={formik.isSubmitting}/>\r\n                        </Form>\r\n                    }\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { updateUserProfileSettings, getUserProfileThunkCreator, removeUserProfileThunkCreator } from '../../redux/profileReducerTypescript'\r\nimport { connect } from \"react-redux\";\r\nimport Settings from './SettingsTS';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { LoggedInRedirect } from '../../hoc/LoggedInRedirect';\r\nimport { profileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/reduxStoreTS';\r\n\r\n\r\ntype propsType = {\r\n    userId: number\r\n    profile: profileType\r\n    getUserProfileThunkCreator: (userId : number) => void\r\n    removeUserProfileThunkCreator: () => void\r\n    updateUserProfileSettings: () => void\r\n}\r\n\r\nclass SettingsContainer extends React.Component<propsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserProfileThunkCreator(this.props.userId)\r\n    }\r\n    componentWillUnmount() {\r\n        this.props.removeUserProfileThunkCreator()\r\n    }\r\n    render() {\r\n        return <>\r\n            {\r\n                !this.props.profile\r\n                    ? null\r\n                    : <Settings\r\n                        sendProfileSettings={this.props.updateUserProfileSettings}\r\n                        profile={this.props.profile}\r\n                    />\r\n            }\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state : AppStateType) => ({\r\n    profile: state.profileReducer.profile,\r\n    userId: state.authReducer.userId\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter, \r\n    connect(mapStateToProps, { \r\n        updateUserProfileSettings, \r\n        getUserProfileThunkCreator, \r\n        removeUserProfileThunkCreator \r\n    }),\r\n    LoggedInRedirect\r\n) \r\n(SettingsContainer) ","import React from 'react'\nimport 'antd/dist/antd.css'\nimport './App.css'\nimport { Route, withRouter, BrowserRouter } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux'\nimport { initializeApp } from './redux/appReducerTypescript'\nimport { compose } from 'redux';\nimport store, { AppStateType } from './redux/reduxStoreTS'\nimport Nav from './components/Navbar/NavTS';\nimport Music from './components/Music/Music';\nimport HeaderContainer from './components/Header/HeaderContainerTS';\nimport UsersInnerContainer from './components/Users/UsersInnerContainerTS';\nimport LoginForm from './components/Login/LoginFormTS';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport { WithSuspense } from './hoc/WithSuspense';\nimport SettingsContainer from './components/Settings/SettingsContainerTS';\n\n\nconst DialogContainerTS = React.lazy(() => import('./components/Dialogs/DialogContainerTS'))\nconst ProfileContainer = React.lazy(() => import('./components/NewProfile/ProfileContainerTS'))\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n    if (!this.props.initialized) return <Preloader />\n    return (\n      <>\n        <HeaderContainer />\n        <div className='app-wrapper'>\n          <Nav />\n          <div className='app-wrapper-content'>\n            <Route path='/Dialogs' render={WithSuspense(DialogContainerTS)}/>\n            <Route path='/Profile/:userId?' render={WithSuspense(ProfileContainer)}/>\n            <Route path='/Users/:userId' render={WithSuspense(ProfileContainer)} />\n            <Route exact path='/Users' render={() => <UsersInnerContainer />} />\n            <Route path='/Music' render={() => <Music />} />\n            <Route path='/Settings' render={() => <SettingsContainer />} />\n            <Route path='/Login' render={() => <LoginForm />} />\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.appReducer.initialized\n})\n\nlet AppWithRouter = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App)\n\nlet MainApp = () => {\n  return <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <AppWithRouter />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default MainApp\n","import reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStoreTS'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './AppTS';\n \n\nexport let rerenderEntireTree = () => {\n  ReactDOM.render( <MainApp />,\n    document.getElementById('root')\n  );\n}\nrerenderEntireTree(store)\nwindow.store = store\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n","import { ThunkAction } from 'redux-thunk'\r\nimport { loginMe, logInProfile, getCaptcha, logOutMe } from '../API/apiTS'\r\nimport { ActionsType, AppStateType } from './reduxStoreTS'\r\n\r\ntype initialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isLoggedIn: boolean\r\n    isFetching: boolean\r\n    confirmation: boolean\r\n    captchaImg: string\r\n}\r\n\r\n\r\nlet initialState : initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isLoggedIn: false,\r\n    isFetching: false,\r\n    confirmation: false,\r\n    captchaImg: '',\r\n}\r\n\r\nexport const authReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            } as initialStateType\r\n        case 'LOGGED_IN_TOGGLE':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case 'LOGGED_IN_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n                confirmation: action.confirmation\r\n            }\r\n        case 'CAPTCHA':\r\n            return {\r\n                ...state,\r\n                captchaImg: action.captchaImg\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionsType = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setUserDataAC : (userId : number | null, email : string | null, login : string | null, isLoggedIn : boolean) => ({\r\n            type: 'SET_USER_DATA',\r\n            data: { userId, email, login, isLoggedIn: isLoggedIn },\r\n    }as const),\r\n    \r\n    LoggedInTogglegAC : (isLoggedIn : boolean) => ({\r\n            type: 'LOGGED_IN_TOGGLE',\r\n            isLoggedIn: isLoggedIn\r\n    } as const),\r\n    \r\n    LoggedInFetchingAC : (isFetching : boolean, confirmation : boolean) => ({\r\n            type: 'LOGGED_IN_FETCHING',\r\n            isFetching: isFetching,\r\n            confirmation: confirmation\r\n    } as const),\r\n    \r\n    captcha : (captchaImg : string) => ({\r\n        type: 'CAPTCHA',\r\n        captchaImg: captchaImg\r\n    } as const)\r\n}\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const logInUserThunkCreator = () : thunkType => async (dispatch) => {\r\n    dispatch(actions.LoggedInFetchingAC(true, false))\r\n    const res = await logInProfile()\r\n    if (res.data.resultCode === 0) {\r\n        let { id, email, login } = res.data.data\r\n        dispatch(actions.setUserDataAC(id, email, login, true))\r\n    }\r\n    dispatch(actions.LoggedInFetchingAC(false, true))\r\n}\r\n\r\nexport const login = (email : string, password : string, rememberMe : boolean, captcha : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await loginMe(email, password, rememberMe, captcha)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(logInUserThunkCreator())\r\n        }\r\n        if (res.data.resultCode === 10) {\r\n            dispatch(getCaptchaThunk())\r\n        }\r\n    }\r\n\r\nexport const logOut = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await logOutMe()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n\r\nexport const getCaptchaThunk = () : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getCaptcha()\r\n        dispatch(actions.captcha(res.data.url))\r\n    }\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentColor\":\"Users_contentColor__2Kips\",\"addUsersButtonContainer\":\"Users_addUsersButtonContainer__3tC_O\",\"searchModule\":\"Users_searchModule__2XlsX\",\"paginationBttns\":\"Users_paginationBttns__2LHF9\",\"paginationActive\":\"Users_paginationActive__1pa9Q\",\"paginationDisabled\":\"Users_paginationDisabled__2UjJv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3jRL3\",\"item\":\"Nav_item__3Mn2D\",\"active\":\"Nav_active__10tEP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__eA5PG\",\"login\":\"Header_login__2clXM\",\"userInfo\":\"Header_userInfo__UZJGJ\",\"userLogin\":\"Header_userLogin__1B_UB\",\"userAvatar\":\"Header_userAvatar__8bsmo\",\"profileSettings\":\"Header_profileSettings__3xpjx\"};","export default __webpack_public_path__ + \"static/media/loaderSVG.9daeb47d.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/loaderSVG.svg'\r\nimport classes from './Preloader.module.css'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.preloaderContainer}>\r\n            <img className={classes.preloader} src={preloader} alt='preloader'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendUserStatus,\r\n    sendUserPhoto,\r\n    sendUserProfileSettings\r\n} from '../API/apiTS'\r\n\r\nimport {\r\n    photosType,\r\n    postsType,\r\n    profileType\r\n} from '../types/types'\r\nimport { ActionsType, AppStateType } from './reduxStoreTS';\r\n\r\nlet initialState = {\r\n    posts: [] as Array<postsType>,\r\n    newPostText: '',\r\n    profile: null as profileType | null,\r\n    userStatus: '',\r\n    loadingPhoto: false\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state = initialState, action : actionsType) : initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_USER_PROFILE': {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case 'APDATE_USER_STATUS': {\r\n            return {\r\n                ...state,\r\n                userStatus: action.userStatus\r\n            } \r\n        }\r\n        case 'UPDATE_USER_PHOTO': {\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as profileType}\r\n        }\r\n        case 'ADD_NEW_POST': {\r\n            let newPost = {\r\n                id: 1,\r\n                postText: action.postText,\r\n                userAva: null,\r\n                userName: action.login,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost] as Array<postsType>\r\n            }\r\n        }\r\n        case 'DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id != action.postId)\r\n            }\r\n        }\r\n        case 'LOADING_NEW_PROFILE_PHOTO': {\r\n            return {\r\n                ...state,\r\n                loadingPhoto: !state.loadingPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype actionsType = ActionsType<typeof actions>\r\n\r\nexport const actions = {\r\n    setUserProfile : (profile : profileType | null ) => ({ type: 'SET_USER_PROFILE', profile } as const),\r\n\r\n    updateUserStatusAC : (userStatus : string) => ({ type: 'APDATE_USER_STATUS', userStatus } as const),\r\n    \r\n    updateUserPhotoAC : (photos : photosType) => ({ type: 'UPDATE_USER_PHOTO', photos } as const),\r\n    \r\n    loadingPhotoAC : () => ({type: 'LOADING_NEW_PROFILE_PHOTO'} as const),\r\n    \r\n    addNewPostAC : (postText:string, login:string) => ({ type: 'ADD_NEW_POST', postText, login } as const),\r\n    \r\n    deletePostAC : (postId:number) => ({ type: 'DELETE_POST', postId } as const)\r\n}\r\n\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionsType>\r\n\r\nexport const getUserProfileThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId)\r\n        dispatch(actions.setUserProfile(res.data))\r\n    }\r\n// Делаем запрос на сервер за данными пользователя, и диспатчим данные в стор\r\n\r\nexport const removeUserProfileThunkCreator = () : ThunkAction<void, AppStateType, unknown, actionsType> => {\r\n    return (dispatch) => {\r\n        dispatch(actions.setUserProfile(null))\r\n    }\r\n} // Удаляем из стора загруженный профиль\r\n\r\nexport const getUserStatusThunkCreator = (UserId : number) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await getUserStatus(UserId)\r\n        dispatch(actions.updateUserStatusAC(res.data))\r\n    }\r\n// Делаем запрос на сервер и диспатчим статус пользователя\r\n\r\nexport const updateUserStatusThunkCreator = (status : string) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.updateUserStatusAC(status))\r\n        }\r\n    }\r\n\r\nexport const updateUserProfileSettings = (settings : any) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserProfileSettings(settings)\r\n    }\r\n\r\n\r\nexport const uploadUserProfilePhotoThunkCreator = (file : File) : thunkType =>\r\n    async (dispatch) => {\r\n        const res = await sendUserPhoto(file)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(actions.updateUserPhotoAC(res.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const addNewPostThunkCreator = (postText : string, login : string) : \r\nThunkAction<void, AppStateType, unknown, actionsType> => \r\n(dispatch) => {\r\n    dispatch(actions.addNewPostAC(postText, login))\r\n}\r\n\r\nexport const loadingPhotoThunk = () : \r\nThunkAction<void, AppStateType, unknown, actionsType> => (dispatch : any) => {\r\n    dispatch(actions.loadingPhotoAC())\r\n}\r\n\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Kdvq\",\"logoBlock\":\"User_logoBlock__xhS7H\",\"infoBlock\":\"User_infoBlock__3O4VD\",\"name\":\"User_name__3sCD6\",\"status\":\"User_status__1ssRJ\",\"city\":\"User_city__1xMuO\",\"country\":\"User_country__1_5tH\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-Key': '0956be17-9287-4aaa-8ddc-9d18425e88b9',\r\n    }\r\n})\r\n\r\nexport const getUsers = (pageSize, pageCount) => {\r\n    return instance.get('users?page=' + pageCount + '&count=' + pageSize, {}).then(res => res.data)\r\n} // Получаем с сервера объект с пользователями \r\n\r\nexport const getUserProfile = (userId) => {\r\n    return instance.get('profile/' + userId, {})\r\n} // Получаем с сервера профиль пользователя согласно id выбранного пользователя\r\n\r\nexport const sendUserStatus = (status) => {\r\n    return instance.put('profile/status/', { status: status })\r\n} // Отправляем на сервер новый статус пользователя\r\n\r\nexport const getUserStatus = (userId) => {\r\n    return instance.get('profile/status/' + userId, {})\r\n} // Получаем с сервера статус профиля пользователя\r\n\r\nexport const sendUserPhoto = (file) => {\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    return instance.put('profile/photo/', formData, { \r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n     })\r\n} // отправляем на сервер новое фото пользователя\r\n\r\nexport const sendUserProfileSettings = async (settings) => {\r\n    try {\r\n        const res = await instance.put('profile', settings)\r\n        return res\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        console.log('finally')\r\n    }\r\n    \r\n} // Отправляем на сервер новые настройки профиля пользователя \r\n\r\nexport const follow = (userId) => {\r\n    return instance.post('follow/' + userId, {}, {})\r\n} // Отправляем запрос на подписку на пользователя\r\n\r\nexport const unFollow = (userId) => {\r\n    return instance.delete('follow/' + userId, {}, {})\r\n} // Отправляем запрос на отписку от пользвателя\r\n\r\nexport const logInProfile = () => {\r\n    return instance.get('auth/me')\r\n} // Отпраялем запрос на проверку верификации профиля\r\n\r\nexport const loginMe = (email, password, rememberMe = true, captcha) => {\r\n    return instance.post('auth/login', { email, password, rememberMe, captcha })\r\n} // Логинимся в приложение\r\n\r\nexport const logOutMe = () => {\r\n    return instance.delete('auth/login')\r\n} // Выходим из приложения\r\n\r\nexport const getCaptcha = () => {\r\n    return instance.get('security/get-captcha-url')\r\n} // Отправляем запрос на капчу","export default __webpack_public_path__ + \"static/media/defaultAvatar.0334f4b4.png\";","import React from 'react'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from 'react-redux'\r\nimport { actions, logOut } from '../redux/authReducerTypescript'\r\n\r\nexport const LoggedInRedirect = (Component) => {\r\n    class RedirectedComponent extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.props = props\r\n        }\r\n\r\n        render() {\r\n            if (!this.props.isLoggedIn) return <Redirect to='/Login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let mapStateToPropsLoggedInRedirect = (state) => ({\r\n        isLoggedIn: state.authReducer.isLoggedIn,\r\n        isFetching: state.authReducer.isFetching,\r\n        confirmation: state.authReducer.confirmation,\r\n    })\r\n    let LogInRedirectComponent = connect(\r\n        mapStateToPropsLoggedInRedirect,\r\n        {\r\n            LoggedInTogglegAC: actions.LoggedInTogglegAC,\r\n            LoggedInFetchingAC: actions.LoggedInFetchingAC,\r\n            logOut\r\n        }\r\n    )(RedirectedComponent)\r\n    return LogInRedirectComponent\r\n}\r\n\r\n","import { ThunkAction } from 'redux-thunk';\r\nimport {\r\n    getUserProfile,\r\n} from '../API/apiTS'\r\nimport { AppStateType } from './reduxStoreTS';\r\n\r\nconst SET_USER_PROFILE_PHOTO : string = 'SET_USER_PROFILE_PHOTO';\r\n\r\nexport type initialStateType = {\r\n    userProfilePhoto: string\r\n}\r\n\r\ntype actionType = {\r\n    type: string,\r\n    userProfilePhoto: string\r\n}\r\n\r\nlet initialState : initialStateType = {\r\n    userProfilePhoto: '',\r\n}\r\n\r\nexport const headerReducer = (state = initialState, action : actionType) : initialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE_PHOTO: {\r\n            return { ...state, userProfilePhoto: action.userProfilePhoto }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfilePhoto = (userProfilePhoto : string) : \r\nactionType => ({type: SET_USER_PROFILE_PHOTO, userProfilePhoto})\r\n\r\ntype thunkType = ThunkAction<Promise<void>, AppStateType, unknown, actionType>\r\n\r\nexport const getUserProfilePhotoThunk = (UserId : number) : thunkType => \r\n    async (dispatch) => {\r\n        const res = await getUserProfile(UserId) \r\n        dispatch(setUserProfilePhoto(res.data.photos.small))\r\n    }\r\n"],"sourceRoot":""}